{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get started","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"#get-started","title":"Get started","text":"<p>Before you can show any ads to your users, you have to ask for their consent. Ideally, it should be done at game's start-up before initializing AdMob SDK. The Google User Messaging Platform (UMP) is a privacy and messaging tool to help you manage privacy choices. For more information, see About Privacy &amp; messaging. </p>"},{"location":"#set-up-your-app-in-your-admob-account","title":"Set up your app in your AdMob account","text":"<p>If you haven't done it already, register your app as an AdMob app by completing the following steps:</p> <ol> <li>Sign in to or sign up for an AdMob account.</li> <li>Register your app with AdMob. This step creates an AdMob app with a unique AdMob App ID that is needed later in this guide.</li> </ol>"},{"location":"#create-a-message-type","title":"Create a message type","text":"<p>Create user messages with one of the Available user message types under the Privacy &amp; messaging tab of your AdMob account. The UMP SDK attempts to display a privacy message created from the AdMob Application ID set in your project.</p>"},{"location":"#configure-your-project","title":"Configure your project","text":""},{"location":"#enable-the-plugin","title":"Enable the plugin","text":"<p>The plugin is typically enabled by default upon installation. However, if it's not, follow these steps:</p> <ol> <li>Navigate to Edit &gt; Plugins in Unreal Engine.</li> <li>Search for <code>Google User Messaging Platform</code> in the plugin list.</li> <li>If the plugin is disabled, enable it by checking the corresponding box.</li> </ol>"},{"location":"#enter-your-app-ids-in-project-settings","title":"Enter your App IDs in Project Settings","text":"<ol> <li>Copy your AdMob app ID, as identified in the AdMob web interface. You'll need to separate AdMob apps for Android and iOS, i.e. two different App IDs for each platform.</li> <li>Open Project Settings &gt; Plugins &gt; Google UMP in Unreal Engine, and paste the copied values into the corresponding AdMob App ID fields.</li> </ol>"},{"location":"#get-the-users-consent-information","title":"Get the user's consent information","text":"<p>You should request an update of the user's consent information at every app launch, using <code>UGoogleUMP::RequestConsentInfoUpdate()</code>. This request checks the following:</p> <ul> <li>Whether consent is required. For example, consent is required for the first time, or the previous consent decision expired.</li> <li>Whether a privacy options entry point is required. Some privacy messages require apps to allow users to modify their privacy options at any time.</li> </ul> <p>Tip</p> <p>It's highly recommended you do your UMP and initialization logic inside the <code>Init()</code> function of the <code>UPlatformGameInstance</code> derived class, as game instance persists between levels and its <code>Init()</code> function gets executed before any other game logic.</p> C++Blueprints <pre><code>#include \"GoogleUMP.h\"\n// ...\nUGoogleUMP::OnRequestConsentInfoUpdateSuccess.AddLambda([](){});\nUGoogleUMP::OnRequestConsentInfoUpdateFailure.AddLambda(\n    []\n    (const int32 ErrorCode, const FString&amp; ErrorMessage)\n    {}\n);\nUGoogleUMP::RequestConsentInfoUpdate();\n</code></pre> <p></p>"},{"location":"#load-and-present-the-privacy-message-form","title":"Load and present the privacy message form","text":"<p>After you have received the most up-to-date consent status, call <code>UGoogleUMP::LoadAndShowConsentFormIfRequired()</code> to load any forms required to collect user consent. After loading, the forms present immediately.</p> <p>Info</p> <p>If no privacy message forms require collection of user consent prior to requesting ads, the callback is invoked immediately.</p> C++Blueprints <pre><code>#include \"GoogleUMP.h\"\n// ...\nUGoogleUMP::OnConsentFormDismissed.AddLambda([](){});\nUGoogleUMP::OnConsentFormDismissedWithError.AddLambda(\n    []\n    (const int32 ErrorCode, const FString&amp; ErrorMessage)\n    {}\n);\nUGoogleUMP::LoadAndShowConsentFormIfRequired();\n</code></pre> <p></p>"},{"location":"#privacy-options","title":"Privacy options","text":"<p>Some privacy message forms are presented from a publisher-rendered privacy options entry point, letting users manage their privacy options at any time. To learn more about which message your users see at the privacy options entry point, see Available user message types.</p> <p>After you have called <code>UGoogleUMP::RequestConsentInfoUpdate()</code>, get privacy options requirement status with <code>UGoogleUMP::GetPrivacyOptionsRequirementStatus()</code> function to determine if a privacy options entry point is required for your app. If an entry point is required, add a visible and interactable UI element to your game that presents the privacy options form (UMG button in options menu, for example). If a privacy entry point is not required, configure your UI element to be not visible and interactable.</p> C++Blueprints <pre><code>#include \"Components/Widget.h\"\n#include \"GoogleUMP.h\"\n// ...\nvoid UYourWidget::NativeConstruct()\n{\n    Super::NativeConstruct();\n\n    if (UGoogleUMP::GetPrivacyOptionsRequirementStatus() == EGoogleUMPPrivacyOptionsRequirementStatus::REQUIRED)\n    {\n        PrivacyOptionsButton-&gt;SetVisibility(ESlateVisibility::Visible);\n    }\n    else\n    {\n        PrivacyOptionsButton-&gt;SetVisibility(ESlateVisibility::Collapsed);\n    }\n}\n</code></pre> <p></p> <p>When the user interacts with your element, present the privacy options form:</p> C++Blueprints <pre><code>#include \"Components/Button.h\"\n#include \"GoogleUMP.h\"\n// ...\nvoid UYourWidget::NativeConstruct()\n{\n    //...\n    PrivacyOptionsButton-&gt;OnClicked.AddDynamic(this, &amp;UYourWidget::OnPrivacyOptionsButtonClicked);\n}\n\nvoid UYourWidget::OnPrivacyOptionsButtonClicked()\n{\n    UGoogleUMP::OnConsentFormDismissed.AddLambda([]\n        {\n            //...\n        }\n    );\n    UGoogleUMP::OnConsentFormDismissedWithError.AddLambda([]\n        (const int32 ErrorCode, const FString&amp; ErrorMessage)\n        {\n            //...\n        }\n    );\n    UGoogleUMP::ShowPrivacyOptionsForm();\n}\n</code></pre> <p></p> <p>Note</p> <p>Same delegates are used for <code>UGoogleUMP::LoadAndShowConsentFormIfRequired()</code> and <code>UGoogleUMP::ShowPrivacyOptionsForm()</code> functions.</p>"},{"location":"#request-ads-with-user-consent","title":"Request ads with user consent","text":"<p>Before requesting ads, use <code>UGoogleUMP::CanRequestAds()</code> to check if you've obtained consent from the user.</p> <p>Listed are the following places to check if you can request ads while gathering consent:</p> <ul> <li>After the UMP SDK gathers consent in the current session.</li> <li>Immediately after you have called <code>UGoogleUMP::RequestConsentInfoUpdate()</code>. The UMP SDK might have obtained consent in the previous app session.</li> </ul> <p>Warning</p> <p><code>UGoogleUMP::CanRequestAds()</code> always returns false until you have called <code>UGoogleUMP::RequestConsentInfoUpdate()</code></p> <p>If an error occurs during the consent gathering process, check if you can request ads. The UMP SDK uses the consent status from the previous app session.</p>"},{"location":"#prevent-redundant-ad-request-work","title":"Prevent redundant ad request work","text":"<p>As you check <code>UGoogleUMP::CanRequestAds()</code> after gathering consent and after calling <code>UGoogleUMP::RequestConsentInfoUpdate()</code>, ensure your logic prevents redundant ad requests that might result in both checks returning true. For example, with a boolean variable.</p> <p>This is an example of what the complete UMP set-up might look like:</p> C++Blueprints <pre><code>#include \"Templates/SharedPointer.h\"\n#include \"Logging/LogMacros.h\"\n#include \"GoogleUMP.h\"\n// ...\nTSharedRef&lt;bool&gt; bInitFlag = MakeShared&lt;bool&gt;(false);\n\nUGoogleUMP::OnRequestConsentInfoUpdateSuccess.AddLambda([bInitFlag]()\n    {\n        UGoogleUMP::OnConsentFormDismissed.AddLambda([bInitFlag]()\n            {\n                if (UGoogleUMP::CanRequestAds() &amp;&amp; !*bInitFlag)\n                {\n                    *bInitFlag = true;\n                    // Initialize your ad network here\n                }\n            }\n        );\n        UGoogleUMP::OnConsentFormDismissedWithError.AddLambda([]\n            (const int32 ErrorCode, const FString&amp; ErrorMessage)\n            {\n                UE_LOG(LogExec, Error, TEXT(\"%d | %s\"), ErrorCode, *ErrorMessage);\n            }\n        );\n        UGoogleUMP::LoadAndShowConsentFormIfRequired();\n    }\n);\nUGoogleUMP::OnRequestConsentInfoUpdateFailure.AddLambda([]\n    (const int32 ErrorCode, const FString&amp; ErrorMessage)\n    {\n        UE_LOG(LogExec, Error, TEXT(\"%d | %s\"), ErrorCode, *ErrorMessage);\n    }\n);\nUGoogleUMP::RequestConsentInfoUpdate();\n\nif (UGoogleUMP::CanRequestAds() &amp;&amp; !*bInitFlag)\n{\n    *bInitFlag = true;\n    // Initialize your ad network here\n}\n</code></pre> <p></p>"},{"location":"#testing","title":"Testing","text":"<p>If you want to test the integration in your project as you're developing, follow these steps to register your test device. Be sure to remove these test device IDs before you release your game.</p> <ol> <li>Run your game on a device of your choice (iOS or Android), and make sure <code>UGoogleUMP::RequestConsentInfoUpdate()</code> is called.</li> <li> <p>Check the log output of your device for a message similar to the following examples, which shows your device ID:</p> <ul> <li> <p>iOS: </p> <pre><code>&lt;UMP SDK&gt;To enable debug mode for this device, set: UMPDebugSettings.testDeviceIdentifiers = @[2077ef9a63d2b398840261c8221a0c9b]\n</code></pre> </li> <li> <p>Android: </p> <pre><code>Use new ConsentDebugSettings.Builder().addTestDeviceHashedId(\"33BE2250B43518CCDA7DE426D04EE231\") to set this as a debug device.\n</code></pre> </li> </ul> </li> <li> <p>Copy your test device ID to your clipboard.</p> </li> <li> <p>Go to Project Settings &gt; Plugins &gt; Google UMP and paste the copied device ID into the appropriate Test Device IDs array:</p> <p></p> </li> </ol>"},{"location":"#force-a-geography","title":"Force a geography","text":"<p>The UMP provides a way to test your game's behavior as though the devices were located in various regions, such as the EEA or UK. Note that debug settings only work on test devices.</p> <p></p>"},{"location":"#reset-consent-state","title":"Reset consent state","text":"<p>When testing your game with the UMP SDK, you might find it helpful to reset the state of the SDK so that you can simulate a user's first install experience. The plugin provides the <code>UGoogleUMP::ResetConsentState()</code> function to do this.</p> C++Blueprints <pre><code>#include \"GoogleUMP.h\"\n// ...\nUGoogleUMP::ResetConsentState();\n</code></pre> <p></p> <p>Warning</p> <p>This function is intended to be used for testing purposes only. You shouldn't call <code>UGoogleUMP::ResetConsentState()</code> in shipping builds.</p>"},{"location":"idfa-support/","title":"IDFA support","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"idfa-support/#identifier-for-advertisers-idfa-support","title":"Identifier for Advertisers (IDFA) support","text":"<p>The User Messaging Platform (UMP) SDK lets you present an IDFA message to your users before requesting their consent for App Tracking Transparency (ATT). The IDFA message shows your users how your app uses the identifier.</p> <p>This guide covers using the UMP SDK to present an IDFA message.</p> <p>Note</p> <p>If you enable both GDPR and IDFA messages, refer to Which message your users will see for the possible outcomes.</p>"},{"location":"idfa-support/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide.</li> <li>Create an IDFA message in the AdMob UI.</li> </ul>"},{"location":"idfa-support/#user-tracking-usage-description","title":"User tracking usage description","text":"<p>Open Project Settings &gt; Plugins &gt; Google UMP in Unreal Engine, and set a custom message that describes the usage:</p> <p></p> <p>The usage description appears as part of the IDFA ATT alert when you present the consent form:</p> <p></p>"},{"location":"idfa-support/#testing","title":"Testing","text":"<p>While testing, remember that the ATT alert only appears a single time since <code>[requestTrackingAuthorization](https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547037-requesttrackingauthorization)</code> is a one-time request. The UMP SDK only has a form available to load if the authorization status is <code>[ATTrackingManagerAuthorizationStatusNotDetermined](https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanagerauthorizationstatus/attrackingmanagerauthorizationstatusnotdetermined?language=objc)</code>.</p> <p>To make the alert appear a second time, you must uninstall and reinstall your app on your test device.</p>"},{"location":"idfa-support/#request-ads-with-or-without-idfa","title":"Request ads with or without IDFA","text":"<p>If a user denies ATT, continue to request ads using your ad format's APIs. The Google Mobile Ads SDK doesn't send IDFA in the ad request.</p>"},{"location":"iab-support/gdpr-iab-support/","title":"GDPR IAB support","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"iab-support/gdpr-iab-support/#gdpr-iab-support","title":"GDPR IAB support","text":"<p>Under the Google EU User Consent Policy, you must make certain disclosures to your users in the European Economic Area (EEA) along with the UK and obtain their consent to use cookies or other local storage, where legally required, and to use personal data (such as AdID) to serve ads. This policy reflects the requirements of the EU ePrivacy Directive and the General Data Protection Regulation (GDPR).</p> <p>This guide outlines the steps required to support the GDPR IAB TCF v2 message as part of the UMP SDK. It is intended to be paired with Get started which gives an overview of how to get your app running with the UMP SDK and the basics of setting up your message. The following guidance is specific to the GDPR IAB TCF v2 message. For more information, see How IAB requirements affect EU consent messages. </p>"},{"location":"iab-support/gdpr-iab-support/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide.</li> <li>Create a European regulation message for apps. </li> </ul>"},{"location":"iab-support/gdpr-iab-support/#consent-revocation","title":"Consent revocation","text":"<p>GDPR requires consent revocation to allow users to withdraw their consent choices at any time. See Privacy options to implement a way for users to withdraw their consent choices.</p>"},{"location":"iab-support/gdpr-iab-support/#tag-for-under-age-of-consent","title":"Tag for under age of consent","text":"<p>To indicate whether a user is under the age of consent, set <code>TagForUnderAgeOfConsent</code> (TFUA). When you set TFUA to <code>true</code>, the UMP SDK doesn't request consent from the user. If your app has a mixed audience, set this parameter for child users to ensure consent is not requested.</p> <p>Note</p> <p>The UMP SDK does not forward the TFUA tag set on consent requests to Google Mobile Ads SDK or any other ad SDKs. You must explicitly set the <code>TagForUnderAgeOfConsent</code> on ad requests. If you don't set the <code>TagForUnderAgeOfConsent</code> on ad requests, the UMP SDK does not collect any information that allows Google to determine whether or not users under the age of consent use your app. For more information about data processing restrictions for these users, see Tag an ad request for EEA, the UK, and Switzerland users for restricted data processing.</p> <p></p> <p>You can also override the default value of <code>TagForUnderAgeOfConsent</code> set in Project Settings at runtime using <code>UGoogleUMP::SetTagForUnderAgeOfConsent()</code> function. Just make sure to call it before requesting consent info update.</p>"},{"location":"iab-support/gdpr-iab-support/#mediation","title":"Mediation","text":"<p>Follow the steps in Add ad partners to published GDPR messages to add your mediation partners to the ad partners list. Failure to do so can lead to partners failing to serve ads on your app.</p>"},{"location":"iab-support/gdpr-iab-support/#how-to-read-consent-choices","title":"How to read consent choices","text":"<p>After GDPR consent has been collected, you can read consent choices from local storage following the TCF v2 spec. The <code>IABTCF_PurposeConsents</code> key indicates consent for each of the TCF purposes.</p> <p>The following snippet shows how to check consent for Purpose 1:</p> C++Blueprints <pre><code>#include \"GoogleUMP.h\"\n// ...\nbool bHasConsentForPurposeOne = GoogleUMP::ReadStoredInfo().FindRef(TEXT(\"IABTCF_PurposeConsents\"))[0] == TEXT('1');\n</code></pre> <p></p>"},{"location":"iab-support/gdpr-iab-support/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"iab-support/us-iab-support/","title":"US IAB support","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"iab-support/us-iab-support/#us-iab-support","title":"US IAB support","text":"<p>This guide outlines the steps required to support the US states regulations message as part of the UMP SDK. Pair these instructions with Get started, which details how to get your app running with the UMP SDK and set up your message. The following guidance is specific to the US states regulations message.</p>"},{"location":"iab-support/us-iab-support/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide. Be sure to implement a privacy options entrypoint and render it if required. By completing this guide, you have an entrypoint to serve your US states regulations message to your users.</li> <li>Create a US states regulations message for apps.</li> <li>If you're using the US states regulations message alongside other messages, consult Available user message types to understand when different messages are displayed to your users.</li> </ul>"},{"location":"iab-support/us-iab-support/#set-the-tag-for-under-age-of-consent","title":"Set the tag for under age of consent","text":"<p>To indicate whether a user is under the age of consent, set <code>TagForUnderAgeOfConsent</code> (TFUA). When you set TFUA to <code>true</code>, the UMP SDK doesn't request consent from the user. If your app has a mixed audience, set this parameter for child users to ensure consent is not requested. It is your responsibility for setting this parameter where necessary to comply with COPPA and other relevant regulations.</p> <p>Note</p> <p>The UMP SDK does not forward the TFUA tag set on consent requests to Google Mobile Ads SDK or any other ad SDKs. You must explicitly set the <code>TagForUnderAgeOfConsent</code> or <code>TagForChildDirectectedTreatment</code> on ad requests. If you don't set the <code>TagForUnderAgeOfConsent</code> or <code>tagForChildDirectectedTreatment</code> on ad requests, the UMP SDK does not collect any information that allows Google to determine whether or not users under the age of consent use your app. For more information about data processing restrictions for these users, see Tag an ad request from an app for child-directed treatment.</p> <p></p> <p>You can also override the default value of <code>TagForUnderAgeOfConsent</code> set in Project Settings at runtime using <code>UGoogleUMP::SetTagForUnderAgeOfConsent()</code> function. Just make sure to call it before requesting consent info update.</p>"},{"location":"iab-support/us-iab-support/#read-consent-choices","title":"Read consent choices","text":"<p>After the user has made a US states regulations decision, you can read their choice from local storage following the Global Privacy Platform (GPP) spec. For more details see, In-App Details. Note that the UMP SDK only populates the <code>IABGPP_GppSID</code> and <code>IABGPP_HDR_GppString</code> keys.</p>"},{"location":"iab-support/us-iab-support/#test-your-us-states-regulations-messaging","title":"Test your US states regulations messaging","text":"<p>To test your US states regulations messaging, set the Debug Geography Area field in Project Settings to <code>DEBUG_GEOGRAPHY_REGULATED_US_STATE</code> to force the UMP SDK to treat your test device as if the device were located in a regulated US state. You can also use <code>DEBUG_GEOGRAPHY_OTHER</code> to force suppression of US states regulations messages. For more details on Debug Geography Area, see Force a geography.</p>"}]}