{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get started","text":"<p>This get started guide will walk you through integrating the Google Mobile Ads into your Unreal project, and then displaying your first ad with it! Here we will focus on an interstitial ad, but detailed guides on implementing different ad formats will be linked at the bottom of the page.</p>"},{"location":"#set-up-your-app-in-your-admob-account","title":"Set up your app in your AdMob account","text":"<p>Register your app as an AdMob app by completing the following steps:</p> <ol> <li>Sign in to or sign up for an AdMob account.</li> <li>Register your app with AdMob. This step creates an AdMob app with a unique AdMob App ID that is needed later in this guide.</li> </ol>"},{"location":"#configure-your-project","title":"Configure your project","text":""},{"location":"#enable-the-plugin","title":"Enable the plugin","text":"<p>The plugin is typically enabled by default upon installation. However, if it's not, follow these steps:</p> <ol> <li>Navigate to Edit &gt; Plugins in Unreal Engine.</li> <li>Search for <code>Google AdMob</code> in the plugin list.</li> <li>If the plugin is disabled, enable it by checking the corresponding box.</li> </ol>"},{"location":"#disable-build-in-admob-support-for-ads","title":"Disable build-in AdMob support for ads","text":"<p>To avoid any compatibility issues and library conflicts, disable build-in AdMob support. Inside Project Settings, go to Platforms &gt; Android &gt; Google Play Services and set <code>Include AdMob support for ads</code> to <code>false</code>.</p> <p></p>"},{"location":"#enter-your-app-ids-in-project-settings","title":"Enter your App IDs in Project Settings","text":"<ol> <li>Copy your AdMob app ID, as identified in the AdMob web interface. You'll need to separate AdMob apps for Android and iOS, i.e. two different App IDs for these platforms.</li> <li>Open Project Settings &gt; Plugins &gt; Google AdMob in Unreal Engine, and paste the copied values into the corresponding AdMob App ID fields.</li> </ol>"},{"location":"#enable-automatic-sdk-initialization","title":"Enable automatic SDK initialization","text":"<p>Typically, you would want manual control over Privacy &amp; Messaging in your game (it's even required in some cases!), but for this tutorial we are going to ask plugin to attempt initializing Google AdMob SDK automatically at game's start-up. Once again, go to Project Settings &gt; Plugins &gt; Google AdMob, and set the <code>Enable automatic SDK initialization on startup</code> field to <code>true</code> (it's disabled be default).</p> <p></p>"},{"location":"#add-dependency-to-your-modules-c-projects","title":"Add dependency to your modules <code>(C++ projects)</code>","text":"<p>To use the plugin in your C++ code, you must include <code>GoogleAdMob</code> as either a public or private dependency in your module's build configuration, for example: <pre><code>PrivateDependencyModuleNames.Add(\"GoogleAdMob\");\n</code></pre></p>"},{"location":"#implement-your-first-ad","title":"Implement your first ad","text":"<p>Now you're ready to add your first interstitial ad to your game! Follow the steps below to make it a reality!</p> <ol> <li> <p>Create an interstitial ad object and store it in a variable. In Blueprints, add a <code>Construct Object from Class</code> node and choose UGoogleAdMobInterstitialAd as a class to create the object from. Think of it as a communication interface between your Unreal project and Google AdMob.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n</code></pre> <p></p> <p>Tip</p> <p>It's generally recommended to keep your ads in a class/blueprint derived from PlatformGameInstance, as they often need to persist between levels.</p> </li> <li> <p>Check if ads can be requested. Before loading any ads, you should first check if the consent has been gathered from a user using the <code>UGoogleAdMob::CanRequestAds()</code> function.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    // ...\n}\n</code></pre> <p></p> </li> <li> <p>Bind an event to the ad being loaded. Prior to loading the ad, you should also bind some event to the <code>OnLoaded</code> multicast delegate, so that you know when your ad is loaded and is ready to be shown.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddLambda([](const FGoogleAdMobResponseInfo&amp; ResponseInfo){});\n}\n</code></pre> <p></p> </li> <li> <p>Load the ad. Now you can finally load your ad by calling <code>UGoogleAdMobInterstitialAd::Load(const FString&amp; AdUnitID)</code> function! Just remember that the function must be called on the created ad object (i.e. the function won't appear in Blueprints unless the context menu is shown after dragging the pin from this object), and that there are two different Ad Unit IDs for Android and iOS.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddLambda([](const FGoogleAdMobResponseInfo&amp; ResponseInfo){});\n#if PLATFORM_ANDROID\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/1033173712\"));\n#elif PLATFORM_IOS\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/4411468910\"));\n#endif\n}\n</code></pre> <p></p> </li> <li> <p>Show your interstitial ad. The last step here is obviously showing your ad when it's loaded. Just call <code>UGoogleAdMobInterstitialAd::Show()</code> when the <code>OnLoaded</code> delegate is broadcast, and you're done!</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddLambda(\n        [InterstitialAd](const FGoogleAdMobResponseInfo&amp; ResponseInfo)\n        {\n            InterstitialAd-&gt;Show();\n        }\n    );\n#if PLATFORM_ANDROID\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/1033173712\"));\n#elif PLATFORM_IOS\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/4411468910\"));\n#endif\n}\n</code></pre> <p></p> </li> </ol> <p>Congratilations! You've successfully loaded your first interstitial ad! It might seem a bit overwhelming at first, but once you get it, this plugin will become a powerful tool in your developer hands, and will help you implement a robust mobile ad system in your game. Go on and check out what other features it has to offer!</p>"}]}