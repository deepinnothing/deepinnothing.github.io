{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get started","text":"<p>This get started guide will walk you through integrating the Google Mobile Ads into your Unreal project, and then displaying your first ad with it! Here we will focus on an interstitial ad, but detailed guides on implementing different ad formats will be linked at the bottom of the page.</p>"},{"location":"#set-up-your-app-in-your-admob-account","title":"Set up your app in your AdMob account","text":"<p>Register your app as an AdMob app by completing the following steps:</p> <ol> <li>Sign in to or sign up for an AdMob account.</li> <li>Register your app with AdMob. This step creates an AdMob app with a unique AdMob App ID that is needed later in this guide.</li> </ol>"},{"location":"#configure-your-project","title":"Configure your project","text":""},{"location":"#enable-the-plugin","title":"Enable the plugin","text":"<p>The plugin is typically enabled by default upon installation. However, if it's not, follow these steps:</p> <ol> <li>Navigate to Edit &gt; Plugins in Unreal Engine.</li> <li>Search for <code>Google AdMob</code> in the plugin list.</li> <li>If the plugin is disabled, enable it by checking the corresponding box.</li> </ol>"},{"location":"#disable-build-in-admob-support-for-ads","title":"Disable build-in AdMob support for ads","text":"<p>To avoid any compatibility issues and library conflicts, disable build-in AdMob support. Inside Project Settings, go to Platforms &gt; Android &gt; Google Play Services and set <code>Include AdMob support for ads</code> to <code>false</code>.</p> <p></p>"},{"location":"#enter-your-app-ids-in-project-settings","title":"Enter your App IDs in Project Settings","text":"<ol> <li>Copy your AdMob app ID, as identified in the AdMob web interface. You'll need to separate AdMob apps for Android and iOS, i.e. two different App IDs for these platforms.</li> <li>Open Project Settings &gt; Plugins &gt; Google AdMob in Unreal Engine, and paste the copied values into the corresponding AdMob App ID fields.</li> </ol>"},{"location":"#enable-automatic-sdk-initialization","title":"Enable automatic SDK initialization","text":"<p>Typically, you would want manual control over Privacy &amp; Messaging in your game (it's even required in some cases!), but for this tutorial we are going to ask plugin to attempt initializing Google AdMob SDK automatically on game's start-up. Once again, go to Project Settings &gt; Plugins &gt; Google AdMob, and set the <code>Enable automatic SDK initialization on startup</code> field to <code>true</code> (it's disabled be default).</p> <p></p>"},{"location":"#add-dependency-to-your-modules-c-projects","title":"Add dependency to your modules <code>(C++ projects)</code>","text":"<p>To use the plugin in your C++ code, you must include <code>GoogleAdMob</code> as either a public or private dependency in your module's build configuration, for example: <pre><code>PrivateDependencyModuleNames.Add(\"GoogleAdMob\");\n</code></pre></p>"},{"location":"#implement-your-first-ad","title":"Implement your first ad","text":"<p>Now you're ready to add your first interstitial ad to your game! Follow the steps below to make it a reality!</p> <ol> <li> <p>Create an interstitial ad object and store it in a variable. In Blueprints, add a <code>Construct Object from Class</code> node and choose UGoogleAdMobInterstitialAd as a class to create the object from. Think of it as a communication interface between your Unreal project and Google AdMob.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n</code></pre> <p></p> <p>Tip</p> <p>It's generally recommended to keep your ads in a class/blueprint derived from PlatformGameInstance, as they often need to persist between levels.</p> </li> <li> <p>Check if ads can be requested. Before loading any ads, you should first check if the consent has been gathered from a user using the <code>UGoogleAdMob::CanRequestAds()</code> function.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    // ...\n}\n</code></pre> <p></p> </li> <li> <p>Bind an event to the ad being loaded. Prior to loading the ad, you should also bind some event to the <code>OnLoaded</code> multicast delegate, so that you know when your ad is loaded and is ready to be shown.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\nstruct FGoogleAdMobResponseInfo;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\nUFUNCTION()\nvoid InterstitialAdLoaded(const FGoogleAdMobResponseInfo&amp; ResponseInfo);\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nvoid UYourClass::InterstitialAdLoaded(const FGoogleAdMobResponseInfo&amp; ResponseInfo) \n{      \n}\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddDynamic(this, &amp;UYourClass::InterstitialAdLoaded);\n}\n</code></pre> <p></p> </li> <li> <p>Load the ad. Now you can finally load your ad by calling <code>UGoogleAdMobInterstitialAd::Load(const FString&amp; AdUnitID)</code> function! Just remember that the function must be called on the created ad object (i.e. the function won't appear in Blueprints unless the context menu is shown after dragging the pin from this object), and that there are two different Ad Unit IDs for Android and iOS.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\nstruct FGoogleAdMobResponseInfo;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\nUFUNCTION()\nvoid InterstitialAdLoaded(const FGoogleAdMobResponseInfo&amp; ResponseInfo);\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nvoid UYourClass::InterstitialAdLoaded(const FGoogleAdMobResponseInfo&amp; ResponseInfo) \n{      \n}\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddDynamic(this, &amp;UYourClass::InterstitialAdLoaded);\n#if PLATFORM_ANDROID\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/1033173712\"));\n#elif PLATFORM_IOS\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/4411468910\"));\n#endif\n}\n</code></pre> <p></p> </li> <li> <p>Show your interstitial ad. The last step here is obviously showing your ad when it's loaded. Just call <code>UGoogleAdMobInterstitialAd::Show()</code> when the <code>OnLoaded</code> delegate is broadcast, and you're done!</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\nstruct FGoogleAdMobResponseInfo;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\nUFUNCTION()\nvoid InterstitialAdLoaded(const FGoogleAdMobResponseInfo&amp; ResponseInfo);\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nvoid UYourClass::InterstitialAdLoaded(const FGoogleAdMobResponseInfo&amp; ResponseInfo) \n{     \n    InterstitialAd-&gt;Show(); \n}\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddDynamic(this, &amp;UYourClass::InterstitialAdLoaded);\n#if PLATFORM_ANDROID\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/1033173712\"));\n#elif PLATFORM_IOS\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/4411468910\"));\n#endif\n}\n</code></pre> <p></p> </li> </ol> <p>Congratilations! You've successfully loaded your first interstitial ad! It might seem a bit overwhelming at first, but once you get it, this plugin will become a powerful tool in your developer hands, and will help you implement a robust mobile ad system in your game. Go on and check out what other features it has to offer!</p>"},{"location":"#select-an-ad-format","title":"Select an ad format","text":"<p>Google Mobile Ads SDK is now imported and you're ready to implement other ads. AdMob offers a number of different ad formats, so you can choose the one that best fits your app's user experience.</p>"},{"location":"#banner","title":"Banner","text":"<p>Banner ad units display rectangular ads that occupy a portion of an app's layout. They can refresh automatically after a set period of time. This means users view a new ad at regular intervals, even if they stay on the same screen in your app. They're also the simplest ad format to implement.</p> <p>Implement banner ads</p>"},{"location":"#interstitial","title":"Interstitial","text":"<p>Interstitial ad units show full-page ads in your app. Place them at natural breaks and transitions in your app's interface, such as after level completion in a gaming app.</p> <p>Implement interstitial ads</p>"},{"location":"#rewarded","title":"Rewarded","text":"<p>Rewarded ad units enable users to play games, take surveys, or watch videos to earn in-app rewards, such as coins, extra lives, or points. You can set different rewards for different ad units, and specify the reward values and items the user received.</p> <p>Implement rewarded ads</p>"},{"location":"#rewarded-interstitial","title":"Rewarded interstitial","text":"<p>Rewarded interstitial is a new type of incentivized ad format that lets you offer rewards, such as coins or extra lives, for ads that appear automatically during natural app transitions.</p> <p>Unlike rewarded ads, users aren't required to opt in to view a rewarded interstitial.</p> <p>Instead of the opt-in prompt in rewarded ads, rewarded interstitials require an intro screen that announces the reward and gives users a chance to opt out if they want to do so.</p> <p>Implement rewarded interstitial ads</p>"},{"location":"#app-open","title":"App open","text":"<p>App open is an ad format that appears when users open or switch back to your app. The ad overlays the loading screen.</p> <p>Implement app open ads</p>"},{"location":"#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++</li> </ul>"},{"location":"enable-test-ads/","title":"Enable test ads","text":"<p>This guide explains how to enable test ads in your ads integration. It's important to enable test ads during development so that you can click them without charging Google advertisers. If you click too many ads without being in test mode, you risk your account being flagged for invalid activity.</p> <p>There are two ways to get test ads:</p> <ol> <li>Use one of Google's demo ad units.</li> <li>Use your own ad unit and enable test devices.</li> </ol>"},{"location":"enable-test-ads/#demo-ad-units","title":"Demo ad units","text":"<p>The quickest way to enable testing is to use Google-provided demo ad units. These ad units are not associated with your AdMob account, so there's no risk of your account generating invalid traffic when using these ad units.</p> <p>Warning</p> <p>Make sure you replace these IDs with your own ad unit ID before publishing your game.</p> <p>Here are demo ad units that point to specific test creatives for each format:</p> Ad format Android demo ad unit ID iOS demo ad unit ID App Open ca-app-pub-3940256099942544/9257395921 ca-app-pub-3940256099942544/5575463023 Adaptive Banner ca-app-pub-3940256099942544/9214589741 ca-app-pub-3940256099942544/2435281174 Fixed Size Banner ca-app-pub-3940256099942544/6300978111 ca-app-pub-3940256099942544/2934735716 Interstitial ca-app-pub-3940256099942544/1033173712 ca-app-pub-3940256099942544/4411468910 Rewarded Ads ca-app-pub-3940256099942544/5224354917 ca-app-pub-3940256099942544/1712485313 Rewarded Interstitial ca-app-pub-3940256099942544/5354046379 ca-app-pub-3940256099942544/6978759866 Native ca-app-pub-3940256099942544/2247696110 ca-app-pub-3940256099942544/3986624511 Native Video ca-app-pub-3940256099942544/1044960115 ca-app-pub-3940256099942544/2521693316"},{"location":"enable-test-ads/#enable-test-devices","title":"Enable test devices","text":"<p>If you want to do more rigorous testing with production-looking ads, you can configure your device as a test device and use your own ad unit IDs that you've created in the AdMob UI. Test devices can either be added in the AdMob UI or programmatically using the plugin settings.</p> <p>Follow the steps below to add your device as a test device.</p> <p>Note</p> <p>Android emulators and iOS simulators are automatically configured as test devices.</p>"},{"location":"enable-test-ads/#add-your-test-device-in-the-admob-ui","title":"Add your test device in the AdMob UI","text":"<p>For a non-programmatic way to add a test device and test new or existing app builds, use the AdMob UI. Learn how.</p> <p>Note</p> <p>New test devices typically start serving test ads in your app within 15 minutes, but it can also take up to 24 hours.</p>"},{"location":"enable-test-ads/#add-your-test-device-programmatically","title":"Add your test device programmatically","text":"<p>To register your test device, complete the following steps:</p> <ol> <li>Run your game on a device of your choice (iOS or Android), and make an ad request.</li> <li> <p>Check the log output of your device for a message similar to the following examples, which shows your device ID:</p> <ul> <li> <p>iOS: </p> <pre><code>&lt;Google&gt; To get test ads on this device, set:\nGADMobileAds.sharedInstance.requestConfiguration.testDeviceIdentifiers =\n@[ @\"2077ef9a63d2b398840261c8221a0c9b\" ];\n</code></pre> </li> <li> <p>Android: </p> <pre><code>I/Ads: Use RequestConfiguration.Builder.setTestDeviceIds(Arrays.asList(\"33BE2250B43518CCDA7DE426D04EE231\")) \nto get test ads on this device.\n</code></pre> </li> </ul> </li> <li> <p>Copy your test device ID to your clipboard.</p> </li> <li> <p>Go to Project Settings &gt; Plugins &gt; Google AdMob and paste the copied device ID into the appropriate Test Device IDs array:</p> <p></p> <p>Warning</p> <p>Be sure to disable \"Enable Test Devices\" fields before you release your game.</p> </li> <li> <p>Rebuild your project and run it again. If the ad is a Google ad, you'll see a Test mode label centered at the top of the ad (banner, interstitial, or rewarded ad):</p> <p></p> </li> </ol>"},{"location":"enable-test-ads/#testing-with-mediation","title":"Testing with mediation","text":"<p>Google's demo ad units only show Google ads. To test your mediation configuration, you must use the enable test devices approach.</p> <p>Mediated ads do not render a Test mode label. You are responsible for ensuring that test mode is enabled for each of your mediation networks so that these networks don't flag your account for invalid activity. See each network's respective mediation guide for more information.</p> <p>If you aren't sure whether a mediation ad network adapter provides a test mode, it is safest to avoid clicking on ads from that network during development. You can use the <code>FGoogleAdMobResponseInfo::MediationAdapterClassName</code> property on any of the ad formats to figure out which ad network served the current ad.</p>"},{"location":"mediation/","title":"Mediation","text":"<p>AdMob Mediation is a feature lets you serve ads to your apps from multiple sources, including the AdMob Network and third-party ad sources, in one place. AdMob Mediation helps maximize your fill rate and increase your monetization by sending ad requests to multiple networks to verify you find the best available network to serve ads. Case study.</p>"},{"location":"mediation/#prerequisites","title":"Prerequisites","text":"<p>Warning</p> <p>Verify that you have the necessary account permissions to complete the mediation configuration. These permissions include access to inventory management, app access, and privacy and messaging features. See Manage user access to your account for details.</p> <p>Before you can integrate mediation for an ad format, you need to integrate that ad format into your app:</p> <ul> <li>App Open Ads</li> <li>Banner Ads</li> <li>Interstitial Ads</li> <li>Rewarded Ads</li> <li>Rewarded Interstitial Ads</li> </ul> <p>New to mediation? Read Overview of AdMob Mediation.</p>"},{"location":"mediation/#initialize-google-mobile-ads-sdk","title":"Initialize Google Mobile Ads SDK","text":"<p>You can either rely on Automatic SDK initialization or implement it manually. During that initialization call, mediation adapters also get initialized. It is important to wait for initialization to complete before you load ads in order to verify full participation from every ad network on the first ad request.</p>"},{"location":"mediation/#check-which-ad-network-adapter-class-loaded-the-ad","title":"Check which ad network adapter class loaded the ad","text":"<p>Here is an example that logs the ad network class name for an ad:</p> C++Blueprints <pre><code>#include \"GoogleAdMobResponseInfo.h\"\n// ...\nvoid UYourClass::OnLoaded(const UGoogleAdMobResponseInfo&amp; ResponseInfo)\n{  \n    UE_LOG(LogTemp, Display, TEXT(\"Adapter class name: %s\"), *ResponseInfo.MediationAdapterClassName);\n}\n</code></pre> <p></p> <p>Refer to the Response info documentation on MediationAdapterClassName for details about this property.</p>"},{"location":"mediation/#us-states-privacy-laws-and-gdpr","title":"US states privacy laws and GDPR","text":"<p>If you need to comply with the U.S. states privacy laws or General Data Protection Regulation (GDPR), follow the steps in US state regulations settings or GDPR settings to add your mediation partners in AdMob Privacy &amp; messaging's US states or GDPR ad partners list. Failure to do so can lead to partners failing to serve ads on your app.</p> <p>Learn more about enabling restricted data processing (RDP) and obtaining GDPR consent with the Google User Messaging Platform (UMP) SDK.</p>"},{"location":"mediation/#choose-networks","title":"Choose networks","text":"<p>AdMob Mediation supports several ad sources, with a mix of bidding and waterfall mediation integrations. To add one of the networks, you need to choose an appropriate guide from Google from the table below and complete first 2 steps from it, and then enable this mediation network in Project Settings. Select an ad source for integration instructions specific to that ad source:</p> Ad Source App Open Banner Interstitial Rewarded Rewarded Interstitial Bidding Ad source optimization support Plugin Version AppLovin (Android | iOS) Country-specific 1.0.0+ InMobi (Android | iOS) Country-specific 1.0.0+ ironSource (Android | iOS) Country-specific 1.0.0+ Liftoff\u00a0Monetize (Android | iOS) Country-specific 1.0.0+ LINE Ads Network (Android | iOS) Country-specific 1.0.0+ Meta Audience Network (Android | iOS) Bidding only 1.0.0+ Mintegral (Android | iOS) Country-specific 1.0.0+ Moloco (Android | iOS) Country-specific 1.1.0+ Pangle (Android | iOS) Country-specific 1.0.0+ Unity Ads (Android | iOS) Country-specific 1.0.0+ <p>Note</p> <p>The project won't package for Android if both <code>LINE Ads Network</code> and <code>Generate universal APK from bundle</code> are set to <code>True</code>.</p>"},{"location":"mediation/#ad-source-optimization","title":"Ad source optimization","text":"<p>When you configure multiple ad networks for mediation, you have to specify what order to request these networks by setting their respective CPM. This can be difficult to manage, since ad network performance changes over time.</p> <p>Ad source optimization is a feature that lets you to generate the highest CPM from the ad networks in your mediation chain by automating the process of ordering the mediation chain to maximize revenue.</p> <p>The mediation networks table earlier uses the following values for ad source optimization support:</p> Ad source optimization support What it means Bidding only The ad network only participates in bidding. Ad source optimization is not applicable. Country-specific eCPM values are automatically updated on your behalf on a per-country basis. This is the optimal type of optimization. None You must manually configure an eCPM value for that ad network. <p>Click a specific ad network's guide for details on how to configure ad source optimization for that network.</p> <p>Note</p> <p>There is also a number of \"No third-party SDKs required\" ad networks that only require signing a partnership through the AdMob UI.</p>"},{"location":"mediation/#troubleshoot-admob-bidding","title":"Troubleshoot AdMob bidding","text":"<p>When integrating a bidding partner that requires their SDK, the following symptoms indicate an improper integration:</p> <ul> <li>The Ads Activity report shows significantly fewer ad requests to that partner than you expect.</li> <li>The <code>a3p</code> parameter in any request after the first ad request is missing.</li> </ul> <p>Note</p> <p>The first ad request may contain the <code>a3p</code> parameter even if you did not configure bidding.</p> <p>Follow this checklist to make sure your setup is correct:</p> <ul> <li> <p>In the AdMob UI:</p> <ul> <li>Confirm that you have followed the specific partner's integration guide to configure third-party bidding demand.</li> <li>Confirm that you have an ad unit mapping for each creative format.</li> </ul> </li> <li> <p>In your project:</p> <ul> <li>Ensure that the app ID in Project Settings is the same app ID that your ad unit mapping targets.</li> <li>Make sure your ad unit IDs match those in the AdMob UI as they must match exactly.</li> </ul> </li> </ul>"},{"location":"user-messaging-platform/","title":"User Messaging Platform (UMP)","text":"<p>Before you can show any ads to your users, you have to ask for their consent. Ideally, it should be done at game's start-up before initializing AdMob SDK. The Google User Messaging Platform (UMP) is a privacy and messaging tool to help you manage privacy choices. For more information, see About Privacy &amp; messaging. </p> <p>Automatic SDK initialization does most of the steps described below automatically, but manual set-up should be a preferred option.</p>"},{"location":"user-messaging-platform/#before-you-start","title":"Before you start","text":"<p>Complete the following steps described in the Get Started guide:</p> <ul> <li>Set up your app in your AdMob account.</li> <li>Configure your project.</li> </ul>"},{"location":"user-messaging-platform/#create-a-message-type","title":"Create a message type","text":"<p>Create user messages with one of the Available user message types under the Privacy &amp; messaging tab of your AdMob account. The UMP SDK attempts to display a privacy message created from the AdMob Application ID set in your project.</p>"},{"location":"user-messaging-platform/#get-the-users-consent-information","title":"Get the user's consent information","text":"<p>You should request an update of the user's consent information at every app launch, using <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>. This request checks the following:</p> <ul> <li>Whether consent is required. For example, consent is required for the first time, or the previous consent decision expired.</li> <li>Whether a privacy options entry point is required. Some privacy messages require apps to allow users to modify their privacy options at any time.</li> </ul> <p>Tip</p> <p>It's highly recommended you do your UMP and initialization logic inside the <code>Init()</code> function of the <code>UPlatformGameInstance</code> derived class, as game instance persists between levels and its <code>Init()</code> function gets executed before any other game logic.</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::OnRequestConsentInfoUpdateSuccess.AddLambda([](){});\nUGoogleAdMob::OnRequestConsentInfoUpdateFailure.AddLambda(\n    []\n    (const int32 ErrorCode, const FString&amp; ErrorMessage)\n    {}\n);\nUGoogleAdMob::RequestConsentInfoUpdate();\n</code></pre> <p></p>"},{"location":"user-messaging-platform/#load-and-present-the-privacy-message-form","title":"Load and present the privacy message form","text":"<p>After you have received the most up-to-date consent status, call <code>UGoogleAdMob::LoadAndShowConsentFormIfRequired()</code> to load any forms required to collect user consent. After loading, the forms present immediately.</p> <p>Info</p> <p>If no privacy message forms require collection of user consent prior to requesting ads, the callback is invoked immediately.</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::OnConsentFormDismissed.AddLambda([](){});\nUGoogleAdMob::OnConsentFormDismissedWithError.AddLambda(\n    []\n    (const int32 ErrorCode, const FString&amp; ErrorMessage)\n    {}\n);\nUGoogleAdMob::LoadAndShowConsentFormIfRequired();\n</code></pre> <p></p>"},{"location":"user-messaging-platform/#privacy-options","title":"Privacy options","text":"<p>Some privacy message forms are presented from a publisher-rendered privacy options entry point, letting users manage their privacy options at any time. To learn more about which message your users see at the privacy options entry point, see Available user message types.</p> <p>After you have called <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>, get privacy options requirement status with <code>UGoogleAdMob::ArePrivacyOptionsRequired()</code> function to determine if a privacy options entry point is required for your app. If an entry point is required, add a visible and interactable UI element to your game that presents the privacy options form (UMG button in options menu, for example). If a privacy entry point is not required, configure your UI element to be not visible and interactable.</p> C++Blueprints <pre><code>#include \"Components/Widget.h\"\n#include \"GoogleAdMob.h\"\n// ...\nvoid UYourWidget::NativeConstruct()\n{\n    Super::NativeConstruct();\n\n    if (UGoogleAdMob::ArePrivacyOptionsRequired())\n    {\n        PrivacyOptionsButton-&gt;SetVisibility(ESlateVisibility::Visible);\n    }\n    else\n    {\n        PrivacyOptionsButton-&gt;SetVisibility(ESlateVisibility::Collapsed);\n    }\n}\n\nvoid UYourWidget::OnPrivacyOptionsButtonClicked()\n{\n    UGoogleAdMob::OnConsentFormDismissed.AddLambda([]\n        {\n            //...\n        }\n    );\n    UGoogleAdMob::OnConsentFormDismissedWithError.AddLambda([]\n        (const int32 ErrorCode, const FString&amp; ErrorMessage)\n        {\n            //...\n        }\n    );\n    UGoogleAdMob::ShowPrivacyOptionsForm();\n}\n</code></pre> <p></p> <p>When the user interacts with your element, present the privacy options form:</p> C++Blueprints <pre><code>#include \"Components/Button.h\"\n#include \"GoogleAdMob.h\"\n// ...\nvoid UYourWidget::NativeConstruct()\n{\n    //...\n    PrivacyOptionsButton-&gt;OnClicked.AddDynamic(this, &amp;UYourWidget::OnPrivacyOptionsButtonClicked);\n}\n\nvoid UYourWidget::OnPrivacyOptionsButtonClicked()\n{\n    UGoogleAdMob::OnConsentFormDismissed.AddLambda([]\n        {\n            //...\n        }\n    );\n    UGoogleAdMob::OnConsentFormDismissedWithError.AddLambda([]\n        (const int32 ErrorCode, const FString&amp; ErrorMessage)\n        {\n            //...\n        }\n    );\n    UGoogleAdMob::ShowPrivacyOptionsForm();\n}\n</code></pre> <p></p> <p>Note</p> <p>Same delegates are used for <code>UGoogleAdMob::LoadAndShowConsentFormIfRequired()</code> and <code>UGoogleAdMob::ShowPrivacyOptionsForm()</code> functions.</p>"},{"location":"user-messaging-platform/#request-ads-with-user-consent","title":"Request ads with user consent","text":"<p>Before requesting ads, use <code>UGoogleAdMob::CanRequestAds()</code> to check if you've obtained consent from the user.</p> <p>Listed are the following places to check if you can request ads while gathering consent:</p> <ul> <li>After the UMP SDK gathers consent in the current session.</li> <li>Immediately after you have called <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>. The UMP SDK might have obtained consent in the previous app session.</li> </ul> <p>Warning</p> <p><code>UGoogleAdMob::CanRequestAds()</code> always returns false until you have called <code>UGoogleAdMob::RequestConsentInfoUpdate()</code></p> <p>If an error occurs during the consent gathering process, check if you can request ads. The UMP SDK uses the consent status from the previous app session.</p>"},{"location":"user-messaging-platform/#prevent-redundant-ad-request-work","title":"Prevent redundant ad request work","text":"<p>As you check <code>UGoogleAdMob::CanRequestAds()</code> after gathering consent and after calling <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>, ensure your logic prevents redundant ad requests that might result in both checks returning true. For example, with a boolean variable.</p> <p>This is an example of what the complete UMP set-up might look like:</p> C++Blueprints <pre><code>#include \"Templates/SharedPointer.h\"\n#include \"Logging/LogMacros.h\"\n#include \"GoogleAdMob.h\"\n// ...\nTSharedRef&lt;bool&gt; bInitFlag = MakeShared&lt;bool&gt;(false);\n\nUGoogleAdMob::OnRequestConsentInfoUpdateSuccess.AddLambda([bInitFlag]()\n    {\n        UGoogleAdMob::OnConsentFormDismissed.AddLambda([bInitFlag]()\n            {\n                if (UGoogleAdMob::CanRequestAds() &amp;&amp; !*bInitFlag)\n                {\n                    *bInitFlag = true;\n                    UGoogleAdMob::Initialize();\n                }\n            }\n        );\n        UGoogleAdMob::OnConsentFormDismissedWithError.AddLambda([]\n            (const int32 ErrorCode, const FString&amp; ErrorMessage)\n            {\n                UE_LOG(LogExec, Error, TEXT(\"%d | %s\"), ErrorCode, *ErrorMessage);\n            }\n        );\n        UGoogleAdMob::LoadAndShowConsentFormIfRequired();\n    }\n);\nUGoogleAdMob::OnRequestConsentInfoUpdateFailure.AddLambda([]\n    (const int32 ErrorCode, const FString&amp; ErrorMessage)\n    {\n        UE_LOG(LogExec, Error, TEXT(\"%d | %s\"), ErrorCode, *ErrorMessage);\n    }\n);\nUGoogleAdMob::RequestConsentInfoUpdate();\n\nif (UGoogleAdMob::CanRequestAds() &amp;&amp; !*bInitFlag)\n{\n    *bInitFlag = true;\n    UGoogleAdMob::Initialize();\n}\n</code></pre> <p></p>"},{"location":"user-messaging-platform/#testing","title":"Testing","text":"<p>If you want to test the integration in your project as you're developing, follow these steps to register your test device. Be sure to remove these test device IDs before you release your game.</p> <ol> <li>Run your game on a device of your choice (iOS or Android), and make sure <code>UGoogleAdMob::RequestConsentInfoUpdate()</code> is called.</li> <li> <p>Check the log output of your device for a message similar to the following examples, which shows your device ID:</p> <ul> <li> <p>iOS: </p> <pre><code>&lt;UMP SDK&gt;To enable debug mode for this device, set: UMPDebugSettings.testDeviceIdentifiers = @[2077ef9a63d2b398840261c8221a0c9b]\n</code></pre> </li> <li> <p>Android: </p> <pre><code>Use new ConsentDebugSettings.Builder().addTestDeviceHashedId(\"33BE2250B43518CCDA7DE426D04EE231\") to set this as a debug device.\n</code></pre> </li> </ul> </li> <li> <p>Copy your test device ID to your clipboard.</p> </li> <li> <p>Go to Project Settings &gt; Plugins &gt; Google AdMob and paste the copied device ID into the appropriate Test Device IDs array:</p> <p></p> </li> </ol>"},{"location":"user-messaging-platform/#force-a-geography","title":"Force a geography","text":"<p>The UMP provides a way to test your game's behavior as though the devices were located in various regions, such as the EEA or UK. Note that debug settings only work on test devices.</p> <p></p>"},{"location":"user-messaging-platform/#reset-consent-state","title":"Reset consent state","text":"<p>When testing your game with the UMP SDK, you might find it helpful to reset the state of the SDK so that you can simulate a user's first install experience. The plugin provides the <code>UGoogleAdMob::ResetConsentState()</code> function to do this.</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::ResetConsentState();\n</code></pre> <p></p> <p>Warning</p> <p>This function is intended to be used for testing purposes only. You shouldn't call <code>UGoogleAdMob::ResetConsentState()</code> in shipping builds.</p>"},{"location":"ad-formats/app-open-ads/","title":"App open ads","text":"<p>App open ads are a special ad format intended for publishers wishing to monetize their app load screens. App open ads can be closed by your users at any time. App open ads can be shown when users bring your app to the foreground.</p> <p>Note</p> <p>Specific format may vary by region.</p> <p>App open ads automatically show a small branding area so users know they're in your app. Here is an example of what an app open ad looks like:</p> <p></p>"},{"location":"ad-formats/app-open-ads/#prerequisites","title":"Prerequisites","text":"<p>Complete the following steps described in the Get Started guide:</p> <ul> <li>Set up your app in your AdMob account.</li> <li>Configure your project.</li> </ul>"},{"location":"ad-formats/app-open-ads/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your AdMob account.</p> <p>The easiest way to load test ads is to use our dedicated test ad unit IDs for app open ads:</p> Android demo ad unit ID iOS demo ad unit ID ca-app-pub-3940256099942544/9257395921 ca-app-pub-3940256099942544/5575463023 <p>It's been specially configured to return test ads for every request, and you're free to use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.</p> <p>For more information about how the Mobile Ads SDK's test ads work, see Test Ads.</p>"},{"location":"ad-formats/app-open-ads/#implementation","title":"Implementation","text":"<p>At a high level, here are the steps required to implement app open ads:</p> <ol> <li>Load an ad some time before you need to display it.</li> <li>Show the add during app foregrounding events.</li> <li>Handle presentation callbacks.</li> </ol>"},{"location":"ad-formats/app-open-ads/#load-an-ad","title":"Load an ad","text":"<p>Your ad should show quickly, so it's best to load your ad before you need to display it. That way, you'll have an ad ready to go as soon as your user enters into your app. For example, you could immediately after Google AdMob SDK initialization, right after a previous ad has been shown, or if the ad fails to show.</p> <p>Note</p> <p>It's assumed you implement App Open Ad inside the class derived from <code>UPlatformGameInstance</code>.</p> C++Blueprints <p>Header:</p> <pre><code>class UGoogleAdMobAppOpenAd;\nstruct UGoogleAdMobAdError;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobAppOpenAd&gt; AppOpenAd;\n\nUFUNCTION()\nvoid LoadAppOpenAd();\n\nUFUNCTION()\nvoid FailedToShow(const UGoogleAdMobAdError&amp; AdError);\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobAppOpenAd.h\"\n// ...\nAppOpenAd = NewObject&lt;UGoogleAdMobAppOpenAd&gt;(this);\nAppOpenAd-&gt;OnDismissed.AddDynamic(this, &amp;UYourClass::LoadAppOpenAd);\nAppOpenAd-&gt;OnFailedToShow.AddDynamic(this, &amp;UYourClass::FailedToShow);\nLoadAppOpenAd();\n// ...\nvoid UYourClass::LoadAppOpenAd()\n{\n    if (UGoogleAdMob::CanRequestAds())\n    {\n#if PLATFORM_ANDROID\n        AppOpenAd-&gt;Load(\"ca-app-pub-3940256099942544/9257395921\");\n#elif PLATFORM_IOS\n        AppOpenAd-&gt;Load(\"ca-app-pub-3940256099942544/5575463023\");\n#endif\n    }\n}\n\nvoid UYourClass::FailedToShow(const UGoogleAdMobAdError&amp; AdError)\n{\n    LoadAppOpenAd();\n}\n</code></pre> <p></p>"},{"location":"ad-formats/app-open-ads/#show-the-ad-during-app-foregrounding-events","title":"Show the ad during app foregrounding events","text":"<p>The next step is to show an app open ad. If no ad is available, attempt to load a new ad.</p> C++Blueprints <p>Header:</p> <pre><code>// ...\nUFUNCTION()\nvoid ShowAppOpenAd();\n</code></pre> <p>Source:</p> <pre><code>// ...\nApplicationHasEnteredForegroundDelegate.AddDynamic(this, &amp;UYourClass::ShowAppOpenAd);\n// ...\nvoid UYourClass::ShowAppOpenAd()\n{\n    if (AppOpenAd-&gt;IsReady())\n    {\n        AppOpenAd-&gt;Show();\n    }\n    else\n    {\n        LoadAppOpenAd();\n    }\n}\n</code></pre> <p></p> <p>Warning</p> <p>Take note that on Android devices dismissing fullscreen ads also triggers foreground entering event. Make sure you don't show app open ad right after interstitial or rewarded ad (for example, with an additional boolean variable).</p> <p>Note</p> <p>App open ads will time out after four hours. Ads rendered more than four hours after request time will no longer be valid and may not earn revenue. Checking the ad with <code>IsReady()</code> before showing it is usually enough, but you can also call <code>GetState()</code> and check whether the state of the ad is <code>EXPIRED</code> or not.</p>"},{"location":"ad-formats/app-open-ads/#handle-presentation-callbacks","title":"Handle presentation callbacks","text":"<p>You can bind your functions and events to various dynamic multicast delegates. The following are available for App Open Ad:</p> C++Blueprints <p>Header:</p> <pre><code>struct UGoogleAdMobResponseInfo;\nstruct UGoogleAdMobAdError;\nstruct UGoogleAdMobAdValue;\n// ...\nUFUNCTION()\nvoid OnLoaded(const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n\nUFUNCTION()\nvoid OnFailedToLoad(const UGoogleAdMobAdError&amp; LoadAdError, const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n\nUFUNCTION()\nvoid OnFailedToShow(const UGoogleAdMobAdError&amp; AdError);\n\nUFUNCTION()\nvoid OnShown();\n\nUFUNCTION()\nvoid OnClicked();\n\nUFUNCTION()\nvoid OnImpression();\n\nUFUNCTION()\nvoid OnDismissed();\n\nUFUNCTION()\nvoid OnPaidEvent(const UGoogleAdMobAdValue&amp; AdValue);\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMobAppOpenAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n#include \"GoogleAdMobAdError.h\"\n#include \"GoogleAdMobAdValue.h\"\n// ...\nAppOpenAd-&gt;OnLoaded.AddDynamic(this, &amp;UYourClass::OnLoaded);\nAppOpenAd-&gt;OnFailedToLoad.AddDynamic(this, &amp;UYourClass::OnFailedToLoad);\nAppOpenAd-&gt;OnFailedToShow.AddDynamic(this, &amp;UYourClass::OnFailedToShow);\nAppOpenAd-&gt;OnShown.AddDynamic(this, &amp;UYourClass::OnShown);\nAppOpenAd-&gt;OnClicked.AddDynamic(this, &amp;UYourClass::OnClicked);\nAppOpenAd-&gt;OnImpression.AddDynamic(this, &amp;UYourClass::OnImpression);\nAppOpenAd-&gt;OnDismissed.AddDynamic(this, &amp;UYourClass::OnDismissed);\nAppOpenAd-&gt;OnPaidEvent.AddDynamic(this, &amp;UYourClass::OnPaidEvent);\n</code></pre> <p></p>"},{"location":"ad-formats/app-open-ads/#cold-starts-and-loading-screens","title":"Cold starts and loading screens","text":"<p>The documentation thus far assumes that you only show app open ads when users foreground your app when it is suspended in memory. \"Cold starts\" occur when your app is launched but was not previously suspended in memory.</p> <p>An example of a cold start is when a user opens your app for the first time. With cold starts, you won't have a previously loaded app open ad that's ready to be shown right away. The delay between when you request an ad and receive an ad back can create a situation where users are able to briefly use your app before being surprised by an out of context ad. This should be avoided because it is a bad user experience.</p> <p>The preferred way to use app open ads on cold starts is to use a loading screen to load your game or app assets, and to only show the ad from the loading screen. If your app has completed loading and has sent the user to the main content of your app, don't show the ad.</p>"},{"location":"ad-formats/app-open-ads/#best-practices","title":"Best practices","text":"<p>App open ads help you monetize your app's loading screen, when the app first launches and during app switches, but it's important to keep best practices in mind so that your users enjoy using your app. It's best to:</p> <ul> <li>Show your first app open ad after your users have used your app a few times.</li> <li>Show app open ads during times when your users would otherwise be waiting for your app to load.</li> <li>If you have a loading screen under the app open ad, and your loading screen completes loading before the ad is dismissed, you may want to dismiss your loading screen when the <code>OnDismissed</code> delegate is broadcast.</li> </ul>"},{"location":"ad-formats/app-open-ads/#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++</li> </ul>"},{"location":"ad-formats/banner-ads/","title":"Banner ads","text":"<p>Banner ads are rectangular ads that occupy a portion of an app's layout. Anchored adaptive banners are fixed aspect ratio ads that stay on screen while users are interacting with the app, either anchored at the top or bottom of the screen.</p>"},{"location":"ad-formats/banner-ads/#anchored-adaptive-banner","title":"Anchored adaptive banner","text":"<p>Anchored adaptive banner ads are fixed aspect ratio ads rather than the regular fixed size ads. The aspect ratio is similar to 320x50 industry standard. Once you specify the full width available, it returns an ad with optimal height for that width. The optimal height doesn't change across requests from the same device, and the surrounding views don't need to move when the ad refreshes.</p>"},{"location":"ad-formats/banner-ads/#collapsible-banner-ads","title":"Collapsible banner ads","text":"<p>Collapsible banner ads are banner ads that are initially presented as a larger overlay, with a button to collapse them to the originally requested banner size. Collapsible banner ads are intended to improve performance of anchored ads that are otherwise a smaller size. This guide shows how to turn on collapsible banner ads for existing banner placements.</p> <p></p>"},{"location":"ad-formats/banner-ads/#fixed-size-banner-ads","title":"Fixed size banner ads","text":"<p>The Google Mobile Ads SDK supports fixed ad sizes for situations where adaptive banners ads don't meet your needs.</p> <p>The following table lists the standard banner sizes.</p> Size in dp (WxH) Description Availability AdSize constant 320x50 Banner Phones and tablets BANNER 320x100 Large banner Phones and tablets LARGE_BANNER 320x250 IAB medium rectangle Phones and tablets MEDIUM_RECTANGLE 468x60 IAB full-size banner Tablets FULL_BANNER 728x90 IAB leaderboard Tablets LEADERBOARD"},{"location":"ad-formats/banner-ads/#prerequisites","title":"Prerequisites","text":"<p>Complete the following steps described in the Get Started guide:</p> <ul> <li>Set up your app in your AdMob account.</li> <li>Configure your project.</li> </ul>"},{"location":"ad-formats/banner-ads/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your account.</p> <p>The easiest way to load test ads is to use dedicated test ad unit IDs for banners:</p> Ad format Android demo ad unit ID iOS demo ad unit ID Adaptive Banner ca-app-pub-3940256099942544/9214589741 ca-app-pub-3940256099942544/2435281174 Fixed Size Banner ca-app-pub-3940256099942544/6300978111 ca-app-pub-3940256099942544/2934735716 <p>It's been specially configured to return test ads for every request, and you can use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.</p> <p>For more information about how Google Mobile Ads SDK test ads work, see Enable test ads.</p>"},{"location":"ad-formats/banner-ads/#load-and-show-an-ad","title":"Load and show an ad","text":"<p>Create a <code>UGoogleAdMobBannerAd</code> object and then call <code>Load()</code> method on it. Choose a preferred banner size and if it's a collapsible banner ad. Bind a function to show the ad to the <code>OnLoaded</code> delegate to show it right after it's loaded.</p> <p>Note</p> <p>Collapsible banner ads are only supported for adaptive banner sizes.</p> C++Blueprints <p>Header:</p> <pre><code>class UGoogleAdMobBannerAd;\nstruct UGoogleAdMobResponseInfo;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobBannerAd&gt; BannerAd;\n\nbool bIsShown = false;\n\nUFUNCTION()\nvoid OnLoaded(const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobBannerAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nBannerAd = NewObject&lt;UGoogleAdMobBannerAd&gt;(this);\nBannerAd-&gt;OnLoaded.AddDynamic(this, &amp;UYourClass::OnLoaded);\nif (UGoogleAdMob::CanRequestAds())\n{\n#if PLATFORM_ANDROID\n    if (BannerSize == EGoogleAdMobBannerSize::ADAPTIVE)\n        BannerAd-&gt;Load(\"ca-app-pub-3940256099942544/9214589741\", BannerSize, CollapsibleBannerPlacement);\n    else \n        BannerAd-&gt;Load(\"ca-app-pub-3940256099942544/6300978111\", BannerSize, CollapsibleBannerPlacement);\n#elif PLATFORM_IOS\n    if (BannerSize == EGoogleAdMobBannerSize::ADAPTIVE)\n        BannerAd-&gt;Load(\"ca-app-pub-3940256099942544/2435281174\", BannerSize, CollapsibleBannerPlacement);\n    else\n        BannerAd-&gt;Load(\"ca-app-pub-3940256099942544/2934735716\", BannerSize, CollapsibleBannerPlacement);\n#endif\n}\n// ...\nvoid UYourClass::OnLoaded()\n{\n    if (bIsShown) return;\n    BannerAd-&gt;Show(BannerPosition);\n    bIsShown = true;\n}\n</code></pre> <p></p> <p>Note</p> <p><code>OnLoaded</code> delegate is broadcast not only when the banner ad is first loaded, but also each time it's refreshed.</p>"},{"location":"ad-formats/banner-ads/#refresh-an-ad","title":"Refresh an ad","text":"<p>If you configured your ad unit to refresh, you don't need to request another ad when the ad fails to load. Google Mobile Ads SDK respects any refresh rate you specified in the AdMob UI. If you haven't enabled refresh, issue a new request. For more details on ad unit refresh, such as setting a refresh rate, see Use automatic refresh for Banner ads.</p> <p>Note</p> <p>When setting a refresh rate in the AdMob UI, the automatic refresh occurs only if the banner is visible on screen.</p>"},{"location":"ad-formats/banner-ads/#release-an-ad-resource","title":"Release an ad resource","text":"<p>When you are finished using a banner ad, you can release the banner ad's resources. To do it, just call <code>Remove()</code> method on the banner ad.</p> C++Blueprints <pre><code>// ...\nBannerAd-&gt;Remove();\nbIsShown = false;\n// ...\n</code></pre> <p></p>"},{"location":"ad-formats/banner-ads/#ad-events","title":"Ad events","text":"<p>You can listen for a number of events in the ad's lifecycle, including loading, ad impression and click, as well as ad open and close events. It is recommended to bind to the delegates before loading the banner. </p> C++Blueprints <p>Header:</p> <pre><code>struct UGoogleAdMobResponseInfo;\nstruct UGoogleAdMobAdError;\nstruct UGoogleAdMobAdValue;\n// ...\nUFUNCTION()\nvoid OnLoaded(const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n\nUFUNCTION()\nvoid OnFailedToLoad(const UGoogleAdMobAdError&amp; LoadAdError, const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n\nUFUNCTION()\nvoid OnClicked();\n\nUFUNCTION()\nvoid OnImpression();\n\nUFUNCTION()\nvoid OnOpened();\n\nUFUNCTION()\nvoid OnClosed();\n\nUFUNCTION()\nvoid OnPaidEvent(const UGoogleAdMobAdValue&amp; AdValue);\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMobBannerAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n#include \"GoogleAdMobAdError.h\"\n#include \"GoogleAdMobAdValue.h\"\n// ...\nBannerAd-&gt;OnLoaded.AddDynamic(this, &amp;UYourClass::OnLoaded);\nBannerAd-&gt;OnFailedToLoad.AddDynamic(this, &amp;UYourClass::OnFailedToLoad);\nBannerAd-&gt;OnClicked.AddDynamic(this, &amp;UYourClass::OnClicked);\nBannerAd-&gt;OnImpression.AddDynamic(this, &amp;UYourClass::OnImpression);\nBannerAd-&gt;OnOpened.AddDynamic(this, &amp;UYourClass::OnOpened);\nBannerAd-&gt;OnClosed.AddDynamic(this, &amp;UYourClass::OnClosed);\nBannerAd-&gt;OnPaidEvent.AddDynamic(this, &amp;UYourClass::OnPaidEvent);\n</code></pre> <p></p> Delegate Description OnLoaded The OnLoaded delegate is broadcast when an ad has finished loading. If you want to delay showing the ad until you're sure it will be loaded, for example, you can do so here. OnFailedToLoad The OnFailedToLoad delegate includes the LoadAdError parameter that describes what error occurred. For more information, refer to the Debugging Ad Load Errors documentation. OnClicked The OnClicked delegate is broadcast when a click is recorded for an ad. OnImpression The OnImpression delegate is broadcast when an impression is recorded for an ad. OnOpened The OnOpened delegate is broadcast when an ad opens an overlay that covers the screen. OnClosed The OnClosed delegate is broadcast when a user returns to the app after viewing an ad's destination URL. Your app can use it to resume suspended activities or perform any other work necessary to make itself ready for interaction. OnPaidEvent When an impression occurs, Google Mobile Ads SDK provides ad revenue data associated with that impression. You can use the data to calculate a user's lifetime value, or forward the data downstream to other relevant systems."},{"location":"ad-formats/banner-ads/#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++</li> </ul>"},{"location":"ad-formats/interstitial-ads/","title":"Interstitial ads","text":"<p>Interstitial ads are full-screen ads that cover the interface of their host app. They're typically displayed at natural transition points in the flow of an app, such as between activities or during the pause between levels in a game. When an app shows an interstitial ad, the user has the choice to either tap on the ad and continue to its destination or close it and return to the app.</p>"},{"location":"ad-formats/interstitial-ads/#prerequisites","title":"Prerequisites","text":"<p>Complete the following steps described in the Get Started guide:</p> <ul> <li>Set up your app in your AdMob account.</li> <li>Configure your project.</li> </ul>"},{"location":"ad-formats/interstitial-ads/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your account.</p> <p>The easiest way to load test ads is to use our dedicated test ad unit ID for interstitials:</p> Android demo ad unit ID iOS demo ad unit ID ca-app-pub-3940256099942544/1033173712 ca-app-pub-3940256099942544/4411468910 <p>It's been specially configured to return test ads for every request, and you're free to use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.</p> <p>For more information about how Google Mobile Ads SDK test ads work, see Test Ads.</p>"},{"location":"ad-formats/interstitial-ads/#load-an-ad","title":"Load an ad","text":"<p>To load an interstitial ad, create an instance of <code>UGoogleAdMobInterstitialAd</code> class and call it's <code>Load()</code> method.</p> C++Blueprints <p>Header:</p> <pre><code>class UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobInterstitialAd.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\nif (UGoogleAdMob::CanRequestAds())\n{\n#if PLATFORM_ANDROID\n    InterstitialAd-&gt;Load(\"ca-app-pub-3940256099942544/1033173712\");\n#elif PLATFORM_IOS\n    InterstitialAd-&gt;Load(\"ca-app-pub-3940256099942544/4411468910\");\n#endif\n}\n</code></pre> <p></p> <p>Tip</p> <p>You can use ad load calls to build up a cache of preloaded ads before you intend to show them, so that ads can be shown with zero latency when needed. Since ads expire after an hour, you should clear this cache and reload with new ads every hour. You can see an example of how it can be implemented in the C++ sample project at the bottom of the page.</p>"},{"location":"ad-formats/interstitial-ads/#show-the-ad","title":"Show the ad","text":"<p>Interstitial ads should be displayed during natural pauses in the flow of an app. Between levels of a game is a good example, or after the user completes a task. To show an interstitial, use it's <code>Show()</code> method.</p> C++Blueprints <pre><code>if (InterstitialAd-&gt;IsReady())\n{\n    InterstitialAd-&gt;Show();\n}\n</code></pre> <p></p>"},{"location":"ad-formats/interstitial-ads/#ad-events","title":"Ad events","text":"<p>You can listen for a number of events in the ad's lifecycle, including loading, ad impression and click, as well as show and dismiss events. It is recommended to bind to the delegates before loading the interstitial.</p> C++Blueprints <p>Header:</p> <pre><code>struct UGoogleAdMobResponseInfo;\nstruct UGoogleAdMobAdError;\nstruct UGoogleAdMobAdValue;\n// ...\nUFUNCTION()\nvoid OnLoaded(const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n\nUFUNCTION()\nvoid OnFailedToLoad(const UGoogleAdMobAdError&amp; LoadAdError, const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n\nUFUNCTION()\nvoid OnFailedToShow(const UGoogleAdMobAdError&amp; AdError);\n\nUFUNCTION()\nvoid OnShown();\n\nUFUNCTION()\nvoid OnClicked();\n\nUFUNCTION()\nvoid OnImpression();\n\nUFUNCTION()\nvoid OnDismissed();\n\nUFUNCTION()\nvoid OnPaidEvent(const UGoogleAdMobAdValue&amp; AdValue);\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n#include \"GoogleAdMobAdError.h\"\n#include \"GoogleAdMobAdValue.h\"\n// ...\nInterstitialAd-&gt;OnLoaded.AddDynamic(this, &amp;UYourClass::OnLoaded);\nInterstitialAd-&gt;OnFailedToLoad.AddDynamic(this, &amp;UYourClass::OnFailedToLoad);\nInterstitialAd-&gt;OnFailedToShow.AddDynamic(this, &amp;UYourClass::OnFailedToShow);\nInterstitialAd-&gt;OnShown.AddDynamic(this, &amp;UYourClass::OnShown);\nInterstitialAd-&gt;OnClicked.AddDynamic(this, &amp;UYourClass::OnClicked);\nInterstitialAd-&gt;OnImpression.AddDynamic(this, &amp;UYourClass::OnImpression);\nInterstitialAd-&gt;OnDismissed.AddDynamic(this, &amp;UYourClass::OnDismissed);\nInterstitialAd-&gt;OnPaidEvent.AddDynamic(this, &amp;UYourClass::OnPaidEvent);\n</code></pre> <p></p>"},{"location":"ad-formats/interstitial-ads/#some-best-practices","title":"Some best practices","text":""},{"location":"ad-formats/interstitial-ads/#consider-whether-interstitial-ads-are-the-right-type-of-ad-for-your-app","title":"Consider whether interstitial ads are the right type of ad for your app.","text":"<p>Interstitial ads work best in apps with natural transition points. The conclusion of a task within an app, like sharing an image or completing a game level, creates such a point. Make sure you consider at which points in your app's workflow you'll display interstitial ads and how the user is likely to respond.</p>"},{"location":"ad-formats/interstitial-ads/#remember-to-pause-the-action-when-displaying-an-interstitial-ad","title":"Remember to pause the action when displaying an interstitial ad.","text":"<p>There are a number of different types of interstitial ads: text, image, video, and more. It's important to make sure that when your app displays an interstitial ad, it also suspends its use of some resources to allow the ad to take advantage of them. For example, when you make the call to display an interstitial ad, be sure to pause any audio output being produced by your app.</p>"},{"location":"ad-formats/interstitial-ads/#allow-for-adequate-loading-time","title":"Allow for adequate loading time.","text":"<p>Just as it's important to make sure you display interstitial ads at an appropriate time, it's also important to make sure the user doesn't have to wait for them to load. Loading the ad in advance by calling <code>Load()</code> before you intend to call <code>Show()</code> can ensure that your app has a fully loaded interstitial ad at the ready when the time comes to display one.</p>"},{"location":"ad-formats/interstitial-ads/#dont-flood-the-user-with-ads","title":"Don't flood the user with ads.","text":"<p>While increasing the frequency of interstitial ads in your app might seem like a great way to increase revenue, it can also degrade the user experience and lower clickthrough rates. Make sure that users aren't so frequently interrupted that they're no longer able to enjoy the use of your app.</p>"},{"location":"ad-formats/interstitial-ads/#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++ </li> </ul>"},{"location":"ad-formats/rewarded-ads/","title":"Rewarded ads","text":"<p>Rewarded ads enable users to play games, take surveys, or watch videos to earn in-app rewards, such as coins, extra lives, or points. You can set different rewards for different ad units, and specify the reward values and items the user received.</p>"},{"location":"ad-formats/rewarded-ads/#prerequisites","title":"Prerequisites","text":"<p>Complete the following steps described in the Get Started guide:</p> <ul> <li>Set up your app in your AdMob account.</li> <li>Configure your project.</li> </ul>"},{"location":"ad-formats/rewarded-ads/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your account.</p> <p>The easiest way to load test ads is to use our dedicated test ad unit ID for rewarded ads:</p> Android demo ad unit ID iOS demo ad unit ID ca-app-pub-3940256099942544/5224354917 ca-app-pub-3940256099942544/1712485313 <p>It's been specially configured to return test ads for every request, and you're free to use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.</p> <p>For more information about how Google Mobile Ads SDK test ads work, see Test Ads.</p>"},{"location":"ad-formats/rewarded-ads/#load-a-rewarded-ad-object","title":"Load a rewarded ad object","text":"<p>To load a rewarded ad, create an instance of <code>UGoogleAdMobRewardedAd</code> class and call it's <code>Load()</code> method.</p> C++Blueprints <p>Header:</p> <pre><code>class UGoogleAdMobRewardedAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobRewardedAd&gt; RewardedAd;\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobRewardedAd.h\"\n// ...\nRewardedAd = NewObject&lt;UGoogleAdMobRewardedAd&gt;(this);\nif (UGoogleAdMob::CanRequestAds())\n{\n#if PLATFORM_ANDROID\n    RewardedAd-&gt;Load(\"ca-app-pub-3940256099942544/5224354917\");\n#elif PLATFORM_IOS\n    RewardedAd-&gt;Load(\"ca-app-pub-3940256099942544/1712485313\");\n#endif\n}\n</code></pre> <p></p> <p>Tip</p> <p>You can use ad load calls to build up a cache of preloaded ads before you intend to show them, so that ads can be shown with zero latency when needed. Since ads expire after an hour, you should clear this cache and reload with new ads every hour. You can see an example of how it can be implemented in the C++ sample project at the bottom of the page.</p>"},{"location":"ad-formats/rewarded-ads/#show-the-ad","title":"Show the ad","text":"<p>When you show a rewarded ad, you will use a <code>OnUserEarnedReward</code> delegate to handle reward events. To show a rewarded ad, use it's <code>Show()</code> method.</p> C++Blueprints <pre><code>if (RewardedAd-&gt;IsReady())\n{\n    RewardedAd-&gt;Show();\n}\n</code></pre> <p></p>"},{"location":"ad-formats/rewarded-ads/#ad-events","title":"Ad events","text":"<p>You can listen for a number of events in the ad's lifecycle, including loading, ad impression and click, as well as show and dismiss events. But for the rewarded ad the most important is <code>OnUserEarnedReward</code>. It is recommended to bind to the delegates before loading the ad.</p> C++Blueprints <p>Header:</p> <pre><code>struct UGoogleAdMobResponseInfo;\nstruct UGoogleAdMobAdError;\nstruct UGoogleAdMobAdValue;\n// ...\nUFUNCTION()\nvoid OnLoaded(const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n\nUFUNCTION()\nvoid OnFailedToLoad(const UGoogleAdMobAdError&amp; LoadAdError, const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n\nUFUNCTION()\nvoid OnFailedToShow(const UGoogleAdMobAdError&amp; AdError);\n\nUFUNCTION()\nvoid OnShown();\n\nUFUNCTION()\nvoid OnClicked();\n\nUFUNCTION()\nvoid OnImpression();\n\nUFUNCTION()\nvoid OnDismissed();\n\nUFUNCTION()\nvoid OnPaidEvent(const UGoogleAdMobAdValue&amp; AdValue);\n\nUFUNCTION()\nvoid OnUserEarnedReward(int32 RewardAmount, const FString&amp; RewardType);\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMobRewardedAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n#include \"GoogleAdMobAdError.h\"\n#include \"GoogleAdMobAdValue.h\"\n// ...\nRewardedAd-&gt;OnLoaded.AddDynamic(this, &amp;UYourClass::OnLoaded);\nRewardedAd-&gt;OnFailedToLoad.AddDynamic(this, &amp;UYourClass::OnFailedToLoad);\nRewardedAd-&gt;OnFailedToShow.AddDynamic(this, &amp;UYourClass::OnFailedToShow);\nRewardedAd-&gt;OnShown.AddDynamic(this, &amp;UYourClass::OnShown);\nRewardedAd-&gt;OnClicked.AddDynamic(this, &amp;UYourClass::OnClicked);\nRewardedAd-&gt;OnImpression.AddDynamic(this, &amp;UYourClass::OnImpression);\nRewardedAd-&gt;OnDismissed.AddDynamic(this, &amp;UYourClass::OnDismissed);\nRewardedAd-&gt;OnPaidEvent.AddDynamic(this, &amp;UYourClass::OnPaidEvent);\nRewardedAd-&gt;OnUserEarnedReward.AddDynamic(this, &amp;UYourClass::OnUserEarnedReward);\n</code></pre> <p></p>"},{"location":"ad-formats/rewarded-ads/#faq","title":"FAQ","text":""},{"location":"ad-formats/rewarded-ads/#is-there-a-timeout-for-the-initialization-call","title":"Is there a timeout for the initialization call?","text":"<p>After 10 seconds, Google Mobile Ads SDK invokes the <code>OnInitializationComplete</code> delegate even if a mediation network still hasn't completed initialization.</p>"},{"location":"ad-formats/rewarded-ads/#what-if-some-mediation-networks-arent-ready-when-i-get-the-initialization-callback","title":"What if some mediation networks aren't ready when I get the initialization callback?","text":"<p>Google recommends loading an ad inside the bound function of the <code>OnInitializationComplete</code> delegate. Even if a mediation network is not ready, Google Mobile Ads SDK still asks that network for an ad. So if a mediation network finishes initializing after the timeout, it can still service future ad requests in that session.</p>"},{"location":"ad-formats/rewarded-ads/#does-the-onuserearnedreward-delegate-always-get-called-before-the-ondismissed-delegate","title":"Does the <code>OnUserEarnedReward</code> delegate always get called before the <code>OnDismissed</code> delegate?","text":"<p>For Google ads, <code>OnUserEarnedReward</code> is broadcast before the <code>OnDismissed</code> delegate. For ads served through mediation, the third-party ad network SDK's implementation determines the broadcast order. For ad network SDKs that provide a single close callback with reward information, the mediation adapter invokes <code>OnUserEarnedReward</code> delegate before <code>OnDismissed</code>.</p>"},{"location":"ad-formats/rewarded-ads/#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++ </li> </ul>"},{"location":"ad-formats/rewarded-interstitial-ads/","title":"Rewarded interstitial ads","text":"<p>Rewarded interstitial is a type of incentivized ad format that lets you offer rewards for ads that appear automatically during natural app transitions. Unlike rewarded ads, users aren't required to opt in to view a rewarded interstitial.</p>"},{"location":"ad-formats/rewarded-interstitial-ads/#prerequisites","title":"Prerequisites","text":"<p>Complete the following steps described in the Get Started guide:</p> <ul> <li>Set up your app in your AdMob account.</li> <li>Configure your project.</li> </ul>"},{"location":"ad-formats/rewarded-interstitial-ads/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your account.</p> <p>The easiest way to load test ads is to use our dedicated test ad unit ID for rewarded interstitial ads:</p> Android demo ad unit ID iOS demo ad unit ID ca-app-pub-3940256099942544/5354046379 ca-app-pub-3940256099942544/6978759866 <p>It's been specially configured to return test ads for every request, and you're free to use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.</p> <p>For more information about how Google Mobile Ads SDK test ads work, see Test Ads.</p>"},{"location":"ad-formats/rewarded-interstitial-ads/#load-an-ad","title":"Load an ad","text":"<p>Loading an ad is accomplished using the <code>Load()</code> method on the <code>UGoogleAdMobRewardedInterstitialAd</code>-derived object. The load method requires your ad unit ID.</p> C++Blueprints <p>Header:</p> <pre><code>class UGoogleAdMobRewardedInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobRewardedInterstitialAd&gt; RewardedInterstitialAd;\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobRewardedInterstitialAd.h\"\n// ...\nRewardedAd = NewObject&lt;UGoogleAdMobRewardedInterstitialAd&gt;(this);\nif (UGoogleAdMob::CanRequestAds())\n{\n#if PLATFORM_ANDROID\n    RewardedInterstitialAd-&gt;Load(\"ca-app-pub-3940256099942544/5354046379\");\n#elif PLATFORM_IOS\n    RewardedInterstitialAd-&gt;Load(\"ca-app-pub-3940256099942544/6978759866\");\n#endif\n}\n</code></pre> <p></p> <p>Tip</p> <p>You can use ad load calls to build up a cache of preloaded ads before you intend to show them, so that ads can be shown with zero latency when needed. Since ads expire after an hour, you should clear this cache and reload with new ads every hour. You can see an example of how it can be implemented in the C++ sample project at the bottom of the page.</p>"},{"location":"ad-formats/rewarded-interstitial-ads/#show-the-ad","title":"Show the ad","text":"<p>Note</p> <p>Before displaying a rewarded interstitial ad to users, you must present the user with an intro screen that provides clear reward messaging and an option to skip the ad before it starts. Learn more</p> <p>When you show a rewarded interstitial ad, you use a <code>OnUserEarnedReward</code> delegate to handle reward events. To show a rewarded interstitial ad, use it's <code>Show()</code> method.</p> C++Blueprints <pre><code>if (RewardedInterstitialAd-&gt;IsReady())\n{\n    RewardedInterstitialAd-&gt;Show();\n}\n</code></pre> <p></p>"},{"location":"ad-formats/rewarded-interstitial-ads/#ad-events","title":"Ad events","text":"<p>You can listen for a number of events in the ad's lifecycle, including loading, ad impression and click, as well as show and dismiss events. But for the rewarded interstitial ad the most important is <code>OnUserEarnedReward</code>. It is recommended to bind to the delegates before loading the ad.</p> C++Blueprints <p>Header:</p> <pre><code>struct UGoogleAdMobResponseInfo;\nstruct UGoogleAdMobAdError;\nstruct UGoogleAdMobAdValue;\n// ...\nUFUNCTION()\nvoid OnLoaded(const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n\nUFUNCTION()\nvoid OnFailedToLoad(const UGoogleAdMobAdError&amp; LoadAdError, const UGoogleAdMobResponseInfo&amp; ResponseInfo);\n\nUFUNCTION()\nvoid OnFailedToShow(const UGoogleAdMobAdError&amp; AdError);\n\nUFUNCTION()\nvoid OnShown();\n\nUFUNCTION()\nvoid OnClicked();\n\nUFUNCTION()\nvoid OnImpression();\n\nUFUNCTION()\nvoid OnDismissed();\n\nUFUNCTION()\nvoid OnPaidEvent(const UGoogleAdMobAdValue&amp; AdValue);\n\nUFUNCTION()\nvoid OnUserEarnedReward(int32 RewardAmount, const FString&amp; RewardType);\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMobRewardedInterstitialAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n#include \"GoogleAdMobAdError.h\"\n#include \"GoogleAdMobAdValue.h\"\n// ...\nRewardedInterstitialAd-&gt;OnLoaded.AddDynamic(this, &amp;UYourClass::OnLoaded);\nRewardedInterstitialAd-&gt;OnFailedToLoad.AddDynamic(this, &amp;UYourClass::OnFailedToLoad);\nRewardedInterstitialAd-&gt;OnFailedToShow.AddDynamic(this, &amp;UYourClass::OnFailedToShow);\nRewardedInterstitialAd-&gt;OnShown.AddDynamic(this, &amp;UYourClass::OnShown);\nRewardedInterstitialAd-&gt;OnClicked.AddDynamic(this, &amp;UYourClass::OnClicked);\nRewardedInterstitialAd-&gt;OnImpression.AddDynamic(this, &amp;UYourClass::OnImpression);\nRewardedInterstitialAd-&gt;OnDismissed.AddDynamic(this, &amp;UYourClass::OnDismissed);\nRewardedInterstitialAd-&gt;OnPaidEvent.AddDynamic(this, &amp;UYourClass::OnPaidEvent);\nRewardedInterstitialAd-&gt;OnUserEarnedReward.AddDynamic(this, &amp;UYourClass::OnUserEarnedReward);\n</code></pre> <p></p>"},{"location":"ad-formats/rewarded-interstitial-ads/#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++ </li> </ul>"}]}