{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get started","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"#get-started","title":"Get started","text":"<p>The Google Mobile Ads Unreal Engine plugin lets Unreal developers serve Google mobile ads on Android and iOS apps without having to write Java or Objective-C code. The plugin provides a C++ and Blueprints interfaces for requesting ads that can be used in your Unreal project.</p> <p>This guide is intended for publishers who want to monetize an Unreal app.</p>"},{"location":"#set-up-your-app-in-your-admob-account","title":"Set up your app in your AdMob account","text":"<p>Register your app as an AdMob app by completing the following steps:</p> <ol> <li>Sign in to or sign up for an AdMob account.</li> <li>Register your app with AdMob. This step creates an AdMob app with a unique AdMob App ID that is needed later in this guide.</li> </ol>"},{"location":"#configure-your-project","title":"Configure your project","text":""},{"location":"#enable-the-plugin","title":"Enable the plugin","text":"<p>The plugin is typically enabled by default upon installation. However, if it's not, follow these steps:</p> <ol> <li>Navigate to Edit &gt; Plugins in Unreal Engine.</li> <li>Search for <code>Google AdMob</code> in the plugin list.</li> <li>If the plugin is disabled, enable it by checking the corresponding box.</li> </ol>"},{"location":"#disable-build-in-admob-support-for-ads","title":"Disable build-in AdMob support for ads","text":"<p>To avoid any compatibility issues and library conflicts, disable build-in AdMob support. Inside Project Settings, go to Platforms &gt; Android &gt; Google Play Services and set <code>Include AdMob support for ads</code> to <code>false</code>.</p> <p></p>"},{"location":"#enter-your-app-ids-in-project-settings","title":"Enter your App IDs in Project Settings","text":"<ol> <li>Copy your AdMob app ID, as identified in the AdMob web interface. You'll need to separate AdMob apps for Android and iOS, i.e. two different App IDs for these platforms.</li> <li>Open Project Settings &gt; Plugins &gt; Google AdMob in Unreal Engine, and paste the copied values into the corresponding AdMob App ID fields.</li> </ol>"},{"location":"#add-dependency-to-your-modules-c-projects","title":"Add dependency to your modules <code>(C++ projects)</code>","text":"<p>To use the plugin in your C++ code, you must include <code>GoogleAdMob</code> as either a public or private dependency in your module's build configuration, for example: <pre><code>PrivateDependencyModuleNames.Add(\"GoogleAdMob\");\n</code></pre></p>"},{"location":"#obtain-consent-from-a-user","title":"Obtain consent from a user","text":"<p>It's highly recommended that you use Google UMP plugin or some other CMP solution to obtain consent from a user before requesting ads, so you comply with GDPR rules in EEA countries and US privacy regulations (e.g. CCPA). If you decide to use a custom solution, you can use the following functions to pass consent choices to the Google AdMob SDK (should be done before initializing it):</p> C++Blueprints <pre><code>UGoogleAdMob::SetConsent(bIsConsentRequired, bHasUserConsent); // For GDPR\nUGoogleAdMob::SetRestrictedDataProcessing(bRestrictedDataProcessing); // For US privacy regulations\n</code></pre> <p></p>"},{"location":"#initialize-the-sdk","title":"Initialize the SDK","text":"<p>Before loading ads, have your app initialize Google Mobile Ads SDK by calling <code>UGoogleAdMob::Initialize()</code>. This needs to be done only once, ideally at app launch.</p> <p>Warning</p> <p>If you need to obtain consent from users in the European Economic Area (EEA), set any request-specific flags, such as <code>SetTagForChildDirectedTreatment()</code> or <code>SetTagForUnderAgeOfConsent()</code>, or otherwise take action before loading ads, ensure you do so before initializing Google Mobile Ads SDK.</p> <p>Here's an example of how to call <code>UGoogleAdMob::Initialize()</code>:</p> C++Blueprints <pre><code>UGoogleAdMob::OnInitializationComplete.AddLambda([]()\n{\n    UE_LOG(LogTemp, Display, TEXT(\"Google Mobile Ads initialization complete.\"));\n});\nUGoogleAdMob::Initialize();\n</code></pre> <p></p> <p>If you're using mediation, wait until the callback occurs before loading ads to verify that all mediation adapters are initialized.</p> <p>Note</p> <p>It's recommended to use some Consent Management Platform to obrain user consent in EEA and regulated US states before initializing the SDK. You can use Google UMP plugin for that. It is also required by <code>Enable automatic SDK initialization on start-up</code> setting in Project Settings, which allows you to skip this step entirely.</p>"},{"location":"#select-an-ad-format","title":"Select an ad format","text":"<p>Google Mobile Ads SDK is now imported and you're ready to implement other ads. AdMob offers a number of different ad formats, so you can choose the one that best fits your app's user experience.</p>"},{"location":"#banner","title":"Banner","text":"<p>Banner ad units display rectangular ads that occupy a portion of an app's layout. They can refresh automatically after a set period of time. This means users view a new ad at regular intervals, even if they stay on the same screen in your app. They're also the simplest ad format to implement.</p> <p>Implement banner ads</p>"},{"location":"#interstitial","title":"Interstitial","text":"<p>Interstitial ad units show full-page ads in your app. Place them at natural breaks and transitions in your app's interface, such as after level completion in a gaming app.</p> <p>Implement interstitial ads</p>"},{"location":"#rewarded","title":"Rewarded","text":"<p>Rewarded ad units enable users to play games, take surveys, or watch videos to earn in-app rewards, such as coins, extra lives, or points. You can set different rewards for different ad units, and specify the reward values and items the user received.</p> <p>Implement rewarded ads</p>"},{"location":"#rewarded-interstitial","title":"Rewarded interstitial","text":"<p>Rewarded interstitial is a new type of incentivized ad format that lets you offer rewards, such as coins or extra lives, for ads that appear automatically during natural app transitions.</p> <p>Unlike rewarded ads, users aren't required to opt in to view a rewarded interstitial.</p> <p>Instead of the opt-in prompt in rewarded ads, rewarded interstitials require an intro screen that announces the reward and gives users a chance to opt out if they want to do so.</p> <p>Implement rewarded interstitial ads</p>"},{"location":"#app-open","title":"App open","text":"<p>App open is an ad format that appears when users open or switch back to your app. The ad overlays the loading screen.</p> <p>Implement app open ads</p>"},{"location":"#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++</li> </ul>"},{"location":"ad-inspector/","title":"Ad inspector","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"ad-inspector/#overview","title":"Overview","text":"<p>Ad inspector is an in-app overlay that lets you perform real-time analysis of test ad requests directly within a mobile app. For a list of ad inspector features, see Test your app with ad inspector.</p> <p>Warning</p> <p>Enabling ad inspector increases memory usage of the Google Mobile Ads SDK for test devices.</p> <p>This guide covers how to perform the following:</p> <ul> <li>Launch ad inspector</li> <li>Verify adapter integrations</li> <li>Test ad units</li> <li>Troubleshoot ad units</li> <li>Troubleshoot privacy settings</li> </ul>"},{"location":"ad-inspector/#prerequisites","title":"Prerequisites","text":"<p>Before you can use ad inspector, you must complete the following tasks:</p> <ul> <li>Create an AdMob account. For more details, see Sign up for AdMob.</li> <li>Set up an app in AdMob.</li> <li> <p>Complete the Get Started guide.</p> </li> <li> <p>Add your device as a test device. To add a test device, see Enable test devices</p> </li> </ul> <p>Note</p> <p>Ad inspector launches only on test devices.</p>"},{"location":"ad-load-errors/","title":"Ad load errors","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"ad-load-errors/#ad-load-errors","title":"Ad load errors","text":"<p>When an ad fails to load, an <code>OnFailedToLoad</code> delegate is broadcast which provides a <code>LoadAdError</code> struct.</p> <p>The following example shows the information available when an ad fails to load:</p> C++Blueprints <pre><code>#include \"GoogleAdMobAdError.h\"\n// ...\nvoid UYourClass::OnFailedToLoad(const FGoogleAdMobAdError&amp; LoadAdError, const FGoogleAdMobResponseInfo&amp; ResponseInfo)\n{\n    LoadAdError.Code;\n    LoadAdError.Message;\n    LoadAdError.Domain;\n    LoadAdError.Cause.Code;\n    LoadAdError.Cause.Message;\n    LoadAdError.Cause.Domain;\n    LoadAdError.FullError;\n}\n</code></pre> <p></p> <p>For errors under the domain <code>com.google.admob</code> on iOS and <code>com.google.android.gms.ads</code> on Android, the message can be looked up in the Resolve common onboarding issues article for a more detailed explanation and possible actions that can be taken to resolve the issue.</p>"},{"location":"enable-test-ads/","title":"Enable test ads","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"enable-test-ads/#enable-test-ads","title":"Enable test ads","text":"<p>This guide explains how to enable test ads in your ads integration. It's important to enable test ads during development so that you can click them without charging Google advertisers. If you click too many ads without being in test mode, you risk your account being flagged for invalid activity.</p> <p>There are two ways to get test ads:</p> <ol> <li>Use one of Google's demo ad units.</li> <li>Use your own ad unit and enable test devices.</li> </ol>"},{"location":"enable-test-ads/#demo-ad-units","title":"Demo ad units","text":"<p>The quickest way to enable testing is to use Google-provided demo ad units. These ad units are not associated with your AdMob account, so there's no risk of your account generating invalid traffic when using these ad units.</p> <p>Warning</p> <p>Make sure you replace these IDs with your own ad unit ID before publishing your game.</p> <p>Here are demo ad units that point to specific test creatives for each format:</p> Ad format Android demo ad unit ID iOS demo ad unit ID App Open ca-app-pub-3940256099942544/9257395921 ca-app-pub-3940256099942544/5575463023 Adaptive Banner ca-app-pub-3940256099942544/9214589741 ca-app-pub-3940256099942544/2435281174 Fixed Size Banner ca-app-pub-3940256099942544/6300978111 ca-app-pub-3940256099942544/2934735716 Interstitial ca-app-pub-3940256099942544/1033173712 ca-app-pub-3940256099942544/4411468910 Rewarded Ads ca-app-pub-3940256099942544/5224354917 ca-app-pub-3940256099942544/1712485313 Rewarded Interstitial ca-app-pub-3940256099942544/5354046379 ca-app-pub-3940256099942544/6978759866 Native ca-app-pub-3940256099942544/2247696110 ca-app-pub-3940256099942544/3986624511 Native Video ca-app-pub-3940256099942544/1044960115 ca-app-pub-3940256099942544/2521693316"},{"location":"enable-test-ads/#enable-test-devices","title":"Enable test devices","text":"<p>If you want to do more rigorous testing with production-looking ads, you can configure your device as a test device and use your own ad unit IDs that you've created in the AdMob UI. Test devices can either be added in the AdMob UI or programmatically using the plugin settings.</p> <p>Follow the steps below to add your device as a test device.</p> <p>Note</p> <p>Android emulators and iOS simulators are automatically configured as test devices.</p>"},{"location":"enable-test-ads/#add-your-test-device-in-the-admob-ui","title":"Add your test device in the AdMob UI","text":"<p>For a non-programmatic way to add a test device and test new or existing app builds, use the AdMob UI. Learn how.</p> <p>Note</p> <p>New test devices typically start serving test ads in your app within 15 minutes, but it can also take up to 24 hours.</p>"},{"location":"enable-test-ads/#add-your-test-device-programmatically","title":"Add your test device programmatically","text":"<p>To register your test device, complete the following steps:</p> <ol> <li>Run your game on a device of your choice (iOS or Android), and make an ad request.</li> <li> <p>Check the log output of your device for a message similar to the following examples, which shows your device ID:</p> <ul> <li> <p>iOS: </p> <pre><code>&lt;Google&gt; To get test ads on this device, set:\nGADMobileAds.sharedInstance.requestConfiguration.testDeviceIdentifiers =\n@[ @\"2077ef9a63d2b398840261c8221a0c9b\" ];\n</code></pre> </li> <li> <p>Android: </p> <pre><code>I/Ads: Use RequestConfiguration.Builder.setTestDeviceIds(Arrays.asList(\"33BE2250B43518CCDA7DE426D04EE231\")) \nto get test ads on this device.\n</code></pre> </li> </ul> </li> <li> <p>Copy your test device ID to your clipboard.</p> </li> <li> <p>Go to Project Settings &gt; Plugins &gt; Google AdMob and paste the copied device ID into the appropriate Test Device IDs array:</p> <p></p> <p>Warning</p> <p>Be sure to disable \"Enable Test Devices\" fields before you release your game.</p> </li> <li> <p>Rebuild your project and run it again. If the ad is a Google ad, you'll see a Test mode label centered at the top of the ad (banner, interstitial, or rewarded ad):</p> <p></p> </li> </ol>"},{"location":"enable-test-ads/#testing-with-mediation","title":"Testing with mediation","text":"<p>Google's demo ad units only show Google ads. To test your mediation configuration, you must use the enable test devices approach.</p> <p>Mediated ads do not render a Test mode label. You are responsible for ensuring that test mode is enabled for each of your mediation networks so that these networks don't flag your account for invalid activity. See each network's respective mediation guide for more information.</p> <p>If you aren't sure whether a mediation ad network adapter provides a test mode, it is safest to avoid clicking on ads from that network during development. You can use the <code>FGoogleAdMobResponseInfo::MediationAdapterClassName</code> property on any of the ad formats to figure out which ad network served the current ad.</p>"},{"location":"mediation/","title":"Mediation","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"mediation/#mediation","title":"Mediation","text":"<p>AdMob Mediation is a feature lets you serve ads to your apps from multiple sources, including the AdMob Network and third-party ad sources, in one place. AdMob Mediation helps maximize your fill rate and increase your monetization by sending ad requests to multiple networks to verify you find the best available network to serve ads. Case study.</p>"},{"location":"mediation/#prerequisites","title":"Prerequisites","text":"<p>Warning</p> <p>Verify that you have the necessary account permissions to complete the mediation configuration. These permissions include access to inventory management, app access, and privacy and messaging features. See Manage user access to your account for details.</p> <p>Before you can integrate mediation for an ad format, you need to integrate that ad format into your app:</p> <ul> <li>App Open Ads</li> <li>Banner Ads</li> <li>Interstitial Ads</li> <li>Rewarded Ads</li> <li>Rewarded Interstitial Ads</li> </ul> <p>New to mediation? Read Overview of AdMob Mediation.</p>"},{"location":"mediation/#initialize-google-mobile-ads-sdk","title":"Initialize Google Mobile Ads SDK","text":"<p>You can either rely on Automatic SDK initialization or implement it manually. During that initialization call, mediation adapters also get initialized. It is important to wait for initialization to complete before you load ads in order to verify full participation from every ad network on the first ad request.</p>"},{"location":"mediation/#check-which-ad-network-adapter-class-loaded-the-ad","title":"Check which ad network adapter class loaded the ad","text":"<p>Here is an example that logs the ad network class name for an ad:</p> C++Blueprints <pre><code>#include \"GoogleAdMobResponseInfo.h\"\n// ...\nvoid UYourClass::OnLoaded(const UGoogleAdMobResponseInfo&amp; ResponseInfo)\n{  \n    UE_LOG(LogTemp, Display, TEXT(\"Adapter class name: %s\"), *ResponseInfo.MediationAdapterClassName);\n}\n</code></pre> <p></p> <p>Refer to the Response info documentation on MediationAdapterClassName for details about this property.</p>"},{"location":"mediation/#us-states-privacy-laws-and-gdpr","title":"US states privacy laws and GDPR","text":"<p>If you need to comply with the U.S. states privacy laws or General Data Protection Regulation (GDPR), follow the steps in US state regulations settings or GDPR settings to add your mediation partners in AdMob Privacy &amp; messaging's US states or GDPR ad partners list. Failure to do so can lead to partners failing to serve ads on your app.</p> <p>Learn more about enabling restricted data processing (RDP) and obtaining GDPR consent with the Google User Messaging Platform (UMP) SDK.</p>"},{"location":"mediation/#choose-networks","title":"Choose networks","text":"<p>AdMob Mediation supports several ad sources, with a mix of bidding and waterfall mediation integrations. To add one of the networks, you need to choose an appropriate guide from Google from the table below and complete first 2 steps from it, and then enable this mediation network in Project Settings. Select an ad source for integration instructions specific to that ad source:</p> <p>| Ad Source | App Open | Banner | Interstitial | Rewarded | Rewarded Interstitial | Bidding | Ad source optimization support | | --------- | :------: | :----: | :----------: | :------: | :-------------------: | :-----: | :----------------------------- | :------------- | | AppLovin (Android | iOS) | |  |  |  | |  | Country-specific | | Chartboost (Android | iOS) | |  |  |  | | | Country-specific | | DT Exchange (Android | iOS) | |  |  |  | |  | Country-specific | | i-mobile (Android | iOS) | |  |  | | | | Japan only | | InMobi (Android | iOS) | |  |  |  | |  | Country-specific | | ironSource (Android | iOS) | |  |  |  |  |  | Country-specific | | Liftoff\u00a0Monetize (Android | iOS) |  |  |  |  | |  | Country-specific | | LINE Ads Network (Android | iOS) | |  |  |  | |  | Country-specific | | maio (Android | iOS) | | |  |  | | | Japan only | | Meta Audience Network (Android | iOS) | |  |  |  |  |  | Bidding only | | Mintegral (Android | iOS) |  |  |  |  | |  | Country-specific | | Moloco (Android | iOS) | |  |  |  | |  | Country-specific | | Pangle (Android | iOS) |  |  |  |  | |  | Country-specific | | Unity Ads (Android | iOS) | |  |  |  | |  | Country-specific | | VK Ads (Android | iOS) | |  |  |  | | | Country-specific |</p>"},{"location":"mediation/#network-specific-optional-steps","title":"Network-specific optional steps","text":"<p>Some mediation networks support additional request parameters which can improve targeting and ad serving performance. The following functions are available:</p> <ul> <li><code>UGoogleAdMob::SetAdditionalRequestParametersAppLovin()</code></li> <li><code>UGoogleAdMob::SetAdditionalRequestParametersDTExchange()</code></li> <li><code>UGoogleAdMob::SetAdditionalRequestParametersInMobi()</code></li> <li><code>UGoogleAdMob::SetAdditionalRequestParametersLiftoffMonetize()</code></li> <li><code>UGoogleAdMob::SetAdditionalRequestParametersLineAdsNetwork()</code></li> <li><code>UGoogleAdMob::SetAdditionalRequestParametersVKAds()</code></li> </ul> <p>To reset previously set request parameters call the following functions:</p> <ul> <li><code>UGoogleAdMob::ClearAdditionalRequestParametersAppLovin()</code></li> <li><code>UGoogleAdMob::ClearAdditionalRequestParametersDTExchange()</code></li> <li><code>UGoogleAdMob::ClearAdditionalRequestParametersInMobi()</code></li> <li><code>UGoogleAdMob::ClearAdditionalRequestParametersLiftoffMonetize()</code></li> <li><code>UGoogleAdMob::ClearAdditionalRequestParametersLineAdsNetwork()</code></li> <li><code>UGoogleAdMob::ClearAdditionalRequestParametersVKAds()</code></li> </ul> <p>Chartboost and InMobi networks recommend adding additional optional permissions on Android to improve ad performance:</p> <p></p> <p>Note</p> <p>Some of this permissions are not recommended to be added if they are not required by your app to function.</p>"},{"location":"mediation/#ad-source-optimization","title":"Ad source optimization","text":"<p>When you configure multiple ad networks for mediation, you have to specify what order to request these networks by setting their respective CPM. This can be difficult to manage, since ad network performance changes over time.</p> <p>Ad source optimization is a feature that lets you to generate the highest CPM from the ad networks in your mediation chain by automating the process of ordering the mediation chain to maximize revenue.</p> <p>The mediation networks table earlier uses the following values for ad source optimization support:</p> Ad source optimization support What it means Bidding only The ad network only participates in bidding. Ad source optimization is not applicable. Country-specific eCPM values are automatically updated on your behalf on a per-country basis. This is the optimal type of optimization. None You must manually configure an eCPM value for that ad network. <p>Click a specific ad network's guide for details on how to configure ad source optimization for that network.</p> <p>Note</p> <p>There is also a number of \"No third-party SDKs required\" ad networks that only require signing a partnership through the AdMob UI.</p>"},{"location":"mediation/#troubleshoot-admob-bidding","title":"Troubleshoot AdMob bidding","text":"<p>When integrating a bidding partner that requires their SDK, the following symptoms indicate an improper integration:</p> <ul> <li>The Ads Activity report shows significantly fewer ad requests to that partner than you expect.</li> <li> <p>The <code>a3p</code> parameter in any request after the first ad request is missing.</p> <p>Note</p> <p>The first ad request may contain the <code>a3p</code> parameter even if you did not configure bidding.</p> </li> </ul> <p>Follow this checklist to make sure your setup is correct:</p> <ul> <li> <p>In the AdMob UI:</p> <ul> <li>Confirm that you have followed the specific partner's integration guide to configure third-party bidding demand.</li> <li>Confirm that you have an ad unit mapping for each creative format.</li> </ul> </li> <li> <p>In your project:</p> <ul> <li>Ensure that the app ID in Project Settings is the same app ID that your ad unit mapping targets.</li> <li>Make sure your ad unit IDs match those in the AdMob UI as they must match exactly.</li> </ul> </li> </ul>"},{"location":"response-info/","title":"Response info","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"response-info/#retrieve-information-about-the-ad-response","title":"Retrieve information about the ad response","text":"<p>For debugging and logging purposes, successfully loaded ads (as well as those that failed to load) provide a <code>ResponseInfo</code> struct. This object contains information about the ad it loaded (or not), in addition to information about the mediation waterfall used to load the ad.</p> C++Blueprints <pre><code>#include \"GoogleAdMobAdResponseInfo.h\"\n// ...\nvoid UYourClass::OnLoaded(const FGoogleAdMobResponseInfo&amp; ResponseInfo)\n{\n    ResponseInfo.ResponseID;\n    ResponseInfo.MediationAdapterClassName;\n    ResponseInfo.AdapterResponses;\n    ResponseInfo.LoadedAdapterResponseInfo;\n    ResponseInfo.ResponseExtras;\n    ResponseInfo.FullResponse;\n    // ...\n}\nvoid UYourClass::OnFailedToLoad(const FGoogleAdMobAdError&amp; LoadAdError, const FGoogleAdMobResponseInfo&amp; ResponseInfo)\n{\n    // ...\n}\n</code></pre> <p></p>"},{"location":"response-info/#response-info","title":"Response info","text":"<p>Here is a sample output returned by <code>FGoogleAdMobResponseInfo::FullResponse</code> showing the debugging data returned for a loaded ad:</p> <pre><code>{\n  \"Response ID\": \"COOllLGxlPoCFdAx4Aod-Q4A0g\",\n  \"Mediation Adapter Class Name\": \"com.google.ads.mediation.admob.AdMobAdapter\",\n  \"Adapter Responses\": [\n    {\n      \"Adapter\": \"com.google.ads.mediation.admob.AdMobAdapter\",\n      \"Latency\": 328,\n      \"Ad Source Name\": \"Reservation campaign\",\n      \"Ad Source ID\": \"7068401028668408324\",\n      \"Ad Source Instance Name\": \"[DO NOT EDIT] Publisher Test Interstitial\",\n      \"Ad Source Instance ID\": \"4665218928925097\",\n      \"Credentials\": {},\n      \"Ad Error\": \"null\"\n    }\n  ],\n  \"Loaded Adapter Response\": {\n    \"Adapter\": \"com.google.ads.mediation.admob.AdMobAdapter\",\n    \"Latency\": 328,\n    \"Ad Source Name\": \"Reservation campaign\",\n    \"Ad Source ID\": \"7068401028668408324\",\n    \"Ad Source Instance Name\": \"[DO NOT EDIT] Publisher Test Interstitial\",\n    \"Ad Source Instance ID\": \"4665218928925097\",\n    \"Credentials\": {},\n    \"Ad Error\": \"null\"\n  },\n  \"Response Extras\": {\n    \"mediation_group_name\": \"Campaign\"\n  }\n}\n</code></pre> <p>Properties on the <code>FGoogleAdMobResponseInfo</code> struct include:</p> Property Description AdapterResponses TArray of <code>FGoogleAdMobAdapterResponseInfo</code> containing metadata for each adapter included in the ad response. Can be used to debug the waterfall mediation and bidding execution. The order of the list matches the order of the mediation waterfall for this ad request.See Adapter Response Info for more information. LoadedAdapterResponseInfo A <code>FGoogleAdMobAdapterResponseInfo</code> struct corresponding to the adapter that loaded the ad. MediationAdapterClassName The mediation adapter class name of the ad network that loaded the ad. ResponseID The response identifier is a unique identifier for the ad response. This identifier can be used to identify and block the ad in the Ads Review Center (ARC). ResponseExtras <p>Beta</p><p>This API is in beta. Returned values can change without an SDK release.</p><p>TMap containing extra information about the ad response. Extras can return the following keys:</p><ul><li><code>mediation_group_name</code>: Name of the mediation group</li><li><code>mediation_ab_test_name</code>: Name of the mediation A/B test, if applicable</li><li><code>mediation_ab_test_variant</code>: Variant used in the mediation A/B test, if applicable</li></ul>"},{"location":"response-info/#adapter-response-info","title":"Adapter response info","text":"<p><code>FGoogleAdMobAdapterResponseInfo</code> contains metadata for each adapter included in the ad response, which can be used to debug the waterfall mediation and bidding execution. The order of the list matches the order of the mediation waterfall for the ad request.</p> <p>Here is a sample output returned by <code>FGoogleAdMobAdapterResponseInfo</code>:</p> <pre><code>{\n  \"Adapter\": \"com.google.ads.mediation.admob.AdMobAdapter\",\n  \"Latency\": 328,\n  \"Ad Source Name\": \"Reservation campaign\",\n  \"Ad Source ID\": \"7068401028668408324\",\n  \"Ad Source Instance Name\": \"[DO NOT EDIT] Publisher Test Interstitial\",\n  \"Ad Source Instance ID\": \"4665218928925097\",\n  \"Credentials\": {},\n  \"Ad Error\": \"null\"\n}\n</code></pre> <p>For each ad network, <code>FGoogleAdMobAdapterResponseInfo</code> provides the following properties:</p> Property Description AdError The error associated with the request to the network. Returns <code>null</code> if the network successfully loaded an ad or if the network was not attempted. AdSourceID The ad source ID associated with this adapter response. For campaigns, <code>6060308706800320801</code> is returned for a mediated ads campaign goal type, and <code>7068401028668408324</code> is returned for impression and click goal types. See Ad sources for the list of possible ad source IDs when an ad network serves the ad. AdSourceInstanceID The ad source instance ID associated with this adapter response. AdSourceInstanceName The ad source instance name associated with this adapter response. AdSourceName The ad source representing the specific ad network that serves the impression. For campaigns,<code>Mediated House Ads</code> is returned for a mediated ads campaign goal type, and <code>Reservation Campaign</code> is returned for impression and click goal types. See Ad sources for the list of possible ad source names when an ad network serves the ad. AdapterClassName The class name of the ad source adapter that loaded the ad. Credentials The ad source adapter credentials specified in the AdMob UI. LatencyMillis The amount of time the ad source adapter spent loading an ad. Returns 0 if the ad source was not attempted."},{"location":"ad-formats/app-open-ads/","title":"App open ads","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"ad-formats/app-open-ads/#app-open-ads","title":"App open ads","text":"<p>App open ads are a special ad format intended for publishers wishing to monetize their app load screens. App open ads can be closed by your users at any time. App open ads can be shown when users bring your app to the foreground.</p> <p>Note</p> <p>Specific format may vary by region.</p> <p>App open ads automatically show a small branding area so users know they're in your app. Here is an example of what an app open ad looks like:</p> <p></p>"},{"location":"ad-formats/app-open-ads/#prerequisites","title":"Prerequisites","text":"<p>Complete the Get Started guide.</p>"},{"location":"ad-formats/app-open-ads/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your AdMob account.</p> <p>The easiest way to load test ads is to use our dedicated test ad unit IDs for app open ads:</p> Android demo ad unit ID iOS demo ad unit ID ca-app-pub-3940256099942544/9257395921 ca-app-pub-3940256099942544/5575463023 <p>It's been specially configured to return test ads for every request, and you're free to use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.</p> <p>For more information about how the Mobile Ads SDK's test ads work, see Test Ads.</p>"},{"location":"ad-formats/app-open-ads/#implementation","title":"Implementation","text":"<p>At a high level, here are the steps required to implement app open ads:</p> <ol> <li>Load an ad some time before you need to display it.</li> <li>Show the add during app foregrounding events.</li> <li>Handle presentation callbacks.</li> </ol>"},{"location":"ad-formats/app-open-ads/#load-an-ad","title":"Load an ad","text":"<p>Your ad should show quickly, so it's best to load your ad before you need to display it. That way, you'll have an ad ready to go as soon as your user enters into your app. For example, you could immediately after Google AdMob SDK initialization, right after a previous ad has been shown, or if the ad fails to show.</p> <p>Note</p> <p>It's assumed you implement App Open Ad inside the class derived from <code>UPlatformGameInstance</code>.</p> C++Blueprints <p>Header:</p> <pre><code>class UGoogleAdMobAppOpenAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobAppOpenAd&gt; AppOpenAd;\n\nUFUNCTION()\nvoid LoadAppOpenAd();\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMobAppOpenAd.h\"\n#include \"GoogleAdMobAdError.h\"\n// ...\nAppOpenAd = NewObject&lt;UGoogleAdMobAppOpenAd&gt;(this);\nAppOpenAd-&gt;OnDismissed.AddUObject(this, &amp;UYourClass::LoadAppOpenAd);\nAppOpenAd-&gt;OnFailedToShow.AddLambda([this](const UGoogleAdMobAdError&amp; AdError)\n{\n    UE_LOG(LogTemp, Display, TEXT(\"App Open Ad failed to show with error: %s\"), *AdError.Message);\n    LoadAppOpenAd();\n});\nLoadAppOpenAd();\n// ...\nvoid UYourClass::LoadAppOpenAd()\n{\n#if PLATFORM_ANDROID\n    AppOpenAd-&gt;Load(\"ca-app-pub-3940256099942544/9257395921\");\n#elif PLATFORM_IOS\n    AppOpenAd-&gt;Load(\"ca-app-pub-3940256099942544/5575463023\");\n#endif\n}\n</code></pre> <p></p>"},{"location":"ad-formats/app-open-ads/#show-the-ad-during-app-foregrounding-events","title":"Show the ad during app foregrounding events","text":"<p>The next step is to show an app open ad. If no ad is available, attempt to load a new ad.</p> C++Blueprints <p>Header:</p> <pre><code>// ...\nUFUNCTION()\nvoid ShowAppOpenAd();\n</code></pre> <p>Source:</p> <pre><code>// ...\nApplicationHasEnteredForegroundDelegate.AddDynamic(this, &amp;UYourClass::ShowAppOpenAd);\n// ...\nvoid UYourClass::ShowAppOpenAd()\n{\n    if (AppOpenAd-&gt;IsReady())\n    {\n        AppOpenAd-&gt;Show();\n    }\n    else\n    {\n        LoadAppOpenAd();\n    }\n}\n</code></pre> <p></p> <p>Warning</p> <p>Take note that on Android devices dismissing fullscreen ads also triggers foreground entering event. Make sure you don't show app open ad right after interstitial or rewarded ad (for example, with an additional boolean variable).</p> <p>Note</p> <p>App open ads will time out after four hours. Ads rendered more than four hours after request time will no longer be valid and may not earn revenue. Checking the ad with <code>IsReady()</code> before showing it is usually enough, but you can also call <code>GetState()</code> and check whether the state of the ad is <code>Expired</code> or not.</p>"},{"location":"ad-formats/app-open-ads/#handle-presentation-callbacks","title":"Handle presentation callbacks","text":"<p>You can bind your functions and assign events to various delegates. The following are available for App Open Ad:</p> C++Blueprints <pre><code>#include \"GoogleAdMobAppOpenAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n#include \"GoogleAdMobAdError.h\"\n#include \"GoogleAdMobAdValue.h\"\n// ...\nAppOpenAd-&gt;OnLoaded.AddLambda([](const UGoogleAdMobResponseInfo&amp; ResponseInfo){});\nAppOpenAd-&gt;OnFailedToLoad.AddLambda([](const UGoogleAdMobAdError&amp; LoadAdError, const UGoogleAdMobResponseInfo&amp; ResponseInfo){});\nAppOpenAd-&gt;OnClicked.AddLambda([](){});\nAppOpenAd-&gt;OnImpression.AddLambda([](){});\nAppOpenAd-&gt;OnShown.AddLambda([](){});\nAppOpenAd-&gt;OnFailedToShow.AddLambda([](const UGoogleAdMobAdError&amp; AdError){});\nAppOpenAd-&gt;OnDismissed.AddLambda([](){});\nAppOpenAd-&gt;OnPaidEvent.AddLambda([](const UGoogleAdMobAdValue&amp; AdValue){});\n</code></pre> <p></p>"},{"location":"ad-formats/app-open-ads/#cold-starts-and-loading-screens","title":"Cold starts and loading screens","text":"<p>The documentation thus far assumes that you only show app open ads when users foreground your app when it is suspended in memory. \"Cold starts\" occur when your app is launched but was not previously suspended in memory.</p> <p>An example of a cold start is when a user opens your app for the first time. With cold starts, you won't have a previously loaded app open ad that's ready to be shown right away. The delay between when you request an ad and receive an ad back can create a situation where users are able to briefly use your app before being surprised by an out of context ad. This should be avoided because it is a bad user experience.</p> <p>The preferred way to use app open ads on cold starts is to use a loading screen to load your game or app assets, and to only show the ad from the loading screen. If your app has completed loading and has sent the user to the main content of your app, don't show the ad.</p>"},{"location":"ad-formats/app-open-ads/#best-practices","title":"Best practices","text":"<p>App open ads help you monetize your app's loading screen, when the app first launches and during app switches, but it's important to keep best practices in mind so that your users enjoy using your app. It's best to:</p> <ul> <li>Show your first app open ad after your users have used your app a few times.</li> <li>Show app open ads during times when your users would otherwise be waiting for your app to load.</li> <li>If you have a loading screen under the app open ad, and your loading screen completes loading before the ad is dismissed, you may want to dismiss your loading screen when the <code>OnDismissed</code> delegate is broadcast.</li> </ul>"},{"location":"ad-formats/app-open-ads/#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++</li> </ul>"},{"location":"ad-formats/banner-ads/","title":"Banner ads","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"ad-formats/banner-ads/#banner-ads","title":"Banner ads","text":"<p>Banner ads are rectangular ads that occupy a portion of an app's layout. Anchored adaptive banners are fixed aspect ratio ads that stay on screen while users are interacting with the app, either anchored at the top or bottom of the screen.</p>"},{"location":"ad-formats/banner-ads/#anchored-adaptive-banner","title":"Anchored adaptive banner","text":"<p>Anchored adaptive banner ads are fixed aspect ratio ads rather than the regular fixed size ads. The aspect ratio is similar to 320x50 industry standard. Once you specify the full width available, it returns an ad with optimal height for that width. The optimal height doesn't change across requests from the same device, and the surrounding views don't need to move when the ad refreshes.</p>"},{"location":"ad-formats/banner-ads/#collapsible-banner-ads","title":"Collapsible banner ads","text":"<p>Collapsible banner ads are banner ads that are initially presented as a larger overlay, with a button to collapse them to the originally requested banner size. Collapsible banner ads are intended to improve performance of anchored ads that are otherwise a smaller size. This guide shows how to turn on collapsible banner ads for existing banner placements.</p> <p></p>"},{"location":"ad-formats/banner-ads/#fixed-size-banner-ads","title":"Fixed size banner ads","text":"<p>The Google Mobile Ads SDK supports fixed ad sizes for situations where adaptive banners ads don't meet your needs.</p> <p>The following table lists the standard banner sizes.</p> Size in dp (WxH) Description Availability AdSize constant 320x50 Banner Phones and tablets BANNER 320x100 Large banner Phones and tablets LARGE_BANNER 320x250 IAB medium rectangle Phones and tablets MEDIUM_RECTANGLE 468x60 IAB full-size banner Tablets FULL_BANNER 728x90 IAB leaderboard Tablets LEADERBOARD"},{"location":"ad-formats/banner-ads/#prerequisites","title":"Prerequisites","text":"<p>Complete the Get Started guide.</p>"},{"location":"ad-formats/banner-ads/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your account.</p> <p>The easiest way to load test ads is to use dedicated test ad unit IDs for banners:</p> Ad format Android demo ad unit ID iOS demo ad unit ID Adaptive Banner ca-app-pub-3940256099942544/9214589741 ca-app-pub-3940256099942544/2435281174 Fixed Size Banner ca-app-pub-3940256099942544/6300978111 ca-app-pub-3940256099942544/2934735716 <p>It's been specially configured to return test ads for every request, and you can use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.</p> <p>For more information about how Google Mobile Ads SDK test ads work, see Enable test ads.</p>"},{"location":"ad-formats/banner-ads/#load-and-show-an-ad","title":"Load and show an ad","text":"<p>Create a <code>UGoogleAdMobBannerAd</code> object and then call <code>Load()</code> method on it. Choose a preferred banner size and if it's a collapsible banner ad. Bind a function to show the ad to the <code>OnLoaded</code> delegate to show it right after it's loaded.</p> <p>Note</p> <p>Collapsible banner ads are only supported for adaptive banner sizes.</p> C++Blueprints <p>Header:</p> <pre><code>class UGoogleAdMobBannerAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobBannerAd&gt; BannerAd;\n\nbool bIsShown = false;\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobBannerAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nBannerAd = NewObject&lt;UGoogleAdMobBannerAd&gt;(this);\nBannerAd-&gt;OnLoaded.AddLambda([this](const FGoogleAdMobResponseInfo&amp; ResponseInfo)\n{\n    if (bIsShown) return;\n    BannerAd-&gt;Show(BannerPosition);\n    bIsShown = true;\n});\n#if PLATFORM_ANDROID\nif (BannerSize == EGoogleAdMobBannerSize::Adaptive)\n    BannerAd-&gt;Load(\"ca-app-pub-3940256099942544/9214589741\", BannerSize, CollapsibleBannerPlacement);\nelse \n    BannerAd-&gt;Load(\"ca-app-pub-3940256099942544/6300978111\", BannerSize);\n#elif PLATFORM_IOS\nif (BannerSize == EGoogleAdMobBannerSize::Adaptive)\n    BannerAd-&gt;Load(\"ca-app-pub-3940256099942544/2435281174\", BannerSize, CollapsibleBannerPlacement);\nelse\n    BannerAd-&gt;Load(\"ca-app-pub-3940256099942544/2934735716\", BannerSize);\n#endif\n</code></pre> <p></p> <p>Note</p> <p><code>OnLoaded</code> delegate is broadcast not only when the banner ad is first loaded, but also each time it's refreshed.</p>"},{"location":"ad-formats/banner-ads/#refresh-an-ad","title":"Refresh an ad","text":"<p>If you configured your ad unit to refresh, you don't need to request another ad when the ad fails to load. Google Mobile Ads SDK respects any refresh rate you specified in the AdMob UI. If you haven't enabled refresh, issue a new request. For more details on ad unit refresh, such as setting a refresh rate, see Use automatic refresh for Banner ads.</p> <p>Note</p> <p>When setting a refresh rate in the AdMob UI, the automatic refresh occurs only if the banner is visible on screen.</p>"},{"location":"ad-formats/banner-ads/#hide-the-ad","title":"Hide the ad","text":"<p>You can hide an ad and show it later without having to reaload it. It doesn't release any resources and just removes the banner ad from the view.</p> C++Blueprints <pre><code>BannerAd-&gt;Hide();\n</code></pre> <p></p>"},{"location":"ad-formats/banner-ads/#release-an-ad-resource","title":"Release an ad resource","text":"<p>When you are finished using a banner ad, you can release the banner ad's resources. To do it, just call <code>Destroy()</code> method on the banner ad.</p> C++Blueprints <pre><code>// ...\nBannerAd-&gt;Destroy();\nbIsShown = false;\n// ...\n</code></pre> <p></p>"},{"location":"ad-formats/banner-ads/#ad-events","title":"Ad events","text":"<p>You can listen for a number of events in the ad's lifecycle, including loading, ad impression and click, as well as ad open and close events. It is recommended to bind to the delegates before loading the banner. </p> C++Blueprints <pre><code>#include \"GoogleAdMobBannerAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n#include \"GoogleAdMobAdError.h\"\n#include \"GoogleAdMobAdValue.h\"\n// ...\nBannerAd-&gt;OnLoaded.AddLambda([](const UGoogleAdMobResponseInfo&amp; ResponseInfo){});\nBannerAd-&gt;OnFailedToLoad.AddLambda([](const UGoogleAdMobAdError&amp; LoadAdError, const UGoogleAdMobResponseInfo&amp; ResponseInfo){});\nBannerAd-&gt;OnClicked.AddLambda([](){});\nBannerAd-&gt;OnImpression.AddLambda([](){});\nBannerAd-&gt;OnOpened.AddLambda([](){});\nBannerAd-&gt;OnClosed.AddLambda([](){});\nBannerAd-&gt;OnPaidEvent.AddLambda([](const UGoogleAdMobAdValue&amp; AdValue){});\n</code></pre> <p></p> Delegate Description OnLoaded The OnLoaded delegate is broadcast when an ad has finished loading. If you want to delay showing the ad until you're sure it will be loaded, for example, you can do so here. OnFailedToLoad The OnFailedToLoad delegate includes the LoadAdError parameter that describes what error occurred. For more information, refer to the Debugging Ad Load Errors documentation. OnClicked The OnClicked delegate is broadcast when a click is recorded for an ad. OnImpression The OnImpression delegate is broadcast when an impression is recorded for an ad. OnOpened The OnOpened delegate is broadcast when an ad opens an overlay that covers the screen. OnClosed The OnClosed delegate is broadcast when a user returns to the app after viewing an ad's destination URL. Your app can use it to resume suspended activities or perform any other work necessary to make itself ready for interaction. OnPaidEvent When an impression occurs, Google Mobile Ads SDK provides ad revenue data associated with that impression. You can use the data to calculate a user's lifetime value, or forward the data downstream to other relevant systems."},{"location":"ad-formats/banner-ads/#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++</li> </ul>"},{"location":"ad-formats/interstitial-ads/","title":"Interstitial ads","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"ad-formats/interstitial-ads/#interstitial-ads","title":"Interstitial ads","text":"<p>Interstitial ads are full-screen ads that cover the interface of their host app. They're typically displayed at natural transition points in the flow of an app, such as between activities or during the pause between levels in a game. When an app shows an interstitial ad, the user has the choice to either tap on the ad and continue to its destination or close it and return to the app.</p>"},{"location":"ad-formats/interstitial-ads/#prerequisites","title":"Prerequisites","text":"<p>Complete the Get Started guide.</p>"},{"location":"ad-formats/interstitial-ads/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your account.</p> <p>The easiest way to load test ads is to use our dedicated test ad unit ID for interstitials:</p> Android demo ad unit ID iOS demo ad unit ID ca-app-pub-3940256099942544/1033173712 ca-app-pub-3940256099942544/4411468910 <p>It's been specially configured to return test ads for every request, and you're free to use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.</p> <p>For more information about how Google Mobile Ads SDK test ads work, see Test Ads.</p>"},{"location":"ad-formats/interstitial-ads/#load-an-ad","title":"Load an ad","text":"<p>To load an interstitial ad, create an instance of <code>UGoogleAdMobInterstitialAd</code> class and call it's <code>Load()</code> method.</p> C++Blueprints <p>Header:</p> <pre><code>class UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMobInterstitialAd.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n#if PLATFORM_ANDROID\nInterstitialAd-&gt;Load(\"ca-app-pub-3940256099942544/1033173712\");\n#elif PLATFORM_IOS\nInterstitialAd-&gt;Load(\"ca-app-pub-3940256099942544/4411468910\");\n#endif\n</code></pre> <p></p> <p>Tip</p> <p>You can use ad load calls to build up a cache of preloaded ads before you intend to show them, so that ads can be shown with zero latency when needed. Since ads expire after an hour, you should clear this cache and reload with new ads every hour. You can see an example of how it can be implemented in the C++ sample project at the bottom of the page.</p>"},{"location":"ad-formats/interstitial-ads/#show-the-ad","title":"Show the ad","text":"<p>Interstitial ads should be displayed during natural pauses in the flow of an app. Between levels of a game is a good example, or after the user completes a task. To show an interstitial, use it's <code>Show()</code> method.</p> C++Blueprints <pre><code>if (InterstitialAd-&gt;IsReady())\n{\n    InterstitialAd-&gt;Show();\n}\n</code></pre> <p></p>"},{"location":"ad-formats/interstitial-ads/#ad-events","title":"Ad events","text":"<p>You can listen for a number of events in the ad's lifecycle, including loading, ad impression and click, as well as show and dismiss events. It is recommended to bind to the delegates before loading the interstitial.</p> C++Blueprints <pre><code>#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n#include \"GoogleAdMobAdError.h\"\n#include \"GoogleAdMobAdValue.h\"\n// ...\nInterstitialAd-&gt;OnLoaded.AddLambda([](const UGoogleAdMobResponseInfo&amp; ResponseInfo){});\nInterstitialAd-&gt;OnFailedToLoad.AddLambda([](const UGoogleAdMobAdError&amp; LoadAdError, const UGoogleAdMobResponseInfo&amp; ResponseInfo){});\nInterstitialAd-&gt;OnClicked.AddLambda([](){});\nInterstitialAd-&gt;OnImpression.AddLambda([](){});\nInterstitialAd-&gt;OnShown.AddLambda([](){});\nInterstitialAd-&gt;OnFailedToShow.AddLambda([](const UGoogleAdMobAdError&amp; AdError){});\nInterstitialAd-&gt;OnDismissed.AddLambda([](){});\nInterstitialAd-&gt;OnPaidEvent.AddLambda([](const UGoogleAdMobAdValue&amp; AdValue){});\n</code></pre> <p></p>"},{"location":"ad-formats/interstitial-ads/#some-best-practices","title":"Some best practices","text":""},{"location":"ad-formats/interstitial-ads/#consider-whether-interstitial-ads-are-the-right-type-of-ad-for-your-app","title":"Consider whether interstitial ads are the right type of ad for your app.","text":"<p>Interstitial ads work best in apps with natural transition points. The conclusion of a task within an app, like sharing an image or completing a game level, creates such a point. Make sure you consider at which points in your app's workflow you'll display interstitial ads and how the user is likely to respond.</p>"},{"location":"ad-formats/interstitial-ads/#remember-to-pause-the-action-when-displaying-an-interstitial-ad","title":"Remember to pause the action when displaying an interstitial ad.","text":"<p>There are a number of different types of interstitial ads: text, image, video, and more. It's important to make sure that when your app displays an interstitial ad, it also suspends its use of some resources to allow the ad to take advantage of them. For example, when you make the call to display an interstitial ad, be sure to pause any audio output being produced by your app.</p>"},{"location":"ad-formats/interstitial-ads/#allow-for-adequate-loading-time","title":"Allow for adequate loading time.","text":"<p>Just as it's important to make sure you display interstitial ads at an appropriate time, it's also important to make sure the user doesn't have to wait for them to load. Loading the ad in advance by calling <code>Load()</code> before you intend to call <code>Show()</code> can ensure that your app has a fully loaded interstitial ad at the ready when the time comes to display one.</p>"},{"location":"ad-formats/interstitial-ads/#dont-flood-the-user-with-ads","title":"Don't flood the user with ads.","text":"<p>While increasing the frequency of interstitial ads in your app might seem like a great way to increase revenue, it can also degrade the user experience and lower clickthrough rates. Make sure that users aren't so frequently interrupted that they're no longer able to enjoy the use of your app.</p>"},{"location":"ad-formats/interstitial-ads/#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++ </li> </ul>"},{"location":"ad-formats/rewarded-ads/","title":"Rewarded ads","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"ad-formats/rewarded-ads/#rewarded-ads","title":"Rewarded ads","text":"<p>Rewarded ads enable users to play games, take surveys, or watch videos to earn in-app rewards, such as coins, extra lives, or points. You can set different rewards for different ad units, and specify the reward values and items the user received.</p>"},{"location":"ad-formats/rewarded-ads/#prerequisites","title":"Prerequisites","text":"<p>Complete the Get Started guide.</p>"},{"location":"ad-formats/rewarded-ads/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your account.</p> <p>The easiest way to load test ads is to use our dedicated test ad unit ID for rewarded ads:</p> Android demo ad unit ID iOS demo ad unit ID ca-app-pub-3940256099942544/5224354917 ca-app-pub-3940256099942544/1712485313 <p>It's been specially configured to return test ads for every request, and you're free to use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.</p> <p>For more information about how Google Mobile Ads SDK test ads work, see Test Ads.</p>"},{"location":"ad-formats/rewarded-ads/#load-a-rewarded-ad-object","title":"Load a rewarded ad object","text":"<p>To load a rewarded ad, create an instance of <code>UGoogleAdMobRewardedAd</code> class and call it's <code>Load()</code> method.</p> C++Blueprints <p>Header:</p> <pre><code>class UGoogleAdMobRewardedAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobRewardedAd&gt; RewardedAd;\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMobRewardedAd.h\"\n// ...\nRewardedAd = NewObject&lt;UGoogleAdMobRewardedAd&gt;(this);\n#if PLATFORM_ANDROID\nRewardedAd-&gt;Load(\"ca-app-pub-3940256099942544/5224354917\");\n#elif PLATFORM_IOS\nRewardedAd-&gt;Load(\"ca-app-pub-3940256099942544/1712485313\");\n#endif\n</code></pre> <p></p> <p>Tip</p> <p>You can use ad load calls to build up a cache of preloaded ads before you intend to show them, so that ads can be shown with zero latency when needed. Since ads expire after an hour, you should clear this cache and reload with new ads every hour. You can see an example of how it can be implemented in the C++ sample project at the bottom of the page.</p>"},{"location":"ad-formats/rewarded-ads/#show-the-ad","title":"Show the ad","text":"<p>When you show a rewarded ad, you will use a <code>OnUserEarnedReward</code> delegate to handle reward events. To show a rewarded ad, use it's <code>Show()</code> method.</p> C++Blueprints <pre><code>RewardedAd-&gt;OnUserEarnedReward.AddLambda([](int32 RewardAmount, const FString&amp; RewardType)\n{\n    UE_LOG(LogTemp, Display, TEXT(\"User earned reward: %d %s\"), RewardAmount, *RewardType);\n});\nif (RewardedAd-&gt;IsReady())\n{\n    RewardedAd-&gt;Show();\n}\n</code></pre> <p></p>"},{"location":"ad-formats/rewarded-ads/#ad-events","title":"Ad events","text":"<p>You can listen for a number of events in the ad's lifecycle, including loading, ad impression and click, as well as show and dismiss events. But for the rewarded ad the most important is <code>OnUserEarnedReward</code>. It is recommended to bind to the delegates before loading the ad.</p> C++Blueprints <pre><code>#include \"GoogleAdMobRewardedAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n#include \"GoogleAdMobAdError.h\"\n#include \"GoogleAdMobAdValue.h\"\n// ...\nRewardedAd-&gt;OnLoaded.AddLambda([](const UGoogleAdMobResponseInfo&amp; ResponseInfo){});\nRewardedAd-&gt;OnFailedToLoad.AddLambda([](const UGoogleAdMobAdError&amp; LoadAdError, const UGoogleAdMobResponseInfo&amp; ResponseInfo){});\nRewardedAd-&gt;OnClicked.AddLambda([](){});\nRewardedAd-&gt;OnImpression.AddLambda([](){});\nRewardedAd-&gt;OnShown.AddLambda([](){});\nRewardedAd-&gt;OnFailedToShow.AddLambda([](const UGoogleAdMobAdError&amp; AdError){});\nRewardedAd-&gt;OnDismissed.AddLambda([](){});\nRewardedAd-&gt;OnPaidEvent.AddLambda([](const UGoogleAdMobAdValue&amp; AdValue){});\nRewardedAd-&gt;OnUserEarnedReward.AddLambda([](int32 RewardAmount, const FString&amp; RewardType){});\n</code></pre> <p></p>"},{"location":"ad-formats/rewarded-ads/#validate-server-side-verification-ssv-callbacks-optional","title":"Validate server-side verification (SSV) callbacks <code>(Optional)</code>","text":"<p>Apps that require extra data in server-side verification callbacks should use the custom data feature of rewarded ads. Any string value set on a rewarded ad object is passed to the <code>custom_data</code> query parameter of the SSV callback. If no custom data value is set, the <code>custom_data</code> query parameter value won't be present in the SSV callback.</p> C++Blueprints <pre><code>#include \"GoogleAdMobRewardedAd.h\"\n// ...\nRewardedAd-&gt;SetSSVCustomData(TEXT(\"CUSTOM_DATA_STRING\"));\n</code></pre> <p></p> <p>If you want to set the custom reward string, you must do so before showing the ad.</p> <p>Note</p> <p>The custom reward string is percent escaped and might require decoding when parsed from the SSV callback.</p>"},{"location":"ad-formats/rewarded-ads/#faq","title":"FAQ","text":""},{"location":"ad-formats/rewarded-ads/#is-there-a-timeout-for-the-initialization-call","title":"Is there a timeout for the initialization call?","text":"<p>After 10 seconds, Google Mobile Ads SDK invokes the <code>OnInitializationComplete</code> delegate even if a mediation network still hasn't completed initialization.</p>"},{"location":"ad-formats/rewarded-ads/#what-if-some-mediation-networks-arent-ready-when-i-get-the-initialization-callback","title":"What if some mediation networks aren't ready when I get the initialization callback?","text":"<p>Google recommends loading an ad inside the bound function of the <code>OnInitializationComplete</code> delegate. Even if a mediation network is not ready, Google Mobile Ads SDK still asks that network for an ad. So if a mediation network finishes initializing after the timeout, it can still service future ad requests in that session.</p>"},{"location":"ad-formats/rewarded-ads/#does-the-onuserearnedreward-delegate-always-get-called-before-the-ondismissed-delegate","title":"Does the <code>OnUserEarnedReward</code> delegate always get called before the <code>OnDismissed</code> delegate?","text":"<p>For Google ads, <code>OnUserEarnedReward</code> is broadcast before the <code>OnDismissed</code> delegate. For ads served through mediation, the third-party ad network SDK's implementation determines the broadcast order. For ad network SDKs that provide a single close callback with reward information, the mediation adapter invokes <code>OnUserEarnedReward</code> delegate before <code>OnDismissed</code>.</p>"},{"location":"ad-formats/rewarded-ads/#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++ </li> </ul>"},{"location":"ad-formats/rewarded-interstitial-ads/","title":"Rewarded interstitial ads","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"ad-formats/rewarded-interstitial-ads/#rewarded-interstitial-ads","title":"Rewarded interstitial ads","text":"<p>Rewarded interstitial is a type of incentivized ad format that lets you offer rewards for ads that appear automatically during natural app transitions. Unlike rewarded ads, users aren't required to opt in to view a rewarded interstitial.</p>"},{"location":"ad-formats/rewarded-interstitial-ads/#prerequisites","title":"Prerequisites","text":"<p>Complete the Get Started guide.</p>"},{"location":"ad-formats/rewarded-interstitial-ads/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your account.</p> <p>The easiest way to load test ads is to use our dedicated test ad unit ID for rewarded interstitial ads:</p> Android demo ad unit ID iOS demo ad unit ID ca-app-pub-3940256099942544/5354046379 ca-app-pub-3940256099942544/6978759866 <p>It's been specially configured to return test ads for every request, and you're free to use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.</p> <p>For more information about how Google Mobile Ads SDK test ads work, see Test Ads.</p>"},{"location":"ad-formats/rewarded-interstitial-ads/#load-an-ad","title":"Load an ad","text":"<p>Loading an ad is accomplished using the <code>Load()</code> method on the <code>UGoogleAdMobRewardedInterstitialAd</code>-derived object. The load method requires your ad unit ID.</p> C++Blueprints <p>Header:</p> <pre><code>class UGoogleAdMobRewardedInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobRewardedInterstitialAd&gt; RewardedInterstitialAd;\n</code></pre> <p>Source:</p> <pre><code>#include \"GoogleAdMobRewardedInterstitialAd.h\"\n// ...\nRewardedAd = NewObject&lt;UGoogleAdMobRewardedInterstitialAd&gt;(this);\n#if PLATFORM_ANDROID\nRewardedInterstitialAd-&gt;Load(\"ca-app-pub-3940256099942544/5354046379\");\n#elif PLATFORM_IOS\nRewardedInterstitialAd-&gt;Load(\"ca-app-pub-3940256099942544/6978759866\");\n#endif\n</code></pre> <p></p> <p>Tip</p> <p>You can use ad load calls to build up a cache of preloaded ads before you intend to show them, so that ads can be shown with zero latency when needed. Since ads expire after an hour, you should clear this cache and reload with new ads every hour. You can see an example of how it can be implemented in the C++ sample project at the bottom of the page.</p>"},{"location":"ad-formats/rewarded-interstitial-ads/#show-the-ad","title":"Show the ad","text":"<p>Note</p> <p>Before displaying a rewarded interstitial ad to users, you must present the user with an intro screen that provides clear reward messaging and an option to skip the ad before it starts. Learn more</p> <p>When you show a rewarded interstitial ad, you use a <code>OnUserEarnedReward</code> delegate to handle reward events. To show a rewarded interstitial ad, use it's <code>Show()</code> method.</p> C++Blueprints <pre><code>RewardedInterstitialAd-&gt;OnUserEarnedReward.AddLambda([](int32 RewardAmount, const FString&amp; RewardType)\n{\n    UE_LOG(LogTemp, Display, TEXT(\"User earned reward: %d %s\"), RewardAmount, *RewardType);\n});\nif (RewardedInterstitialAd-&gt;IsReady())\n{\n    RewardedInterstitialAd-&gt;Show();\n}\n</code></pre> <p></p>"},{"location":"ad-formats/rewarded-interstitial-ads/#ad-events","title":"Ad events","text":"<p>You can listen for a number of events in the ad's lifecycle, including loading, ad impression and click, as well as show and dismiss events. But for the rewarded interstitial ad the most important is <code>OnUserEarnedReward</code>. It is recommended to bind to the delegates before loading the ad.</p> C++Blueprints <pre><code>#include \"GoogleAdMobRewardedInterstitialAd.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n#include \"GoogleAdMobAdError.h\"\n#include \"GoogleAdMobAdValue.h\"\n// ...\nRewardedInterstitialAd-&gt;OnLoaded.AddLambda([](const UGoogleAdMobResponseInfo&amp; ResponseInfo){});\nRewardedInterstitialAd-&gt;OnFailedToLoad.AddLambda([](const UGoogleAdMobAdError&amp; LoadAdError, const UGoogleAdMobResponseInfo&amp; ResponseInfo){});\nRewardedInterstitialAd-&gt;OnClicked.AddLambda([](){});\nRewardedInterstitialAd-&gt;OnImpression.AddLambda([](){});\nRewardedInterstitialAd-&gt;OnShown.AddLambda([](){});\nRewardedInterstitialAd-&gt;OnFailedToShow.AddLambda([](const UGoogleAdMobAdError&amp; AdError){});\nRewardedInterstitialAd-&gt;OnDismissed.AddLambda([](){});\nRewardedInterstitialAd-&gt;OnPaidEvent.AddLambda([](const UGoogleAdMobAdValue&amp; AdValue){});\nRewardedInterstitialAd-&gt;OnUserEarnedReward.AddLambda([](int32 RewardAmount, const FString&amp; RewardType){});\n</code></pre> <p></p>"},{"location":"ad-formats/rewarded-interstitial-ads/#validate-server-side-verification-ssv-callbacks-optional","title":"Validate server-side verification (SSV) callbacks <code>(Optional)</code>","text":"<p>Apps that require extra data in server-side verification callbacks should use the custom data feature of rewarded ads. Any string value set on a rewarded ad object is passed to the <code>custom_data</code> query parameter of the SSV callback. If no custom data value is set, the <code>custom_data</code> query parameter value won't be present in the SSV callback.</p> C++Blueprints <pre><code>#include \"GoogleAdMobRewardedInterstitialAd.h\"\n// ...\nRewardedInterstitialAd-&gt;SetSSVCustomData(TEXT(\"CUSTOM_DATA_STRING\"));\n</code></pre> <p></p> <p>If you want to set the custom reward string, you must do so before showing the ad.</p> <p>Note</p> <p>The custom reward string is percent escaped and might require decoding when parsed from the SSV callback.</p>"},{"location":"ad-formats/rewarded-interstitial-ads/#sample-projects","title":"Sample projects","text":"<ul> <li>Blueprint</li> <li>C++ </li> </ul>"},{"location":"ad-inspector/launch-ad-inspector/","title":"Launch ad inspector","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"ad-inspector/launch-ad-inspector/#launch-ad-inspector","title":"Launch ad inspector","text":"<p>Before you test your ad integration, you must launch ad inspector in your app. This page covers how to launch ad inspector using gestures and how to launch programmatically.</p>"},{"location":"ad-inspector/launch-ad-inspector/#prerequisites","title":"Prerequisites","text":"<p>Before you continue, do the following:</p> <ul> <li>Complete all items in the initial Prerequisites to create an AdMob account, set your test device, initialize Google Mobile Ads SDK, and install the latest version.</li> </ul>"},{"location":"ad-inspector/launch-ad-inspector/#choose-a-launch-option","title":"Choose a launch option","text":"<p>You can launch ad inspector in the following ways:</p> <ul> <li>Use the gesture you selected in the AdMob UI after registering a test device. For details, see Set up a test device.</li> <li>Programmatically through the Google Mobile Ads SDK.</li> </ul>"},{"location":"ad-inspector/launch-ad-inspector/#launch-using-gestures","title":"Launch using gestures","text":"<p>To launch ad inspector with a gesture, perform the gesture, such as a double flick or shake, that you configured in AdMob UI for your test device. For more details, see Test your app with ad inspector.</p> <p>After you set a gesture in the AdMob UI, allow time to propagate. Make an ad request through the Google Mobile Ads SDK to register your gesture setting with your test device. If performing your gesture fails to open in ad inspector, try to load an ad, restart your app, and test the gesture again.</p>"},{"location":"ad-inspector/launch-ad-inspector/#launch-programmatically","title":"Launch programmatically","text":"<p>Launch ad inspector by running the following:</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobAdError.h\"\n// ...\nUGoogleAdMob::OnAdInspectorClosed.AddLambda([](){});\nUGoogleAdMob::OnAdInspectorFailure.AddLambda([](const FGoogleAdMobAdError&amp; AdInspectorFailure){});\nUGoogleAdMob::OpenAdInspector();\n</code></pre> <p></p> <p>This method works for test devices registered programmatically or in the AdMob UI. For more details, see Enable test devices.</p>"},{"location":"advanced/global-settings/","title":"Global settings","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"advanced/global-settings/#global-settings","title":"Global settings","text":""},{"location":"advanced/global-settings/#video-ad-volume-control","title":"Video ad volume control","text":"<p>If your app has its own volume controls (such as custom music or sound effect volumes), disclosing app volume to Google Mobile Ads SDK allows video ads to respect app volume settings. This ensures users receive video ads with the expected audio volume.</p> <p>The device volume, controlled through volume buttons or OS-level volume slider, determines the volume for device audio output. However, apps can independently adjust volume levels relative to the device volume to tailor the audio experience. For app open, banner, interstitial, rewarded, and rewarded interstitial ad formats, you can report the relative app volume to the SDK through the static <code>UGoogleAdMob::SetAppVolume()</code> function. Valid ad volume values range from <code>0.0</code> (silent) to <code>1.0</code> (current device volume). Here's an example of how to report the relative app volume to the SDK:</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::SetAppVolume(0.5f);\n</code></pre> <p></p> <p>To inform the SDK that the app volume has muted, use the <code>UGoogleAdMob::SetAppMuted()</code> function:</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::SetAppMuted(true);\n</code></pre> <p></p> <p>By default, the app volume is set to <code>1</code> (the current device volume), and the app is not muted.</p> <p>Note</p> <p>Video ads that are ineligible to be shown with muted audio are not returned for ad requests made when the app volume is reported as muted or set to a value of 0. This may restrict a subset of the broader video ads pool from serving.</p>"},{"location":"advanced/global-settings/#consent-for-cookies","title":"Consent for cookies","text":"<p>If your app has special requirements, you can set the optional <code>gad_has_consent_for_cookies</code> preference. The SDK will enable limited ads (LTD) when the <code>gad_has_consent_for_cookies</code> preference is set to false.</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::SetConsentForCookies(false);\n</code></pre> <p></p>"},{"location":"advanced/global-settings/#crash-reporting-ios-only","title":"Crash reporting <code>(iOS only)</code>","text":"<p>Google Mobile Ads SDK inspects exceptions that occur in an iOS app and records them if they were caused by the SDK. These exceptions are then addressed in future SDK versions.</p> <p>Crash reporting is enabled by default. If you don't want SDK-related exceptions to be recorded, you can disable this feature by setting <code>Disable SDK Crash Reporting</code> in Project Settings to true.</p>"},{"location":"advanced/impression-level-ad-revenue/","title":"Impression level ad revenue","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"advanced/impression-level-ad-revenue/#impression-level-ad-revenue","title":"Impression-level ad revenue","text":"<p>When an impression occurs, Google Mobile Ads SDK provides ad revenue data associated with that impression. You can use the data to calculate a user's lifetime value, or forward the data downstream to other relevant systems.</p>"},{"location":"advanced/impression-level-ad-revenue/#prerequisites","title":"Prerequisites","text":"<ul> <li>Make sure you have turned on the impression-level ad revenue feature in the AdMob UI.</li> <li>Complete theGet Started guide.</li> <li> <p>Before you can receive any impression-level ad revenue, you need to implement at least one ad format:</p> <ul> <li>App open</li> <li>Banner</li> <li>Interstitial</li> <li>Rewarded</li> <li>Rewarded interstitial</li> </ul> </li> </ul>"},{"location":"advanced/impression-level-ad-revenue/#paid-event-delegate","title":"Paid event delegate","text":"<p>Each ad format has an <code>OnPaidEvent</code> delegate. During the lifecycle of an ad event, Google Mobile Ads SDK monitors impression events and broadcasts the delegate with an earned value.</p> C++Blueprints <pre><code>#include \"GoogleAdMobAdValue.h\"\n// ...\nAd-&gt;OnPaidEvent.AddLambda([](const FGoogleAdMobAdValue&amp; AdValue)\n{\n    AdValue.ValueMicros;\n    AdValue.PrecisionType;\n    AdValue.Domain; // Currency Code\n});\n</code></pre> <p></p>"},{"location":"advanced/impression-level-ad-revenue/#advalue","title":"AdValue","text":"<p><code>UGoogleAdMobAdValue</code> is a struct that represents the monetary value earned for an ad, including the value's currency code and its precision type encoded as follows.</p> <p>Note</p> <p><code>ValueMicros</code> property represents the value of the ad in micro units. For example, a <code>ValueMicros</code> value of 5,000 means the ad is estimated to be worth $0.005.</p> PrecisionType Description <code>Unknown</code> An ad value that's unknown. This gets returned when LTV pingback is enabled but there isn't enough data available. <code>Estimated</code> An ad value estimated from aggregated data. <code>PublisherProvided</code> A publisher provided ad value, such as manual CPMs in a mediation group. <code>Precise</code> The precise value paid for this ad. <p>In the case of AdMob Mediation, AdMob tries to provide an <code>Estimated</code> value for ad sources that are optimized.</p> <p>For non-optimized ad sources, or in cases where there aren't enough aggregated data to report a meaningful estimation, the <code>PublisherProvided</code> value is returned.</p>"},{"location":"advanced/impression-level-ad-revenue/#test-impressions-from-bidding-ad-sources","title":"Test impressions from bidding ad sources","text":"<p>After an impression-level ad revenue event occurs for a bidding ad source through a test request, you receive only the following values:</p> <ul> <li><code>Unknown</code>: indicates the precision type.</li> <li><code>0</code>: indicates the ad value.</li> </ul> <p>Previously, you might have seen the precision type as a value other than <code>Unknown</code> and an ad value more than <code>0</code>.</p> <p>For details on sending a test ad request, see Enable test devices.</p>"},{"location":"advanced/targeting/","title":"Targeting","text":"<p>If you like this plugin, please, rate it on Fab. Thank you!</p>"},{"location":"advanced/targeting/#targeting","title":"Targeting","text":"<p>This guide explains how to provide targeting information to the Google Mobile Ads SDK.</p>"},{"location":"advanced/targeting/#prerequisite","title":"Prerequisite","text":"<ul> <li>Complete the Get Started guide.</li> </ul>"},{"location":"advanced/targeting/#child-directed-setting","title":"Child-directed setting","text":"<p>For purposes of the Children's Online Privacy Protection Act (COPPA), there is a setting called \"tag for child-directed treatment\". By setting this tag, you certify that this notification is accurate and you are authorized to act on behalf of the owner of the app. You understand that abuse of this setting may result in termination of your Google account.</p> <p>As an app developer, you can indicate whether you want Google to treat your content as child-directed when you make an ad request. If you indicate that you want Google to treat your content as child-directed, we take steps to disable IBA and remarketing ads on that ad request.</p> <p></p> <ul> <li>Choose <code>TAG_FOR_CHILD_DIRECTED_TREATMENT_TRUE</code> to indicate that you want your content treated as child-directed for purposes of COPPA. This prevents the transmission of the Android advertising identifier (AAID) and Advertising Identifier, IDFA on iOS.</li> <li>Choose <code>TAG_FOR_CHILD_DIRECTED_TREATMENT_FALSE</code> to indicate that you don't want your content treated as child-directed for purposes of COPPA.</li> <li>Choose <code>TAG_FOR_CHILD_DIRECTED_TREATMENT_UNSPECIFIED</code> if you don't want to indicate how you would like your content treated with respect to COPPA in ad requests.</li> </ul> <p>You can also change the default value set in Project Setting at runtime by calling <code>UGoogleAdMob::SetTagForChildDirectedTreatment()</code> function.</p> <p>Note</p> <p>Apps in the Designed For Families Program as Primarily child-directed apps and users signed into Google accounts managed with Family Link automatically have all content treated as child-directed for all ad requests.</p>"},{"location":"advanced/targeting/#users-under-the-age-of-consent","title":"Users under the age of consent","text":"<p>You can mark your ad requests to receive treatment for users in the European Economic Area (EEA) under the age of consent. This feature is designed to help facilitate compliance with the General Data Protection Regulation (GDPR). Note that you may have other legal obligations under GDPR. Review European Union guidance and consult with your own legal counsel. Note that Google's tools are designed to facilitate compliance and don't relieve any particular publisher of its obligations under the law. Learn more about how the GDPR affects publishers.</p> <p>When using this feature, a Tag For Users under the Age of Consent in Europe (TFUA) parameter is included in the ad request. This parameter disables personalized advertising, including remarketing, for all ad requests. It also disables requests to third-party ad vendors, such as ad measurement pixels and third-party ad servers.</p> <p></p> <ul> <li>Choose <code>TAG_FOR_UNDER_AGE_OF_CONSENT_TRUE</code> to indicate that you want the ad request to receive treatment for users in the European Economic Area (EEA) under the age of consent. This also prevents the transmission of the Android advertising identifier (AAID) and Advertising Identifier, IDFA on iOS.</li> <li>Choose <code>TAG_FOR_UNDER_AGE_OF_CONSENT_FALSE</code> to indicate that you want the ad request to not receive treatment for users in the European Economic Area (EEA) under the age of consent.</li> <li>Choose <code>TAG_FOR_UNDER_AGE_OF_CONSENT_UNSPECIFIED</code> to indicate that you have not specified whether the ad request should receive treatment for users in the European Economic Area (EEA) under the age of consent.</li> </ul> <p>You can also change the default value set in Project Setting at runtime by calling <code>UGoogleAdMob::SetTagForUnderAgeOfConsent()</code> function.</p> <p>Note</p> <p>The tags to enable the Child-directed setting and <code>TagForUnderAgeOfConsent</code> should not both simultaneously be set to <code>true</code>. If they are, the child-directed setting takes precedence.</p>"},{"location":"advanced/targeting/#ad-content-filtering","title":"Ad content filtering","text":"<p>To comply with Google Play's Inappropriate Ads Policy that includes associated offers within an ad, all ads and their associated offers shown within your app must be appropriate for the content rating of your app, even if the content by itself is otherwise compliant with Google Play's policies.</p> <p>Tools like maximum ad content rating can help you have more control over the content of the ads shown to your users. You can set a maximum content rating to help compliance with platform policies.</p> <p>AdMob ads returned when this is configured have a content rating at or below that level. The possible values for this network extra are based on digital content label classifications, and must be one of the following strings:</p> <ul> <li><code>MAX_AD_CONTENT_RATING_G</code></li> <li><code>MAX_AD_CONTENT_RATING_PG</code></li> <li><code>MAX_AD_CONTENT_RATING_T</code></li> <li><code>MAX_AD_CONTENT_RATING_MA</code></li> </ul> <p></p> <p>You can also change the default value set in Project Setting at runtime by calling <code>UGoogleAdMob::SetMaxAdContentRating()</code> function.</p> <p>Learn more about setting the maximum ad content rating for an app or account.</p> <p>Note</p> <p>Content rating filter settings specified through Google Mobile Ads SDK override any settings configured using the AdMob UI.</p> <p>Tip</p> <p>It's recommended to leave this setting with the <code>MAX_AD_CONTENT_RATING_UNSPECIFIED</code> value, because it will be possible to change it anytime later using the AdMob UI, and the setting in <code>Project Settings</code>, on the opposite, is hardcoded and cannot be changed after the project is packaged.</p>"},{"location":"advanced/targeting/#publisher-privacy-treatment-beta","title":"Publisher Privacy Treatment (Beta)","text":"<p>The Publisher Privacy Treatment (PPT) API is an optional tool that lets apps indicate whether to turn off ads personalization for all ad requests. When using this feature, a publisher privacy treatment (PPT) parameter is included in all future ad requests for the remainder of the session.</p> <p></p> <p>You can also change the default value set in Project Setting at runtime by calling <code>UGoogleAdMob::SetPublisherPrivacyPersonalizationState()</code> function.</p> <p>Note</p> <p>For ad requests with multiple user privacy signals, the most restrictive signal will take precedence. See the Publisher Privacy Treatment API documentation for specific examples.</p>"},{"location":"advanced/targeting/#content-url","title":"Content URL","text":"<p>When requesting an ad, apps can pass the URL of the content they are serving. This enables keyword targeting to match the ad with the content.</p> <p>For example, if your app is requesting an ad while showing content from https://www.example.com, you can pass this URL to target relevant keywords:</p> C++Blueprints <pre><code>InterstitialAd-&gt;Load(InterstitialAdUnitId, TEXT(\"https://www.example.com\"));\n</code></pre> <p></p>"}]}