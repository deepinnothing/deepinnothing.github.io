{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get started","text":"<p>This get started guide will walk you through integrating the Google Mobile Ads into your Unreal project, and then displaying your first ad with it! Here we will focus on an interstitial ad, but detailed guides on implementing different ad formats will be linked at the bottom of the page.</p>"},{"location":"#set-up-your-app-in-your-admob-account","title":"Set up your app in your AdMob account","text":"<p>Register your app as an AdMob app by completing the following steps:</p> <ol> <li>Sign in to or sign up for an AdMob account.</li> <li>Register your app with AdMob. This step creates an AdMob app with a unique AdMob App ID that is needed later in this guide.</li> </ol>"},{"location":"#configure-your-project","title":"Configure your project","text":""},{"location":"#enable-the-plugin","title":"Enable the plugin","text":"<p>The plugin is typically enabled by default upon installation. However, if it's not, follow these steps:</p> <ol> <li>Navigate to Edit &gt; Plugins in Unreal Engine.</li> <li>Search for <code>Google AdMob</code> in the plugin list.</li> <li>If the plugin is disabled, enable it by checking the corresponding box.</li> </ol>"},{"location":"#disable-build-in-admob-support-for-ads","title":"Disable build-in AdMob support for ads","text":"<p>To avoid any compatibility issues and library conflicts, disable build-in AdMob support. Inside Project Settings, go to Platforms &gt; Android &gt; Google Play Services and set <code>Include AdMob support for ads</code> to <code>false</code>.</p> <p></p>"},{"location":"#enter-your-app-ids-in-project-settings","title":"Enter your App IDs in Project Settings","text":"<ol> <li>Copy your AdMob app ID, as identified in the AdMob web interface. You'll need to separate AdMob apps for Android and iOS, i.e. two different App IDs for these platforms.</li> <li>Open Project Settings &gt; Plugins &gt; Google AdMob in Unreal Engine, and paste the copied values into the corresponding AdMob App ID fields.</li> </ol>"},{"location":"#enable-automatic-sdk-initialization","title":"Enable automatic SDK initialization","text":"<p>Typically, you would want manual control over Privacy &amp; Messaging in your game (it's even required in some cases!), but for this tutorial we are going to ask plugin to attempt initializing Google AdMob SDK automatically at game's start-up. Once again, go to Project Settings &gt; Plugins &gt; Google AdMob, and set the <code>Enable automatic SDK initialization on startup</code> field to <code>true</code> (it's disabled be default).</p> <p></p>"},{"location":"#add-dependency-to-your-modules-c-projects","title":"Add dependency to your modules <code>(C++ projects)</code>","text":"<p>To use the plugin in your C++ code, you must include <code>GoogleAdMob</code> as either a public or private dependency in your module's build configuration, for example: <pre><code>PrivateDependencyModuleNames.Add(\"GoogleAdMob\");\n</code></pre></p>"},{"location":"#implement-your-first-ad","title":"Implement your first ad","text":"<p>Now you're ready to add your first interstitial ad to your game! Follow the steps below to make it a reality!</p> <ol> <li> <p>Create an interstitial ad object and store it in a variable. In Blueprints, add a <code>Construct Object from Class</code> node and choose UGoogleAdMobInterstitialAd as a class to create the object from. Think of it as a communication interface between your Unreal project and Google AdMob.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n</code></pre> <p></p> <p>Tip</p> <p>It's generally recommended to keep your ads in a class/blueprint derived from PlatformGameInstance, as they often need to persist between levels.</p> </li> <li> <p>Check if ads can be requested. Before loading any ads, you should first check if the consent has been gathered from a user using the <code>UGoogleAdMob::CanRequestAds()</code> function.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    // ...\n}\n</code></pre> <p></p> </li> <li> <p>Bind an event to the ad being loaded. Prior to loading the ad, you should also bind some event to the <code>OnLoaded</code> multicast delegate, so that you know when your ad is loaded and is ready to be shown.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddLambda([](const FGoogleAdMobResponseInfo&amp; ResponseInfo){});\n}\n</code></pre> <p></p> </li> <li> <p>Load the ad. Now you can finally load your ad by calling <code>UGoogleAdMobInterstitialAd::Load(const FString&amp; AdUnitID)</code> function! Just remember that the function must be called on the created ad object (i.e. the function won't appear in Blueprints unless the context menu is shown after dragging the pin from this object), and that there are two different Ad Unit IDs for Android and iOS.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddLambda([](const FGoogleAdMobResponseInfo&amp; ResponseInfo){});\n#if PLATFORM_ANDROID\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/1033173712\"));\n#elif PLATFORM_IOS\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/4411468910\"));\n#endif\n}\n</code></pre> <p></p> </li> <li> <p>Show your interstitial ad. The last step here is obviously showing your ad when it's loaded. Just call <code>UGoogleAdMobInterstitialAd::Show()</code> when the <code>OnLoaded</code> delegate is broadcast, and you're done!</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddLambda(\n        [InterstitialAd](const FGoogleAdMobResponseInfo&amp; ResponseInfo)\n        {\n            InterstitialAd-&gt;Show();\n        }\n    );\n#if PLATFORM_ANDROID\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/1033173712\"));\n#elif PLATFORM_IOS\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/4411468910\"));\n#endif\n}\n</code></pre> <p></p> </li> </ol> <p>Congratilations! You've successfully loaded your first interstitial ad! It might seem a bit overwhelming at first, but once you get it, this plugin will become a powerful tool in your developer hands, and will help you implement a robust mobile ad system in your game. Go on and check out what other features it has to offer!</p>"},{"location":"enable-test-ads/","title":"Enable test ads","text":"<p>This guide explains how to enable test ads in your ads integration. It's important to enable test ads during development so that you can click them without charging Google advertisers. If you click too many ads without being in test mode, you risk your account being flagged for invalid activity.</p> <p>There are two ways to get test ads:</p> <ol> <li>Use one of Google's demo ad units.</li> <li>Use your own ad unit and enable test devices.</li> </ol>"},{"location":"enable-test-ads/#demo-ad-units","title":"Demo ad units","text":"<p>The quickest way to enable testing is to use Google-provided demo ad units. These ad units are not associated with your AdMob account, so there's no risk of your account generating invalid traffic when using these ad units.</p> <p>Warning</p> <p>Make sure you replace these IDs with your own ad unit ID before publishing your game.</p> <p>Here are demo ad units that point to specific test creatives for each format:</p> Ad format iOS demo ad unit ID Android demo ad unit ID App Open ca-app-pub-3940256099942544/5575463023 ca-app-pub-3940256099942544/9257395921 Adaptive Banner ca-app-pub-3940256099942544/2435281174 ca-app-pub-3940256099942544/9214589741 Fixed Size Banner ca-app-pub-3940256099942544/2934735716 ca-app-pub-3940256099942544/6300978111 Interstitial ca-app-pub-3940256099942544/4411468910 ca-app-pub-3940256099942544/1033173712 Rewarded Ads ca-app-pub-3940256099942544/1712485313 ca-app-pub-3940256099942544/5224354917 Rewarded Interstitial ca-app-pub-3940256099942544/6978759866 ca-app-pub-3940256099942544/5354046379 Native ca-app-pub-3940256099942544/3986624511 ca-app-pub-3940256099942544/2247696110 Native Video ca-app-pub-3940256099942544/2521693316 ca-app-pub-3940256099942544/1044960115"},{"location":"enable-test-ads/#enable-test-devices","title":"Enable test devices","text":"<p>If you want to do more rigorous testing with production-looking ads, you can configure your device as a test device and use your own ad unit IDs that you've created in the AdMob UI. Test devices can either be added in the AdMob UI or programmatically using the plugin settings.</p> <p>Follow the steps below to add your device as a test device.</p> <p>Note</p> <p>Android emulators and iOS simulators are automatically configured as test devices.</p>"},{"location":"enable-test-ads/#add-your-test-device-in-the-admob-ui","title":"Add your test device in the AdMob UI","text":"<p>For a non-programmatic way to add a test device and test new or existing app builds, use the AdMob UI. Learn how.</p> <p>Note</p> <p>New test devices typically start serving test ads in your app within 15 minutes, but it can also take up to 24 hours.</p>"},{"location":"enable-test-ads/#add-your-test-device-programmatically","title":"Add your test device programmatically","text":"<p>To register your test device, complete the following steps:</p> <ol> <li>Run your game on a device of your choice (iOS or Android), and make an ad request.</li> <li> <p>Check the log output of your device for a message similar to the following examples, which shows your device ID:</p> <ul> <li> <p>iOS: </p> <pre><code>&lt;Google&gt; To get test ads on this device, set:\nGADMobileAds.sharedInstance.requestConfiguration.testDeviceIdentifiers =\n@[ @\"2077ef9a63d2b398840261c8221a0c9b\" ];\n</code></pre> </li> <li> <p>Android: </p> <pre><code>I/Ads: Use RequestConfiguration.Builder.setTestDeviceIds(Arrays.asList(\"33BE2250B43518CCDA7DE426D04EE231\")) \nto get test ads on this device.\n</code></pre> </li> </ul> </li> <li> <p>Copy your test device ID to your clipboard.</p> </li> <li> <p>Go to Project Settings &gt; Plugins &gt; Google AdMob and paste the copied device ID into the appropriate Test Device IDs array:</p> <p></p> </li> </ol> <p>Warning</p> <p>Be sure to remove the code that sets these test devices before you release your game.</p> <ol> <li> <p>Rebuild your project and run it again. If the ad is a Google ad, you'll see a Test mode label centered at the top of the ad (banner, interstitial, or rewarded ad):</p> <p></p> </li> </ol>"},{"location":"enable-test-ads/#testing-with-mediation","title":"Testing with mediation","text":"<p>Google's demo ad units only show Google ads. To test your mediation configuration, you must use the enable test devices approach.</p> <p>Mediated ads do not render a Test mode label. You are responsible for ensuring that test mode is enabled for each of your mediation networks so that these networks don't flag your account for invalid activity. See each network's respective mediation guide for more information.</p> <p>If you aren't sure whether a mediation ad network adapter provides a test mode, it is safest to avoid clicking on ads from that network during development. You can use the <code>FGoogleAdMobResponseInfo::MediationAdapterClassName</code> property on any of the ad formats to figure out which ad network served the current ad.</p>"},{"location":"user-messaging-platform/","title":"User Messaging Platform (UMP)","text":"<p>Before you can show any ads to your users, you have to ask for their consent. Ideally, it should be done at game's start-up before initializing AdMob SDK. The Google User Messaging Platform (UMP) is a privacy and messaging tool to help you manage privacy choices. For more information, see About Privacy &amp; messaging. </p> <p>Automatic SDK initialization does most of the steps described below automatically, but manual set-up should be a preferred option.</p>"},{"location":"user-messaging-platform/#before-you-start","title":"Before you start","text":"<p>Complete the following steps described in the Get Started guide:</p> <ul> <li>Set up your app in your AdMob account.</li> <li>Configure your project.</li> </ul>"},{"location":"user-messaging-platform/#create-a-message-type","title":"Create a message type","text":"<p>Create user messages with one of the Available user message types under the Privacy &amp; messaging tab of your AdMob account. The UMP SDK attempts to display a privacy message created from the AdMob Application ID set in your project.</p>"},{"location":"user-messaging-platform/#get-the-users-consent-information","title":"Get the user's consent information","text":"<p>You should request an update of the user's consent information at every app launch, using <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>. This request checks the following:</p> <ul> <li>Whether consent is required. For example, consent is required for the first time, or the previous consent decision expired.</li> <li>Whether a privacy options entry point is required. Some privacy messages require apps to allow users to modify their privacy options at any time.</li> </ul> <p>Tip</p> <p>It's highly recommended you do your UMP and initialization logic inside the <code>Init()</code> function of the <code>UPlatformGameInstance</code> derived class, as game instance persists between levels and its <code>Init()</code> function gets executed before any other game logic.</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::OnRequestConsentInfoUpdateSuccess.AddLambda([](){});\nUGoogleAdMob::OnRequestConsentInfoUpdateFailure.AddLambda(\n    []\n    (const int32 ErrorCode, const FString&amp; ErrorMessage)\n    {}\n);\nUGoogleAdMob::RequestConsentInfoUpdate();\n</code></pre> <p></p>"},{"location":"user-messaging-platform/#load-and-present-the-privacy-message-form","title":"Load and present the privacy message form","text":"<p>After you have received the most up-to-date consent status, call <code>UGoogleAdMob::LoadAndShowConsentFormIfRequired()</code> to load any forms required to collect user consent. After loading, the forms present immediately.</p> <p>Info</p> <p>If no privacy message forms require collection of user consent prior to requesting ads, the callback is invoked immediately.</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::OnConsentFormDismissed.AddLambda([](){});\nUGoogleAdMob::OnConsentFormDismissedWithError.AddLambda(\n    []\n    (const int32 ErrorCode, const FString&amp; ErrorMessage)\n    {}\n);\nUGoogleAdMob::LoadAndShowConsentFormIfRequired();\n</code></pre> <p></p>"},{"location":"user-messaging-platform/#privacy-options","title":"Privacy options","text":"<p>Some privacy message forms are presented from a publisher-rendered privacy options entry point, letting users manage their privacy options at any time. To learn more about which message your users see at the privacy options entry point, see Available user message types.</p> <p>After you have called <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>, get privacy options requirement status with <code>UGoogleAdMob::ArePrivacyOptionsRequired()</code> function to determine if a privacy options entry point is required for your app. If an entry point is required, add a visible and interactable UI element to your game that presents the privacy options form (UMG button in options menu, for example). If a privacy entry point is not required, configure your UI element to be not visible and interactable.</p> C++Blueprints <pre><code>#include \"Components/Widget.h\"\n#include \"GoogleAdMob.h\"\n// ...\nif (UGoogleAdMob::ArePrivacyOptionsRequired()) \n{\n    PrivacyOptionsButton-&gt;SetVisibility(ESlateVisiblity::Visible);\n}\nelse\n{\n    PrivacyOptionsButton-&gt;SetVisibility(ESlateVisibility::Collapsed);\n}\n</code></pre> <p></p> <p>When the user interacts with your element, present the privacy options form:</p> C++Blueprints <pre><code>#include \"Components/Button.h\"\n#include \"GoogleAdMob.h\"\n// ...\nPrivacyOptionsButton-&gt;OnClicked.AddLambda([]()\n    {   \n        UGoogleAdMob::OnConsentFormDismissed.AddLambda([]()\n            {\n                //... \n            }\n        );\n        UGoogleAdMob::OnConsentFormDismissedWithError.AddLambda([](const int32 ErrorCode, const FString&amp; ErrorMessage)\n            {\n                //...\n            }\n        );\n        UGoogleAdMob::ShowPrivacyOptionsForm();\n    }\n);\n</code></pre> <p></p> <p>Note</p> <p>Same delegates are used for <code>UGoogleAdMob::LoadAndShowConsentFormIfRequired()</code> and <code>UGoogleAdMob::ShowPrivacyOptionsForm()</code> functions.</p>"},{"location":"user-messaging-platform/#request-ads-with-user-consent","title":"Request ads with user consent","text":"<p>Before requesting ads, use <code>UGoogleAdMob::CanRequestAds()</code> to check if you've obtained consent from the user.</p> <p>Listed are the following places to check if you can request ads while gathering consent:</p> <ul> <li>After the UMP SDK gathers consent in the current session.</li> <li>Immediately after you have called <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>. The UMP SDK might have obtained consent in the previous app session.</li> </ul> <p>Warning</p> <p><code>UGoogleAdMob::CanRequestAds()</code> always returns false until you have called <code>UGoogleAdMob::RequestConsentInfoUpdate()</code></p> <p>If an error occurs during the consent gathering process, check if you can request ads. The UMP SDK uses the consent status from the previous app session.</p>"},{"location":"user-messaging-platform/#prevent-redundant-ad-request-work","title":"Prevent redundant ad request work","text":"<p>As you check <code>UGoogleAdMob::CanRequestAds()</code> after gathering consent and after calling <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>, ensure your logic prevents redundant ad requests that might result in both checks returning true. For example, with a boolean variable.</p> <p>This is an example of what the complete UMP set-up might look like:</p> C++Blueprints <pre><code>#include \"Templates/SharedPointer.h\"\n#include \"Logging/LogMacros.h\"\n#include \"GoogleAdMob.h\"\n// ...\nTSharedRef&lt;bool&gt; bInitFlag = MakeShared&lt;bool&gt;(false);\n\nUGoogleAdMob::OnRequestConsentInfoUpdateSuccess.AddLambda([bInitFlag]()\n    {\n        UGoogleAdMob::OnConsentFormDismissed.AddLambda([bInitFlag]()\n            {\n                if (UGoogleAdMob::CanRequestAds() &amp;&amp; !*bInitFlag)\n                {\n                    *bInitFlag = true;\n                    UGoogleAdMob::Initialize();\n                }\n            }\n        );\n        UGoogleAdMob::OnConsentFormDismissedWithError.AddLambda([]\n            (const int32 ErrorCode, const FString&amp; ErrorMessage)\n            {\n                UE_LOG(LogExec, Error, TEXT(\"%d | %s\"), ErrorCode, *ErrorMessage);\n            }\n        );\n        UGoogleAdMob::LoadAndShowConsentFormIfRequired();\n    }\n);\nUGoogleAdMob::OnRequestConsentInfoUpdateFailure.AddLambda([]\n    (const int32 ErrorCode, const FString&amp; ErrorMessage)\n    {\n        UE_LOG(LogExec, Error, TEXT(\"%d | %s\"), ErrorCode, *ErrorMessage);\n    }\n);\nUGoogleAdMob::RequestConsentInfoUpdate();\n\nif (UGoogleAdMob::CanRequestAds() &amp;&amp; !*bInitFlag)\n{\n    *bInitFlag = true;\n    UGoogleAdMob::Initialize();\n}\n</code></pre> <p></p>"},{"location":"user-messaging-platform/#testing","title":"Testing","text":"<p>If you want to test the integration in your project as you're developing, follow these steps to register your test device. Be sure to remove these test device IDs before you release your game.</p> <ol> <li>Run your game on a device of your choice (iOS or Android), and make sure <code>UGoogleAdMob::RequestConsentInfoUpdate()</code> is called.</li> <li> <p>Check the log output of your device for a message similar to the following examples, which shows your device ID:</p> <ul> <li> <p>iOS: </p> <pre><code>&lt;UMP SDK&gt;To enable debug mode for this device, set: UMPDebugSettings.testDeviceIdentifiers = @[2077ef9a63d2b398840261c8221a0c9b]\n</code></pre> </li> <li> <p>Android: </p> <pre><code>Use new ConsentDebugSettings.Builder().addTestDeviceHashedId(\"33BE2250B43518CCDA7DE426D04EE231\") to set this as a debug device.\n</code></pre> </li> </ul> </li> <li> <p>Copy your test device ID to your clipboard.</p> </li> <li> <p>Go to Project Settings &gt; Plugins &gt; Google AdMob and paste the copied device ID into the appropriate Test Device IDs array:</p> <p></p> </li> </ol>"},{"location":"user-messaging-platform/#force-a-geography","title":"Force a geography","text":"<p>The UMP provides a way to test your game's behavior as though the devices were located in various regions, such as the EEA or UK. Note that debug settings only work on test devices.</p> <p></p>"},{"location":"user-messaging-platform/#reset-consent-state","title":"Reset consent state","text":"<p>When testing your game with the UMP SDK, you might find it helpful to reset the state of the SDK so that you can simulate a user's first install experience. The plugin provides the <code>UGoogleAdMob::ResetConsentState()</code> function to do this.</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::ResetConsentState();\n</code></pre> <p></p> <p>Warning</p> <p>This function is intended to be used for testing purposes only. You shouldn't call <code>UGoogleAdMob::ResetConsentState()</code> in shipping builds.</p>"}]}