{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get started","text":"<p>This get started guide will walk you through integrating the Google Mobile Ads into your Unreal project, and then displaying your first ad with it! Here we will focus on an interstitial ad, but detailed guides on implementing different ad formats will be linked at the bottom of the page.</p>"},{"location":"#set-up-your-app-in-your-admob-account","title":"Set up your app in your AdMob account","text":"<p>Register your app as an AdMob app by completing the following steps:</p> <ol> <li>Sign in to or sign up for an AdMob account.</li> <li>Register your app with AdMob. This step creates an AdMob app with a unique AdMob App ID that is needed later in this guide.</li> </ol>"},{"location":"#configure-your-project","title":"Configure your project","text":""},{"location":"#enable-the-plugin","title":"Enable the plugin","text":"<p>The plugin is typically enabled by default upon installation. However, if it's not, follow these steps:</p> <ol> <li>Navigate to Edit &gt; Plugins in Unreal Engine.</li> <li>Search for <code>Google AdMob</code> in the plugin list.</li> <li>If the plugin is disabled, enable it by checking the corresponding box.</li> </ol>"},{"location":"#disable-build-in-admob-support-for-ads","title":"Disable build-in AdMob support for ads","text":"<p>To avoid any compatibility issues and library conflicts, disable build-in AdMob support. Inside Project Settings, go to Platforms &gt; Android &gt; Google Play Services and set <code>Include AdMob support for ads</code> to <code>false</code>.</p> <p></p>"},{"location":"#enter-your-app-ids-in-project-settings","title":"Enter your App IDs in Project Settings","text":"<ol> <li>Copy your AdMob app ID, as identified in the AdMob web interface. You'll need to separate AdMob apps for Android and iOS, i.e. two different App IDs for these platforms.</li> <li>Open Project Settings &gt; Plugins &gt; Google AdMob in Unreal Engine, and paste the copied values into the corresponding AdMob App ID fields.</li> </ol>"},{"location":"#enable-automatic-sdk-initialization","title":"Enable automatic SDK initialization","text":"<p>Typically, you would want manual control over Privacy &amp; Messaging in your game (it's even required in some cases!), but for this tutorial we are going to ask plugin to attempt initializing Google AdMob SDK automatically at game's start-up. Once again, go to Project Settings &gt; Plugins &gt; Google AdMob, and set the <code>Enable automatic SDK initialization on startup</code> field to <code>true</code> (it's disabled be default).</p> <p></p>"},{"location":"#add-dependency-to-your-modules-c-projects","title":"Add dependency to your modules <code>(C++ projects)</code>","text":"<p>To use the plugin in your C++ code, you must include <code>GoogleAdMob</code> as either a public or private dependency in your module's build configuration, for example: <pre><code>PrivateDependencyModuleNames.Add(\"GoogleAdMob\");\n</code></pre></p>"},{"location":"#implement-your-first-ad","title":"Implement your first ad","text":"<p>Now you're ready to add your first interstitial ad to your game! Follow the steps below to make it a reality!</p> <ol> <li> <p>Create an interstitial ad object and store it in a variable. In Blueprints, add a <code>Construct Object from Class</code> node and choose UGoogleAdMobInterstitialAd as a class to create the object from. Think of it as a communication interface between your Unreal project and Google AdMob.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n</code></pre> <p></p> <p>Tip</p> <p>It's generally recommended to keep your ads in a class/blueprint derived from PlatformGameInstance, as they often need to persist between levels.</p> </li> <li> <p>Check if ads can be requested. Before loading any ads, you should first check if the consent has been gathered from a user using the <code>UGoogleAdMob::CanRequestAds()</code> function.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    // ...\n}\n</code></pre> <p></p> </li> <li> <p>Bind an event to the ad being loaded. Prior to loading the ad, you should also bind some event to the <code>OnLoaded</code> multicast delegate, so that you know when your ad is loaded and is ready to be shown.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddLambda([](const FGoogleAdMobResponseInfo&amp; ResponseInfo){});\n}\n</code></pre> <p></p> </li> <li> <p>Load the ad. Now you can finally load your ad by calling <code>UGoogleAdMobInterstitialAd::Load(const FString&amp; AdUnitID)</code> function! Just remember that the function must be called on the created ad object (i.e. the function won't appear in Blueprints unless the context menu is shown after dragging the pin from this object), and that there are two different Ad Unit IDs for Android and iOS.</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddLambda([](const FGoogleAdMobResponseInfo&amp; ResponseInfo){});\n#if PLATFORM_ANDROID\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/1033173712\"));\n#elif PLATFORM_IOS\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/4411468910\"));\n#endif\n}\n</code></pre> <p></p> </li> <li> <p>Show your interstitial ad. The last step here is obviously showing your ad when it's loaded. Just call <code>UGoogleAdMobInterstitialAd::Show()</code> when the <code>OnLoaded</code> delegate is broadcast, and you're done!</p> C++Blueprints <pre><code>// In header file:\nclass UGoogleAdMobInterstitialAd;\n// ...\nUPROPERTY()\nTObjectPtr&lt;UGoogleAdMobInterstitialAd&gt; InterstitialAd;\n\n// In source file:\n#include \"GoogleAdMobInterstitialAd.h\"\n#include \"GoogleAdMob.h\"\n#include \"GoogleAdMobResponseInfo.h\"\n// ...\nInterstitialAd = NewObject&lt;UGoogleAdMobInterstitialAd&gt;(this);\n// ...\nif (UGoogleAdMob::CanRequestAds()) \n{\n    InterstitialAd-&gt;OnLoaded.AddLambda(\n        [InterstitialAd](const FGoogleAdMobResponseInfo&amp; ResponseInfo)\n        {\n            InterstitialAd-&gt;Show();\n        }\n    );\n#if PLATFORM_ANDROID\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/1033173712\"));\n#elif PLATFORM_IOS\n    InterstitialAd-&gt;Load(TEXT(\"ca-app-pub-3940256099942544/4411468910\"));\n#endif\n}\n</code></pre> <p></p> </li> </ol> <p>Congratilations! You've successfully loaded your first interstitial ad! It might seem a bit overwhelming at first, but once you get it, this plugin will become a powerful tool in your developer hands, and will help you implement a robust mobile ad system in your game. Go on and check out what other features it has to offer!</p>"},{"location":"user-messaging-platform/","title":"User Messaging Platform (UMP)","text":"<p>Before you can show any ads to your users, you have to ask for their consent. Ideally, it should be done at game's start-up before initializing AdMob SDK. The Google User Messaging Platform (UMP) is a privacy and messaging tool to help you manage privacy choices. For more information, see About Privacy &amp; messaging. Automatic SDK initialization does most of the steps described below automatically, but manual set-up should be a preferred option.</p>"},{"location":"user-messaging-platform/#before-you-start","title":"Before you start","text":"<p>Complete the following steps described in the Get Started guide:</p> <ul> <li>Set up your app in your AdMob account.</li> <li>Configure your project.</li> </ul>"},{"location":"user-messaging-platform/#create-a-message-type","title":"Create a message type","text":"<p>Create user messages with one of the Available user message types under the Privacy &amp; messaging tab of your AdMob account. The UMP SDK attempts to display a privacy message created from the AdMob Application ID set in your project.</p>"},{"location":"user-messaging-platform/#get-the-users-consent-information","title":"Get the user's consent information","text":"<p>You should request an update of the user's consent information at every app launch, using <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>. This request checks the following:</p> <ul> <li>Whether consent is required. For example, consent is required for the first time, or the previous consent decision expired.</li> <li>Whether a privacy options entry point is required. Some privacy messages require apps to allow users to modify their privacy options at any time.</li> </ul> <p>Tip</p> <p>It's highly recommended you do your UMP and initialization logic inside the <code>Init()</code> function of the <code>UPlatformGameInstance</code> derived class.</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::OnRequestConsentInfoUpdateSuccess.AddLambda([](){});\nUGoogleAdMob::OnRequestConsentInfoUpdateFailure.AddLambda([](const int32 ErrorCode, const FString&amp; ErrorMessage){});\nUGoogleAdMob::RequestConsentInfoUpdate();\n</code></pre> <p></p>"},{"location":"user-messaging-platform/#load-and-present-the-privacy-message-form","title":"Load and present the privacy message form","text":"<p>After you have received the most up-to-date consent status, call <code>UGoogleAdMob::LoadAndShowConsentFormIfRequired()</code> to load any forms required to collect user consent. After loading, the forms present immediately.</p> <p>Info</p> <p>If no privacy message forms require collection of user consent prior to requesting ads, the callback is invoked immediately.</p> C++Blueprints <pre><code>#include \"GoogleAdMob.h\"\n// ...\nUGoogleAdMob::OnConsentFormDismissed.AddLambda([](){});\nUGoogleAdMob::OnConsentFormDismissedWithError.AddLambda([](const int32 ErrorCode, const FString&amp; ErrorMessage){});\nUGoogleAdMob::LoadAndShowConsentFormIfRequired();\n</code></pre> <p></p>"},{"location":"user-messaging-platform/#privacy-options","title":"Privacy options","text":"<p>Some privacy message forms are presented from a publisher-rendered privacy options entry point, letting users manage their privacy options at any time. To learn more about which message your users see at the privacy options entry point, see Available user message types.</p> <p>After you have called <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>, get privacy options requirement status with <code>UGoogleAdMob::ArePrivacyOptionsRequired()</code> function to determine if a privacy options entry point is required for your app. If an entry point is required, add a visible and interactable UI element to your game that presents the privacy options form (UMG button in options menu, for example). If a privacy entry point is not required, configure your UI element to be not visible and interactable.</p> C++Blueprints <pre><code>#include \"Components/Widget.h\"\n#include \"GoogleAdMob.h\"\n// ...\nif (UGoogleAdMob::ArePrivacyOptionsRequired()) \n{\n    PrivacyOptionsButton-&gt;SetVisibility(ESlateVisiblity::Visible);\n}\nelse\n{\n    PrivacyOptionsButton-&gt;SetVisibility(ESlateVisibility::Collapsed);\n}\n</code></pre> <p></p> <p>When the user interacts with your element, present the privacy options form:</p> C++Blueprints <pre><code>#include \"Components/Button.h\"\n#include \"GoogleAdMob.h\"\n// ...\nPrivacyOptionsButton-&gt;OnClicked.AddLambda([]()\n    {   \n        UGoogleAdMob::OnConsentFormDismissed.AddLambda([]()\n            {\n                //... \n            }\n        );\n        UGoogleAdMob::OnConsentFormDismissedWithError.AddLambda([](const int32 ErrorCode, const FString&amp; ErrorMessage)\n            {\n                //...\n            }\n        );\n        UGoogleAdMob::ShowPrivacyOptionsForm();\n    }\n);\n</code></pre> <p></p> <p>Note</p> <p>Same delegates are used for <code>UGoogleAdMob::LoadAndShowConsentFormIfRequired()</code> and <code>UGoogleAdMob::ShowPrivacyOptionsForm()</code> functions.</p>"},{"location":"user-messaging-platform/#request-ads-with-user-consent","title":"Request ads with user consent","text":"<p>Before requesting ads, use <code>UGoogleAdMob::CanRequestAds()</code> to check if you've obtained consent from the user.</p> <p>Listed are the following places to check if you can request ads while gathering consent:</p> <ul> <li>After the UMP SDK gathers consent in the current session.</li> <li>Immediately after you have called <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>. The UMP SDK might have obtained consent in the previous app session.</li> </ul> <p>Warning</p> <p><code>UGoogleAdMob::CanRequestAds()</code> always returns false until you have called <code>UGoogleAdMob::RequestConsentInfoUpdate()</code></p> <p>If an error occurs during the consent gathering process, check if you can request ads. The UMP SDK uses the consent status from the previous app session.</p>"},{"location":"user-messaging-platform/#prevent-redundant-ad-request-work","title":"Prevent redundant ad request work","text":"<p>As you check <code>UGoogleAdMob::CanRequestAds()</code> after gathering consent and after calling <code>UGoogleAdMob::RequestConsentInfoUpdate()</code>, ensure your logic prevents redundant ad requests that might result in both checks returning true. For example, with a boolean variable.</p> <p>This is an example of what the complete UMP set-up might look like:</p> C++Blueprints <pre><code>#include \"Templates/SharedPointer.h\"\n#include \"Logging/LogMacros.h\"\n#include \"GoogleAdMob.h\"\n// ...\nTSharedRef&lt;bool&gt; bInitFlag = MakeShared&lt;bool&gt;(false);\n\nUGoogleAdMob::OnRequestConsentInfoUpdateSuccess.AddLambda([bInitFlag]()\n    {\n        UGoogleAdMob::OnConsentFormDismissed.AddLambda([bInitFlag]()\n            {\n                if (UGoogleAdMob::CanRequestAds() &amp;&amp; !*bInitFlag)\n                {\n                    *bInitFlag = true;\n                    UGoogleAdMob::Initialize();\n                }\n            }\n        );\n        UGoogleAdMob::OnConsentFormDismissedWithError.AddLambda([](const int32 ErrorCode, const FString&amp; ErrorMessage)\n            {\n                UE_LOG(LogExec, Error, TEXT(\"%d | %s\"), ErrorCode, *ErrorMessage);\n            }\n        );\n        UGoogleAdMob::LoadAndShowConsentFormIfRequired();\n    }\n);\nUGoogleAdMob::OnRequestConsentInfoUpdateFailure.AddLambda([](const int32 ErrorCode, const FString&amp; ErrorMessage)\n    {\n        UE_LOG(LogExec, Error, TEXT(\"%d | %s\"), ErrorCode, *ErrorMessage);\n    }\n);\nUGoogleAdMob::RequestConsentInfoUpdate();\n\nif (UGoogleAdMob::CanRequestAds() &amp;&amp; !*bInitFlag)\n{\n    *bInitFlag = true;\n    UGoogleAdMob::Initialize();\n}\n</code></pre> <p></p>"}]}