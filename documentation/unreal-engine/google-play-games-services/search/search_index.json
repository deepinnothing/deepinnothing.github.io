{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Google Play Games Services provides popular gaming features for Android, ChromeOS, and Windows games. With Google Play Games Services, you can add social features to your game, view gameplay stats, and provide cross-platform gameplay across multiple devices.</p> <p>You can set up and manage Play Games Services in the Google Play Console, and then add features to your Unreal Engine project using this plugin.</p>"},{"location":"#features","title":"Features","text":"<p>Play Games Services features increase social engagement and provide multiplatform support across multiple devices.</p>"},{"location":"#multiple-devices-and-platforms","title":"Multiple devices and platforms","text":"<p>Play Games Services supports Android, ChromeOS, and Android game distribution on Windows (through Google Play Games for PC). The following features also ensure that you can provide your games to multiple devices for each player:</p> <ul> <li><code>Sign-in</code>: Provides a gaming identity for players that supports authentication on multiple devices, third-party cloud save solutions, and the Saved games service.</li> <li><code>Recall API</code>: Use PGS as a companion to your existing sign-in mechanisms, and seamlessly sync players' sign-in information across devices.</li> <li><code>Saved games</code>: Allow players to save game progress on Google servers and synchronize data between devices.</li> </ul>"},{"location":"#social-engagement","title":"Social engagement","text":"<ul> <li><code>Achievements</code>: Define player achievements that can recognize, award, and track player progress outside your game environment.</li> <li><code>Leaderboards</code>: Define leaderboards that encourage competition and rank progress between players.</li> <li><code>Friends</code>: Allow players to socialize and track friends outside of your game, and then add their Play Games friends to their in-game friends list.</li> </ul>"},{"location":"#gameplay-stats","title":"Gameplay stats","text":"<ul> <li><code>Player stats</code>: Retrieve data about a player\u2019s in-game activity in order to adjust their gameplay experience.</li> <li><code>Events</code>: View your game's cumulative gameplay stats in order to improve your game. For example, you can identify content that most players haven't been able to clear, and then use the results to adjust the difficulty.</li> </ul>"},{"location":"get-started/","title":"Get started","text":"<p>This page outlines how to set up Google Play Games Services and then add features to an Android game. The tasks include setting up the service in Google Play Console and adding features to your game, such as sign-in and achievements.</p> <p>Here are the basic steps to set up Play Games Services for a game and add features:</p> <ol> <li>Set up Play Games Services.</li> <li>Set up your game project and integrate the Sign-in service.</li> <li>Set up and add features to your game project.</li> <li>Test and Publish any changes you make to your Play Games Services features.</li> </ol>"},{"location":"get-started/#before-you-start","title":"Before you start","text":"<p>You must have a Google Play Developer account set up in Play Console. For more information, see the Register for a Google Play Developer account.</p>"},{"location":"get-started/#set-up-play-games-services","title":"Set up Play Games Services","text":"<p>To set up Play Games Services in Google Play Console, see the set up guide.</p>"},{"location":"get-started/#set-up-your-game-project","title":"Set up your game project","text":"<p>You must set up a Play Games Services in your game project and integrate the Sign-in service before adding other Play Games Services features. See the Set up Unreal Engine project for details.</p>"},{"location":"get-started/#add-additional-features","title":"Add additional features","text":"<p>After you integrate sign-in, you can add additional Play Games Services features to your game. This involves setting up the feature in Play Console and then integrating it in your game project. See the following guides for details:</p> <ul> <li><code>Achievements</code></li> <li><code>Leaderboards</code></li> <li><code>Events</code></li> <li><code>Friends</code></li> <li><code>Saved Games</code></li> <li><code>Player Stats</code></li> </ul>"},{"location":"get-started/#test-and-publish-play-games-services-updates","title":"Test and publish Play Games Services updates","text":"<p>After you add Play Games Services features to your game project, you should test any updates you make to your Play Games Services project using the test accounts that you setup when you configure Play Games Services. When you're satisfied with the changes, you can use Play Console to publish them. This does not involve publishing your game, and only updates the Play Games Services project and services hosted by Google.</p>"},{"location":"ue-setup/","title":"Set up Unreal Engine project","text":"<p>This page describes how to set up Google Play Games Services for your Unreal Engine project.</p>"},{"location":"ue-setup/#before-you-start","title":"Before you start","text":"<p>Complete Google Play Services setup in Play Console before you start configuring it in Unreal Engine.</p>"},{"location":"ue-setup/#enable-the-plugin","title":"Enable the plugin","text":"<p>The plugin is typically enabled by default upon installation. However, if it's not, follow these steps:</p> <ol> <li>Navigate to Edit &gt; Plugins in Unreal Engine.</li> <li>Search for <code>Google Play Games Services</code> in the plugin list.</li> <li>If the plugin is disabled, enable it by checking the corresponding box.</li> </ol>"},{"location":"ue-setup/#disable-build-in-google-play-services-recommended","title":"Disable build-in Google Play Services <code>(Recommended)</code>","text":"<p>Inside Project Settings, go to Platforms &gt; Android &gt; Google Play Services and set <code>Enable Google Play Support</code> to <code>false</code>.</p> <p></p>"},{"location":"ue-setup/#enter-project-id-in-project-settings","title":"Enter Project ID in Project Settings","text":"<ol> <li> <p>Copy the Play Games Services Project ID. You can find it in the Google Play Console in two locations:</p> <ul> <li>Navigate to any section under Grow users &gt; Play Games Services. The Project ID is displayed directly below the project name.</li> <li>Alternatively, Go to Grow users &gt; Play Games Services &gt; Setup and management &gt; Configuration, then edit one of the credentials. Copy the value from the Application ID field.</li> </ul> </li> <li> <p>Open Project Settings &gt; Plugins &gt; Google Play Games Services in Unreal Engine, and paste the copied value into the Project ID field.</p> </li> </ol> <p></p>"},{"location":"ue-setup/#change-play-games-services-ui-request-codes-optional","title":"Change Play Games Services UI Request Codes <code>(optional)</code>","text":"<p>You have the option to modify the request codes used for displaying and managing Google Play Games Services UIs that can be shown on top of your application content. These codes are primarily intended for debugging purposes. Unless you have a specific need to change them, it\u2019s safe to leave the default values unchanged.</p>"},{"location":"ue-setup/#add-dependency-to-your-modules-c-projects","title":"Add dependency to your modules <code>(C++ projects)</code>","text":"<p>To use the plugin in your C++ code, you must include <code>GMSGames</code> as either a public or private dependency in your module's build configuration, for example: <pre><code>PrivateDependencyModuleNames.Add(\"GMSGames\");\n</code></pre></p>"},{"location":"ue-setup/#next-steps","title":"Next steps","text":"<p>With the initial setup tasks complete, you can start integrating various features into your game, such as saved games, leaderboards, and achievements.</p>"},{"location":"console/setup/","title":"Set up Google Play Games Services","text":"<p>This page describes how to set up Google Play Games Services for your Android game using Google Play Console. The Play Console provides a centralized place for you to manage game services and configure the metadata used to authorize and authenticate your game.</p> <p>To add your game to Play Console, follow these general steps:</p> <ul> <li>Create a game project for your game and specify details such as the name and description of the game.</li> <li>Create and link the necessary credentials to authorize and authenticate your game to Google Play Games Services.</li> </ul>"},{"location":"console/setup/#before-you-start","title":"Before you start","text":"<p>Complete the following steps before you configure Google Play Games Services.</p>"},{"location":"console/setup/#create-a-google-play-developer-account","title":"Create a Google Play Developer account","text":"<ul> <li>You must have a Google Play Developer account set up in Play Console. For more information, see the Register for a Google Play Developer account.</li> <li>Grant edit permission: To edit Play Games Services settings in Play Console, your team must have permissions to manage Play Games Services. For more information, see Add developer account users and manage permissions.</li> </ul>"},{"location":"console/setup/#create-a-google-cloud-project","title":"Create a Google Cloud project","text":"<p>You must have set up a Google Cloud project. For more information, see</p> <ul> <li><code>Get started with Google Cloud</code>.</li> <li><code>Creating a project</code>.</li> </ul> <p>To use Play Console, you must enable the APIs you plan to use with your project.</p> Consolegcloud <p>Enable Google Play Games Services API</p> <pre><code>gcloud services enable \\\n   --project \"PROJECT\" \\\n   \"games.googleapis.com\"\n</code></pre>"},{"location":"console/setup/#sign-in-to-the-play-console","title":"Sign in to the Play Console","text":"<p>To sign in, go to Google Play Console. If you haven't registered for the Play Console before, you will be prompted to do so.</p>"},{"location":"console/setup/#add-your-game-to-the-play-console","title":"Add your game to the Play Console","text":"<p>To add your game, follow these steps:</p> <ol> <li>In Play Console, create an app and specify that it's a game. For more information, see Create and set up your app.</li> <li>Go to Grow users &gt; Play Games Services &gt; Setup and management &gt; Configuration.</li> <li> <p>Specify whether your game already uses Google APIs (such as Firebase). It is important that you choose the correct option; otherwise, your game may experience issues when using Google APIs. Here's the options:</p> <ul> <li>No, my game doesn't use Google APIs: If you are creating a new game, or you have never set up a Google API for it, choose this option. Enter your game's name and then click Create.</li> <li>Yes, my game already uses Google APIs: Choose this option if you have already set up a Google API for the Game. If this is the case, you will see a list of your projects from Google Cloud Console. Select your project from the list and then click Use.</li> <li>Use an existing Play Games Services project: If you want to use an existing Play Games Services project, choose this option. You will see a list of existing Play Games Services projects for your account. Select your game project from the list and then click Use. This is not a typical choice, but you might do this if you are creating a new game in Play Console in order to change the package name, or if you have free and paid versions of your game with different package names.</li> </ul> <p>A Play Games Services game project is created, and a corresponding entry is created for you in the Google Cloud Console.</p> </li> <li> <p>In the Properties section, click Edit Properties to add information, such as the description, category, and graphic assets for your game. Here's some guidelines for coonfiguring the properties:</p> <ul> <li>Only the display name is required for testing. The other fields must be filled out before you can publish your game.</li> <li>The display name and description for your game should match what you set up in your game's Play Store listing.</li> <li>For guidelines on creating the graphic assets, see Add preview assets to showcase your app and the Google Play Featured-Image Guidelines.</li> </ul> </li> </ol>"},{"location":"console/setup/#generate-an-oauth-20-client-id","title":"Generate an OAuth 2.0 client ID","text":"<p>Your game must have an OAuth 2.0 client ID in order to be authenticated and authorized to call the Google Play Games Services. To set up a credential for Play Games Services, which is the association between a client ID and your game, use Google Cloud Platform to create the client ID. Then, use Google Play Console to add a credential, linking the client ID to your game.</p> <p>For more detailed instructions, see the following steps:</p>"},{"location":"console/setup/#configure-the-oauth-consent-screen","title":"Configure the OAuth consent screen","text":"<p>If you haven't yet configured the OAuth consent screen, the Credentials section will display a message prompting you to configure.  Click Configure. This opens a dialog with further instructions and a deep link to the Google Cloud Platform.  Make sure that the consent screen is available to everyone that the game is available to. The final list of scopes needs to include <code>games</code>, <code>games_lite</code>, and <code>drive.appdata</code>; none of these scopes will require app verification. We recommend publishing the consent screen immediately. If that is not possible, you can make the consent screen available to testers to allow them to sign-in to the game.</p> <p>If you have completed the setup of the OAuth consent screen, click Done. Google Play Console refreshes automatically, and if configuration was successful you will be able to create a credential: </p>"},{"location":"console/setup/#create-a-credential","title":"Create a credential","text":"<p>In order to authorize your game to communicate with Google Play Games Services, you must create a credential with an authorized OAuth2 client ID.</p> <p>In the Credentials section, click Add credential.</p> <p>In the wizard, choose whether you want to create an Android credential (if your game APK will authenticate the user and use Play Games Services APIs) or a game server credential (if your game server will use Play Games Services APIs). Follow the instructions specific to your desired credential type.</p> AndroidGame server"},{"location":"console/setup/#set-up-credentials-details","title":"Set up credentials details","text":"<p>Ensure that the name in the Name field matches the name of your game. Choose whether to enable Anti-Piracy.</p>"},{"location":"console/setup/#set-up-authorization","title":"Set up authorization","text":"<p>Next, choose an OAuth client ID to use for this game project. If you already have OAuth2 client IDs, you can choose one. However, you will usually create a new one. Click Create OAuth client. This opens a dialog with deep links and instructions for creating an OAuth Client ID in Google Cloud Platform.</p> <ol> <li>Select Android as the application type.</li> <li>Enter your game's name in the Name field.</li> <li>Enter your Android application's package name in the Package name field.</li> <li> <p>This step varies depending on whether you use the App Signing Key provided by Google or your own.</p> Google App Signing KeyOwn App Signing Key <p>Copy the SHA-1 certificate fingerprint from the dialog with the instructions for creating an OAuth Client ID in Google Cloud Platform. If it was closed, you can find the SHA-1 certificate fingerprint in the Test and release &gt; Setup &gt; App Signing &gt; App signing key certificate section.</p> <p>Note</p> <p>In this case, the OAuth client will only work with the version downloaded from the Google Play Store. Google replaces the key specified in Unreal Engine's Project Settings with their own App Signing Key when uploaded to Play Console. To enable Google Play Games Services to work with Unreal Engine builds instead, you must use SHA-1 certificate fingerprint of the Upload Key.</p> <ol> <li>Open a terminal and run the Keytool utility to get the SHA1 fingerprints of the release and debug certificates.</li> <li>To get the certificate fingerprint, run the following command:     <code>keytool -list -keystore &lt;path-to-keystore&gt; -v</code></li> <li>The keytool utility prompts you to enter a password for the keystore. The keytool then prints the fingerprint to the terminal.</li> </ol> <p>Warning</p> <p>Make sure to record the package name and signing certificate that you configured in this step. Using a different certificate or package name in your application will cause authentication failures.</p> </li> <li> <p>Paste the SHA1 fingerprint into the Signing certificate fingerprint (SHA1) field.</p> </li> <li>Click Create.</li> </ol> <p>For more information about OAuth 2.0 on Android, see Authenticating to OAuth2 Services.</p> <p>After you click Done in the dialog, the available Client IDs will refresh. Choose the credential you created from the drop-down menu and then click Save Changes. This creates the credential as a draft, enabling you to authenticate to Play Games Services in your game.</p>"},{"location":"console/setup/#set-up-credentials-details_1","title":"Set up credentials details","text":"<p>Ensure that the name in the Name field matches the name of your game.</p>"},{"location":"console/setup/#set-up-authorization_1","title":"Set up authorization","text":"<p>Next, choose an OAuth client ID to use for this game project. If you already have OAuth2 client IDs, you can choose one. However, you will usually create a new one. Click Create OAuth client. This opens a dialog with deep links and instructions for creating an OAuth Client ID in Google Cloud Platform.</p> <ol> <li>Select Web application as the application type.</li> <li>Enter your game's name in the Name field.</li> <li>Click Create.</li> </ol> <p>For more information about OAuth 2.0 on Android, see Authenticating to OAuth2 Services.</p> <p>After you click Done in the dialog, the available Client IDs will refresh. Choose the credential you created from the drop-down menu and then click Save Changes. This creates the credential as a draft, enabling you to authenticate to Play Games Services from your game server. For more information about using Play Games Services with your game server, see Enabling Server-Side Access to Google Play Games Services.</p>"},{"location":"console/setup/#enable-testing","title":"Enable testing","text":"<p>To ensure that Google Play Games Services is functioning correctly in your game, you should test your game services before publishing your game changes on Google Play.</p> <p>If your game is in an unpublished state, grant access to your testers by adding their user accounts to the allowlist. Otherwise, your testers will encounter OAuth and 404 errors when attempting to access Play Games Services endpoints, such as the sign-in endpoint.</p> <p>Users with authorized test accounts will have access to your unpublished Play Games Services game project and can test that your configured Play Games Services are working correctly.</p> <p>Note</p> <p>Remember to add yourself as a tester, or the Play Games SDK will not work for your user account.</p> <p>There are two ways to enable testers to use Play Games Services APIs for your game:</p> <ul> <li>At an individual level, by adding individual email addresses.</li> <li>At a group level, by enabling Play Games Services for a Play Console release track.</li> </ul> <p>To add individual testers to your game project:</p> <ol> <li>Open the Testers tab for your game in the Google Play Console (Grow users &gt; Play Games Services &gt; Setup and management &gt; Testers).</li> <li>Click the Add testers button.</li> <li>In the dialog that appears, enter the email addresses of the Google Accounts that you wish to add as testers (separated with commas or one email address per line).</li> <li>Click Add to save the users as testers. The tester accounts you added should be able to access Play Games Services within a couple of hours. </li> </ol> <p>To give testing access to a group, enable a release track to access Play Games Services:</p> <p>Google Play makes it easy to distribute pre-release versions of your app to controlled groups of trusted users with the release track features. See Set up an open, closed, or internal test on the Google Play Help website.</p> <p>You can grant access to test your game to all users who have access to test APKs on a given release track. This works the same as if you had added them to the tester list individually. To do this, follow these steps:</p> <ol> <li>Open the PGS Testers section (Grow users &gt; Play Games Services &gt; Setup and management &gt; Testers) and select the Release tracks tab. On this page, you can also see the list of tracks that are already enabled for Play Games Services testing.</li> <li>Click Add tracks.</li> <li>Select one or more tracks to enable for Play Games Services testing.</li> <li>Click Add Tracks.</li> </ol> <p>The selected release tracks will now appear on the list of tracks enabled for Play Games Services testing.</p> <p>This feature is only available if you have an Android app linked to your game in Google Play Console.</p>"},{"location":"console/setup/#avoid-common-issues","title":"Avoid common issues","text":"<p>To avoid common setup mistakes, make sure to follow these recommendations when setting up your game to use Google Play Games Services.</p> <ol> <li> <p>Set up your game with the Play Console</p> <p>If you created an Oauth 2.0 client ID for your app in the Google Cloud Console, Google Play Games Services will not know about the association between the game\u2019s achievement and leaderboards and the client ID. To create this association, you must create a credential using the Oauth 2.0 client ID as described in Create a credential.</p> </li> <li> <p>Use the correct application ID in Android</p> <p>The application ID is a required string resource that you must reference in your Android manifest. The application ID string consists only of the digits (typically 12 or more) at the beginning of the client ID provided by the Play Console. The application ID can be found at the top of the Configuration page and is labeled as Project ID below the name of your game.</p> </li> <li> <p>Sign your APK with the correct certificate</p> <p>When linking your Android app to your game in the Play Console, you must use exactly the same package name and certificate fingerprint that you used to publish your app, i.e. App Signing Key certificate. If there is a mismatch, calls to Google Play Games Services will fail. You can create two client IDs, one with the App Signing Key certificate fingerprint and another with the Upload Key certificate fingerprint, and use the same package name for both. To learn more about how to specify the signing certificate in the Play Console, see Signing Your Applications.</p> </li> <li> <p>Sign in with a tester account during development</p> <p>If you have not published your game setting changes in the Play Console, you might encounter errors during testing if you are not signed in with a whitelisted tester account. You should always enable your Play Console publisher account for testing. To learn how to manage tester accounts, see Enabling accounts for testing.</p> </li> <li> <p>Publish the consent screen in Google Cloud Platform</p> <p>Before publishing the app in the Play Console, publish the consent screen in Google Cloud Platform. Without this step, the public audience won\u2019t be able to use any of the Play Games Services features.</p> </li> <li> <p>At release, publish the Play Games Services settings first before you publish your game</p> <p>Developers might accidentally publish their app without publishing the corresponding Play Games Services settings for their app. This might cause players who are signing in with non-tester accounts to encounter errors since the app cannot reference the correct game settings. When releasing your game, remember to first publish your game settings by using the Publish Game option in the Play Console. To learn how to publish your changes, see Publishing your game changes.</p> </li> </ol> <p>For additional tips, see the Android troubleshooting guide.</p>"},{"location":"console/setup/#next-steps","title":"Next steps","text":"<p>Once you complete the initial setup tasks described above, you can enable Play Games Services features for your game, such as saved games, leaderboards, and achievements.</p>"},{"location":"features/achievements/","title":"Achievements","text":"<p>Achievements can be a great way to increase your users' engagement within your game. You can implement achievements in your game to encourage players to experiment with features they might not normally use, or to approach your game with entirely different play styles. Achievements can also be a fun way for players to compare their progress with each other and engage in light-hearted competition.</p> <p>To learn how to implement achievements in your Unreal Engine project, see Achievements for Unreal Engine games.</p>"},{"location":"features/achievements/#attributes","title":"Attributes","text":"<p>To understand how achievements work, you'll want to be familiar with some of the attributes associated with them.</p> <p>These basic elements are associated with every achievement:</p> <ul> <li>Id is a unique string that is generated by Google Play Console. You'll use this unique ID to refer to the achievement in your game clients.</li> <li>Name is a short name of the achievement (for example, \"Pieman\"). The value can be up to 100 characters.</li> <li>Description is a concise description about your achievement. Usually this tells your player how to earn the achievement (for example, \"Bake a lemon meringue pie before sundown\"). The value can be up to 500 characters.</li> <li>Icon is a square icon that is associated with your achievement. For best practices when creating your achievement icons, see the Icon Guidelines section.</li> <li>List order is the order in which the locked achievements appear when a player views the achievements associated with your game. This can be in any order that you like. Unlocked achievements appear at the top of the list in the order achieved.</li> </ul>"},{"location":"features/achievements/#state","title":"State","text":"<p>Achievements can be in one of three different states:</p> <ul> <li>A hidden achievement means that details about the achievement are hidden from the player. Play Games Services provides a generic placeholder description and icon for the achievement while it's in a hidden state. We recommend making an achievement hidden if it contains a spoiler you don't want to reveal about your game too early (for example, \"Discover that you were a ghost all along!\").</li> <li>A revealed achievement means that the player knows about the achievement, but hasn't earned it yet. Most achievements start in the revealed state.</li> <li>An unlocked achievement means that the player has successfully earned the achievement. An achievement can be unlocked offline. When the game comes online, it syncs with Play Games Services to update the achievement's unlocked state.</li> </ul>"},{"location":"features/achievements/#incremental-achievements","title":"Incremental achievements","text":"<p>Achievements can be designated as standard or incremental. Generally, an incremental achievement involves a player making gradual progress towards earning the achievement over a longer period of time. As the player makes progress towards the incremental achievement, you can report the player's partial progress to Play Games Services.</p> <p>The Google Play service keeps track of the progress information, alerts the game when the player has met the criteria necessary to unlock that achievement, and tells the player how far along they are towards meeting that goal.</p> <p></p> <p>Incremental achievement showing the player's progress at 23%.</p> <p>Incremental achievements are cumulative across game sessions, and progress cannot be removed or reset from within the game. For example, \"Win 50 games\" would qualify as an incremental achievement. \"Win 3 games in a row\" would not, as the player's progress would be reset when they lose a game. \"Have 5,000 poker chips\" would not qualify either, as a player could gain and lose chips as they play. For the latter two achievements, it's up to you to track the player's \"Wins in a row\" state or chip total and to unlock standard achievements when the player earns them.</p> <p>When creating an incremental achievement, you must define the total number of steps required to unlock it (this must be a number between 2 and 10,000). As the user makes progress towards unlocking the achievement, you should report the number of additional steps the user has made to Play Games Services. Once the total number of steps reaches the unlock value, the achievement is unlocked (even if it was hidden). There's no need for you to store the user's cumulative progress.</p>"},{"location":"features/achievements/#points","title":"Points","text":"<p>Achievements have a point value associated with them. The player's score must be a multiple of 5 and a game can never have a total of more than 1000 points for all of its achievements (although it can have less). In addition, no single achievement can have more than 200 points.</p>"},{"location":"features/achievements/#track-experience-points-xp","title":"Track experience points (XP)","text":"<p>Players can gain levels on their Game Profile when they earn achievements in Play Games enabled games. For every point associated with an achievement, the player gains 100 experience points (XP) when they earn that achievement. In other words:</p> <p><code>XP for an achievement = 100 * (point value for the achievement)</code></p> <p>Play Games services keeps track of the XP earned by each player and sends out a notification to the Google Play Games app when the player has earned enough points to 'level up'. Players can view their level and XP history from their Profile page in the Google Play Games app.</p>"},{"location":"features/achievements/#minimum-achievements","title":"Minimum achievements","text":"<p>A game that integrates achievements should have at least five achievements before it is published. You can test with fewer than five achievements, but it is recommended you have at least five achievements created before you publish your game.</p>"},{"location":"features/achievements/#maximum-achievements","title":"Maximum achievements","text":"<p>The number of achievements is limited by the points limits and distribution. With a maximum number of points of 1000, and each achievement assigned 5 points, the maximum number of achievements is 200. However, if achievements are assigned more points then the number of achievements available decreases as a result.</p>"},{"location":"features/achievements/#icon-guidelines","title":"Icon guidelines","text":"<p>Icons should be created as 512 x 512 PNG or JPG files. You only need to provide us with the icon for the unlocked achievement. We will generate a grayscale version for the revealed icon automatically. For that reason, we recommend your achievement icons include colorful elements, so your users can easily distinguish between revealed and unlocked achievements.</p> <p>When an achievement icon is displayed in an Android toast, the icon is overlaid with a circle and its outer corners are hidden. Make sure that your icon still looks good under these circumstances.</p> <p></p> <p>A sample achievement icon.</p> <p>The same icon is used in all locales, so we recommend against including any text or localized content in an icon.</p>"},{"location":"features/achievements/#create-an-achievement","title":"Create an achievement","text":"<p>This section describes how to create achievements for new and published games.</p>"},{"location":"features/achievements/#new-game","title":"New game","text":"<p>To create an achievement for a new and unpublished game, open your game in Google Play Console and navigate to Grow users &gt; Play Games Services &gt; Setup and management &gt; Achievements.</p> <p>Click the Create achievement button.</p> <p></p> <p>The 'Create Achievement' button on the main Achievements Panel.</p> <p>Then, simply fill out the information required for this achievement.</p> <p></p> <p>A filled-out sample achievement form for the 'Last place' achievement.</p> <p>Click Save, and your achievement will be made available in \"Ready to publish\" mode. Once you publish your game, all of your game's achievements will be published with it.</p>"},{"location":"features/achievements/#published-game","title":"Published game","text":"<p>To create an additional achievement for a game that has already been published, follow the same steps as above. The only difference is that the Save button will be relabeled as Save as draft and your achievement will be in a \"Ready to test\" mode. For more information on testing an updated version of a game, see Publishing Your Game Changes.</p> <p>Once you've tested your achievement and are happy with it, you can republish your game with the new achievements, and they will be pushed out to the world.</p>"},{"location":"features/achievements/#edit-an-achievement","title":"Edit an achievement","text":"<p>To edit an achievement that you've already created, select the achievement in the Achievements tab of Google Play Console. At this point, you will see the same form you used when first creating the achievement, and you can edit any of the fields as you need.</p> <p>When you're done editing an achievement, click the Save as draft button. The newly edited achievement will be in a \"ready to test\" stage, and you'll be able to test it out. If it is working correctly, select Republish from the drop-down list. This republishes your game, along with all your updated achievements, to the public.</p> <p>Note</p> <p>Once an achievement is published, its initial state (hidden or revealed) and its type (incremental or standard) is fixed and cannot be changed.</p>"},{"location":"features/achievements/#undo-an-edit","title":"Undo an edit","text":"<p>If you decide you don't like your current achievement and want to go back to your achievement the way it was before, select Revert from the drop-down list in Google Play Console, and all of your achievements will revert back to the previously published version.</p>"},{"location":"features/achievements/#delete-an-achievement","title":"Delete an achievement","text":"<p>Once your achievement has been published, it cannot be deleted.</p> <p>You can only delete an achievement in a pre-published state by clicking the button labeled Delete at the bottom of the form for that achievement.</p>"},{"location":"features/achievements/#reset-an-achievement","title":"Reset an achievement","text":"<p>You can only reset player progress data for your draft achievements.</p> <ul> <li>To reset achievements in Google Play Console, click the button labeled Reset achievement progress at the bottom of the form for that event.</li> <li>To reset achievement data programmatically, call the Management API Achievements methods.</li> </ul>"},{"location":"features/achievements/#add-translations-for-achievements","title":"Add translations for achievements","text":"<p>You can specify your own translations for achievements that are associated with your game. Before you do so, first make sure to complete the steps described in Adding translations for your game. You must also have created one or more achievements for your game.</p> <p>To add your own translations for achievements, open the Achievements tab for your game in the Google Play Console, then select an existing achievement. On the achievements details page, select the tab for a language that you previously added in the Game details tab. In the achievement details page for that language, edit the form with your translations for that achievement. Click Save to store your translated achievement details.</p>"},{"location":"features/achievements/#achievements-for-unreal-engine-games","title":"Achievements for Unreal Engine games","text":"<p>This guide shows you how to use the achievements APIs in Unreal Engine to unlock and display achievements in your game.</p>"},{"location":"features/achievements/#before-you-begin","title":"Before you begin","text":"<p>Before you start to code using the achievements API:</p> <ul> <li>Follow the instructions for installing and setting up your app to use Google Play Games Services in the Set up Unreal Engine project guide.</li> <li>Define the achievements that you want your game to unlock or display, by following the instructions in the Google Play Console guide.</li> <li>Familiarize yourself with the recommendations described in Quality Checklist.</li> </ul>"},{"location":"features/achievements/#unlock-achievements","title":"Unlock achievements","text":"<p>To unlock an achievement, call the <code>UGMSGamesAchievementsClient::Unlock()</code> function and pass in the achievement ID.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\nUGMSGamesAchievementsClient::Unlock(AchievementID);\n</code></pre> <p></p> <p>The use of the above function is preferable for most applications, though note that the update may not be sent to the server until the next sync. Use <code>UGMSGamesAchievementsClient::UnlockImmediate()</code> if you need the operation to attempt to communicate to the server immediately or need to have the status code delivered to your application.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesAchievementsClient::OnUnlockImmediateSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesAchievementsClient::OnUnlockImmediateFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesAchievementsClient::OnUnlockImmediateCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesAchievementsClient::UnlockImmediate(AchievementID);\n</code></pre> <p></p> <p>If the achievement is of the incremental type (that is, several steps are required to unlock it), call <code>UGMSGamesAchievementsClient::Increment()</code> instead.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\nUGMSGamesAchievementsClient::Increment(AchievementID, NumberOfSteps);\n</code></pre> <p></p> <p>You can use <code>UGMSGamesAchievementsClient::IncrementImmediate()</code> as well if you need the operation to attempt to communicate with the server immediately or need to have the status code returned.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesAchievementsClient::OnIncrementImmediateSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesAchievementsClient::OnIncrementImmediateFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesAchievementsClient::OnIncrementImmediateCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesAchievementsClient::IncrementImmediate(AchievementID, NumberOfSteps);\n</code></pre> <p></p> <p>As an alternative, <code>UGMSGamesAchievementsClient::SetSteps()</code> can be used for incremental type, which sets an achievement to have at least the given number of steps completed. Calling this method while the achievement already has more steps than the provided value is a no-op.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\nUGMSGamesAchievementsClient::SetSteps(AchievementID, NumberOfSteps);\n</code></pre> <p></p> <p>Use <code>UGMSGamesAchievementsClient::SetStepsImmediate()</code> to attempt for immediate communication with the server.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesAchievementsClient::OnSetStepsImmediateSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesAchievementsClient::OnSetStepsImmediateFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesAchievementsClient::OnSetStepsImmediateCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesAchievementsClient::SetStepsImmediate(AchievementID, NumberOfSteps);\n</code></pre> <p></p> <p>You don't need to write additional code to unlock the achievement; Google Play Games Services automatically unlocks the achievement once it reaches its required number of steps.</p>"},{"location":"features/achievements/#reveal-achievements","title":"Reveal achievements","text":"<p>If you only want to reveal a hidden achievement to the currently signed-in player, call the <code>UGMSGamesAchievementsClient::Reveal()</code> function. This will have no effect if the achievement has already been unlocked.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\nUGMSGamesAchievementsClient::Reveal(AchievementID);\n</code></pre> <p></p> <p>Same as with unlocking the achievements, the <code>UGMSGamesAchievementsClient::RevealImmediate()</code> function is also available.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesAchievementsClient::OnRevealImmediateSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesAchievementsClient::OnRevealImmediateFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesAchievementsClient::OnRevealImmediateCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesAchievementsClient::RevealImmediate(AchievementID);\n</code></pre> <p></p>"},{"location":"features/achievements/#display-achievements","title":"Display achievements","text":"<p>To show a player's achievements, call <code>UGMSGamesAchievementsClient::ShowAchievementsUI()</code> to display the default achievements user interface.</p> <p>Info</p> <p>A request code is used when the Achievement UI is shown or closed and can be changed in Project Settings. This code is primarily intended for debugging purposes. Unless you have a specific need to change it, it\u2019s safe to leave the default value unchanged.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesAchievementsClient::OnShowAchievementsUISuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesAchievementsClient::OnAchievementsUIClosed.Add(MyObject, &amp;UMyClass::OnUIClosedFunction);\nUGMSGamesAchievementsClient::OnShowAchievementsUIFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesAchievementsClient::OnShowAchievementsUICanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesAchievementsClient::ShowAchievementsUI();\n</code></pre> <p></p> <p>An example of the default achievements UI is shown below.</p> <p></p>"},{"location":"features/achievements/#load-the-list-of-achievements","title":"Load the list of achievements","text":"<p>You can access the achievement data by calling the <code>UGMSGamesAchievementsClient::LoadAchievementBuffer()</code> function. It returns the list of all the achievements in the game and their status for the current player.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesAchievementsClient::OnLoadAchievementBufferSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesAchievementsClient::OnLoadAchievementBufferFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesAchievementsClient::OnLoadAchievementBufferCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesAchievementsClient::LoadAchievementBuffer(bForceReload);\n</code></pre> <p></p> <p>Then it's possible to access all the different properties of the <code>Achievement</code> object.</p> C++Blueprints <pre><code>#include \"GMSGamesAchievementsClient.h\"\n// ...\nAchievement-&gt;GetAchievementID();\nAchievement-&gt;GetAchievementName();\nAchievement-&gt;GetDescription();\nAchievement-&gt;GetXPValue();\nAchievement-&gt;GetState();\nAchievement-&gt;GetLastUpdatedTimestamp();\nAchievement-&gt;GetPlayer();\nAchievement-&gt;GetRevealedImageURI();\nAchievement-&gt;GetUnlockedImageURI();\n\nif (UGMSGamesIncrementalAchievement* IncrementalAchievement = Cast&lt;UGMSGamesIncrementalAchievement&gt;(Achievement))\n{\n    IncrementalAchievement-&gt;GetCurrentSteps();\n    IncrementalAchievement-&gt;GetFormattedCurrentSteps();\n    IncrementalAchievement-&gt;GetTotalSteps();\n    IncrementalAchievement-&gt;GetFormattedTotalSteps();\n}\n</code></pre> <p></p>"},{"location":"features/events/","title":"Events","text":"<p>The Google Play Games events service allows you to collect cumulative data generated by your players during gameplay and store them in Google's servers for game analytics. You can flexibly define what player data your game should collect; this might include metrics such as how often:</p> <ul> <li>Players use a particular item</li> <li>Players reach a certain level</li> <li>Players perform some specific game action</li> </ul> <p>You can use the events data as feedback on how to improve your game. For example, you can adjust the difficulty level of certain levels in your game that players are finding too hard to complete.</p> <p>To learn how to implement events in your Unreal Engine project, see Events for Unreal Engine games.</p>"},{"location":"features/events/#integrate-events-in-your-game","title":"Integrate events in your game","text":"<p>The following workflow describes how you can apply events in your game:</p> <ol> <li> <p>Define events. To define new events to capture in your game:</p> <ol> <li>Go to the Events page for your game in the Google Play Console.</li> <li>Click the Add new event button and configure the event properties.</li> <li>Publish your event definitions by following the steps described in Publishing your game changes.</li> </ol> </li> <li> <p>Implement event capturing in your game using the events APIs. For example, in your code, call the <code>UGMSGamesEventsClient::Increment()</code> function whenever your game detects that an event that it cares about has been triggered.</p> <p>Note</p> <p>On mobile clients, Play Games SDK updates events in batches, so you will see cumulative, rather than fine-grained, changes to your events. When using the REST API, implement your own batching to avoid sending event updates too frequently, as this might cause you to quickly exceed your rate limits.</p> </li> <li> <p>View events data. Go to the Events page for your game in Google Play Console to view statistics for the captured events.</p> </li> </ol>"},{"location":"features/events/#event-basics","title":"Event basics","text":"<p>The events APIs provide you with a way to define and collect interesting gameplay metrics and upload these metrics to Play Games SDK.</p> <p>A Play Games SDK event contains these key properties:</p> Property Description ID A unique string generated by Google Play Console for this event. Use this unique ID to refer to the event in your game clients. Name A short name of the event. The name can be up to 100 characters. This value is used by Google Play Console and can be displayed in your game.Examples: \"Zombies Killed\", \"Red Gems Collected\" Description A longer description of the event (for example, \"Number of times a player has killed a zombie\" or \"The total number of red gems the player has eliminated and matched\"). The description can be up to 500 characters. This value is used by Google Play Console and can be displayed in your game. Event type A field that declares the type of data the event is tracking. This value is used by Google Play Console to support Player Analytics reporting. Two event types are supported:Premium currency source. Select this type for events that track sources of a premium currency. For example: \"Gold coins earned\", \"Emeralds bought\"Premium currency sink. Select this type for events that track sinks, or consumption, of a premium currency. For example: \"Gold coins spent\", \"Emeralds used\" Icon A square icon that will be associated with your event."},{"location":"features/events/#create-an-event","title":"Create an event","text":"<p>To create a new event for your game, follow these steps:</p> <ol> <li>In the Google Play Console, click the Game services icon on the left and select the entry for your game.</li> <li>Select the Events tab on the left, and click the Add event button.</li> <li>Fill in the details for the event you want to create.</li> <li>Click Save. If there are no errors, your event is placed in the \"Ready to publish\" state. You can now proceed to publish your game changes.</li> </ol>"},{"location":"features/events/#edit-an-event","title":"Edit an event","text":"<p>To edit an event that you've created:</p> <ol> <li>In the Google Play Console, open the Events tab and select the entry for the event you want to edit. You should see the same form you used when creating the event.</li> <li>Make your edit changes.</li> <li>When you've finished editing the event, click the Save button.</li> <li>Test your game to verify the modified event. If it is working correctly, republish your game changes.</li> </ol>"},{"location":"features/events/#delete-an-event","title":"Delete an event","text":"<p>You can delete events that are in draft state or that have been published. To delete an event in Google Play Console, click the button labeled Delete at the bottom of the form for that event.</p>"},{"location":"features/events/#reset-event-data","title":"Reset event data","text":"<p>You can reset player progress data for testers of your events.</p> <ul> <li>To reset draft events in Google Play Console, click the button labeled Reset event progress at the bottom of the form for that event.</li> <li>To reset event data programmatically, call the Management API Events methods.</li> </ul>"},{"location":"features/events/#events-for-unreal-engine-games","title":"Events for Unreal Engine games","text":"<p>This guide shows you how to collect player gameplay data for game analytics in Unreal Engine using the events APIs.</p>"},{"location":"features/events/#before-you-begin","title":"Before you begin","text":"<p>Before you start to code using the events APIs:</p> <ul> <li>Define the events for your game in the Google Play Console.</li> <li>Follow the sign-in checklist recommendations.</li> </ul>"},{"location":"features/events/#submit-events","title":"Submit events","text":"<p>You can add code in your game to notify Play Games Services whenever an event of interest to your game occurs.</p> <p>To send an event update, call <code>UGMSGamesEventsClient::Increment()</code> with the <code>EventId</code> value and an integer <code>IncrementAmount</code> that is equal to or greater than 0.</p> <ul> <li>The <code>EventId</code> is generated by Play Games Services when you first define the event in the Google Play Console and is used to uniquely identify this event in your game.</li> <li>You can use the <code>IncrementAmount</code> input to specify the player's quantitative progress towards completing some game-specific goal. For example, if the event your game wants to track is 'Defeat 500 bug-eyed monsters', the <code>IncrementAmount</code> value can be the number of monsters that the player killed in a single battle.</li> </ul> <p>Here's an example of how to submit an event with an increment amount of 1:</p> C++Blueprints <pre><code>#include \"GMSGamesEventsClient.h\"\n// ...\nUGMSGamesEventsClient::Increment(EventID, 1);\n</code></pre> <p></p>"},{"location":"features/events/#retrieve-events","title":"Retrieve events","text":"<p>You can retrieve all events data stored in Google's servers for your game, by calling <code>UGMSGamesEventsClient::LoadEventBuffer()</code>. In the method call, pass in a boolean value to indicate if Play Games Services should clear the locally cached data on the user's device.</p> <p>To retrieve data for specific events that you defined in the Google Play Console, call <code>UGMSGamesEventsClient::LoadEventBufferByIds()</code> and pass in an array of event IDs in the input parameters.</p> C++Blueprints <pre><code>#include \"GMSGamesEventsClient.h\"\n#include \"GMSGamesEvent.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesEventsClient::OnLoadEventBufferSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesEventsClient::OnLoadEventBufferFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesEventsClient::OnLoadEventBufferCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesEventsClient::LoadEventBuffer(true);\n// ...\nvoid UMyClass::OnSuccessFunction(const TArray&lt;UGMSGamesEvent*&gt;&amp; EventBuffer)\n{\n    for (UGMSGamesEvent* Event : EventBuffer)\n    {\n        // Process loaded events here...\n    }\n}\n</code></pre> <p></p>"},{"location":"features/friends/","title":"Friends","text":"<p>Use the Friends APIs to complement and enhance your existing in-game friends system and other social systems your game may access. This lets you enable players to:</p> <ul> <li>Find their friends in your game.</li> <li>Compare scores with their friends on leaderboards.</li> <li>Combine the list of their Play Games friends with existing in-game lists of friends.</li> <li>Identify another player with an in-game profile popup. This popup shows a nickname that the current player has given to their friend, so they know who they are playing with.</li> </ul> <p></p>"},{"location":"features/friends/#basics","title":"Basics","text":"<p>These APIs allow you to perform the following actions:</p> <ul> <li>Load friends: You can check if the player has allowed the game to access Friends list information. If access is granted, you can get a list of Player objects corresponding to the friends of the signed-in player.</li> <li>Launch a view of another player\u2019s Play Games profile: You can open up this view to show the name given to the other player by the signed-in player. This view also offers friendship management controls and won't take the player out of your game.</li> <li>Provide user controls: The user has controls to manage how their Play Games profile is visible to friends and how their friends list is visible to games. For friends list access, the user can choose to automatically grant access for all games or they can choose to individually approve access for each game. Consequently, when loading the friends list, the result may be a callback to display a request for access.</li> </ul>"},{"location":"features/friends/#import-a-play-games-friends-list","title":"Import a Play Games friends list","text":"<p>You can use the Friends APIs to get a list of your players\u2019 Play Games friends and add them to your in-game friends list.</p> <p>New users will have a starting list of friends to play with, and existing users can import their Play Games friends into any in-game lists of friends. As a result, your users will have the largest possible set of players to play with or compete against.</p> <p>Note</p> <p>If you store any relationships from Play Games, you must regularly check the friends list to ensure that the relationships, and consent to use them, are still valid.</p>"},{"location":"features/friends/#add-play-games-friends-to-your-game","title":"Add Play Games friends to your game","text":"<p>Add Play Games friends to any existing in-game friends list by associating their Play Games ID with corresponding player information in your internal database. Make sure you have a button with the Play Games icon next to these friends, which shows the other player's profile when pressed, so your users can know who the friends are.</p> <p>When using the friends list from a backend server, load it securely using the REST API rather than passing the result of the Android API. Make sure to use the player ID returned by <code>players.get(me)</code> in the REST API for the currently signed-in player, as this will be consistent with the ID seen by other players.</p> <p>If the augmented friends list is not stored (but just used at the time of viewing), then no additional work is needed.</p>"},{"location":"features/friends/#grant-play-games-access","title":"Grant Play Games access","text":"<p>If your game doesn't already have Play Games access, a good time to prompt users for their consent is when they view your in-game friends list. For example, you might add a button called Import Play Games friends, which prompts the user for consent when tapped. (Make sure to use the Play Games logo on any button that mentions the service.)</p>"},{"location":"features/friends/#view-another-players-profile","title":"View another player's profile","text":"<p>You can allow your signed-in player to view another player's Play Games profile. This allows the signed-in player to see the name they have given the other player and whether or not they are already friends, giving them added context about the relationship. If the players are not yet friends, the signed-in player will see friendship management controls on the profile view. When friendships are created from within the game, the default names for the two players are their in-game names (if provided). The name of the game where the friendship was initiated is also shown.</p> <p></p>"},{"location":"features/friends/#social-leaderboards","title":"Social leaderboards","text":"<p>The Friends APIs can also be used for leaderboards. Use this feature to show the ranking of the current player among their Play Games friends. Note that this only applies to users who have chosen to share this information with your application, and if the users are friends in Play Games. To support this feature, the game exposes a control to the user. This control uses the <code>collection</code> argument to select the social view of the leaderboard. To learn more, see the section on public and social leaderboards.</p> <p>If you implement the social leaderboards collection, the call to load the leaderboard scores may return a consent-required resolution exception similar to that from <code>UGMSGamesPlayersClient::LoadFriends()</code>. If you implement the default Play Games-provided UI (for example, <code>UGMSGamesLeaderboardsClient::ShowLeaderboardUI()</code>), then this is handled for you automatically.</p>"},{"location":"features/friends/#friends-in-unreal-engine-games","title":"Friends in Unreal Engine games","text":"<p>This guide describes how to use the Friends APIs in Unreal Engine projects.</p>"},{"location":"features/friends/#load-friends","title":"Load friends","text":"<p>You can retrieve and display (in the game) a list of players who are friends with the current user. As a user, it is possible to control which games have access to the friends list. When you retrieve the friends list, you must handle the case where permission is required. This is all encapsulated in the API to make requesting access and subsequently using the friends list a straightforward task. To load the friends list, follow these steps:</p> <ol> <li>Call the <code>UGMSGamesPlayersClient::LoadFriends()</code> function, which is an asynchronous call.</li> <li>If the call is successful (the user already granted access to the friends list), Google Play Games Services returns a <code>PlayerBuffer</code> that represents the user's friends.</li> <li>If the player needs to grant access to the friends list, the call fails with a <code>FriendsResolutionRequiredException</code>. It triggers a dialog to ask the player for consent. The dialog shows only once.</li> <li>If <code>UGMSGamesPlayersClient::OnSharingFriendsConsentUIClosed</code> returns a <code>bIsConsentGranted</code> with a value of <code>true</code>, then consent was granted. Call <code>UGMSGamesPlayersClient::LoadFriends()</code> again to return the friends list. If <code>bIsConsentGranted</code> is <code>false</code>, the user did not consent and <code>UGMSGamesPlayersClient::LoadFriends()</code> will continue to return <code>FriendsResolutionRequiredException</code>.</li> </ol> C++Blueprints <pre><code>#include \"GMSGamesPlayersClient.h\"\n#include \"GMSGamesPlayer.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesPlayersClient::OnLoadFriendsSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesPlayersClient::OnSharingFriendsConsentUIClosed.Add(MyObject, &amp;UMyClass::OnUIClosedFunction);\nUGMSGamesPlayersClient::OnLoadFriendsFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesPlayersClient::OnLoadFriendsCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesPlayersClient::LoadFriends(10, false);\n// ...\nvoid UMyClass::OnUIClosedFunction(const int32 RequestCode, const int32 ResultCode, const bool bIsConsentGranted)\n{\n    if (bIsConsentGranted) UGMSGamesPlayersClient::LoadFriends(10, false);\n}\n\nvoid UMyClass::OnSuccessFunction(const TArray&lt;UGMSGamesPlayer*&gt;&amp; PlayerBuffer)\n{\n    for (UGMSGamesPlayer* Player : PlayerBuffer)\n    {\n        // Process loaded friends here...\n    }\n}\n</code></pre> <p></p>"},{"location":"features/friends/#view-another-players-profile_1","title":"View another player\u2019s profile","text":"<p>You can display a view of another player\u2019s Play Games profile from within your game. This view allows players to send and accept friend invitations for the player being viewed. This view does not require access to the friends list. Additionally, if your game has its own concept of player names separate from Play Games Gamer IDs, you can pass these along to the profile view so that they can be included in any friend invitations for additional context.</p> <p>To show another player\u2019s profile, follow these steps:</p> <ol> <li>Call the <code>UGMSGamesPlayersClient::ShowCompareProfileUI()</code> function, which is an asynchronous call.</li> <li>If the call is successful, Google Play Games Services displays a screen where the user can compare themselves against another player's profile.</li> </ol> <p>Info</p> <p>A request code is used when the Compare Profile UI is shown or closed and can be changed in Project Settings. This code is primarily intended for debugging purposes. Unless you have a specific need to change it, it\u2019s safe to leave the default value unchanged.</p> C++Blueprints <pre><code>#include \"GMSGamesPlayersClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesPlayersClient::OnShowCompareProfileUISuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesPlayersClient::OnCompareProfileUIClosed.Add(MyObject, &amp;UMyClass::OnUIClosedFunction);\nUGMSGamesPlayersClient::OnShowCompareProfileUIFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesPlayersClient::OnShowCompareProfileUICanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesPlayersClient::ShowCompareProfileUI(OtherPlayerID);\n</code></pre> <p></p> <p>If the game has its own name for players, these can be added to the API call. This enables Play Games to set the nickname of players who send friend invitations from within your game to \" from \" Play Games automatically appends \"from \": C++Blueprints <pre><code>#include \"GMSGamesPlayersClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesPlayersClient::OnShowCompareProfileUISuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesPlayersClient::OnCompareProfileUIClosed.Add(MyObject, &amp;UMyClass::OnUIClosedFunction);\nUGMSGamesPlayersClient::OnShowCompareProfileUIFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesPlayersClient::OnShowCompareProfileUICanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesPlayersClient::ShowCompareProfileUIWithAlternativeNameHints(OtherPlayerID, OtherPlayerInGameName, CurrentPlayerInGameName);\n</code></pre> <p></p>"},{"location":"features/leaderboards/","title":"Leaderboards","text":"<p>Leaderboards can be a fun way to drive competition among your players, both for your most hardcore fans (who will be fighting for the top spot in a public leaderboard) and for your more casual players (who will be interested in comparing their progress to their friends').</p> <p>To learn how to implement achievements in your Unreal Engine project, see Leaderboards for Unreal Engine games.</p>"},{"location":"features/leaderboards/#understand-leaderboards","title":"Understand leaderboards","text":"<p>When you create a leaderboard, Play Games Services will take care of managing most aspects of this leaderboard for you. The typical process works like this:</p> <ol> <li>At the end of a game (or at an appropriate moment that you've determined), the game submits the player's score to one or more leaderboards you've created for the game.</li> <li>Play Games Services checks if this score is better than the player's current leaderboard entry for the daily, weekly, or all-time score. If it is, Play Games Services updates the corresponding leaderboards with the new score.</li> <li>Play Games Services sends a score report back to the game client. This report tells the client whether this is a new daily, weekly, or all-time high score. If it isn't, Play Games Services will tell the client what the current daily, weekly, or all-time high score is for this player.</li> <li>To retrieve a player's results for a leaderboard, you can request a timeframe (daily, weekly, or all-time), and specify whether or not the user wants to see a social or public leaderboard. Play Games Services performs all the necessary filtering, and then sends the results back to the client.</li> <li>In cases where there are a lot of scores to report, Play Games Services sends back only the data for the top leaderboard scores. You can also retrieve raw score data for the top scores or the scores adjacent to the player's.</li> </ol>"},{"location":"features/leaderboards/#multiple-leaderboards","title":"Multiple leaderboards","text":"<p>Games can have multiple leaderboards, up to a maximum of 70. For example, a multi-level game might provide a different leaderboard for each level, and a racing game might have a separate leaderboard for each track.</p>"},{"location":"features/leaderboards/#leaderboard-timeframes","title":"Leaderboard timeframes","text":"<p>The Play Games SDK automatically creates daily, weekly, and all-time versions of every leaderboard that you create. There's no need for you to create separate leaderboards for each timeframe.</p> <p>Daily leaderboards reset at UTC-7 (that is, \"midnight Pacific Daylight Time\") all year long.</p> <p>Weekly leaderboards reset at midnight between Saturday and Sunday, in the same timezone as daily leaderboards (UTC-7).</p>"},{"location":"features/leaderboards/#public-and-social-leaderboards","title":"Public and social leaderboards","text":"<p>The Play Games SDK can display two different versions of each leaderboard to the player:</p> <p>The social leaderboard is a leaderboard made up of people in the user's circles (or, more accurately, members of the circles that the user has chosen to share with your application) who have decided to share their gameplay activity to the user.</p> <p>The public leaderboard is a leaderboard made up of players who have chosen to share their gameplay activity publicly. If your player has not chosen to share their gameplay activity publicly, they won't appear in this leaderboard.</p> <p>Note</p> <p>Social leaderboards will initially be empty until you publish the corresponding leaderboard by using Google Play Console. To learn how to publish your leaderboard, see Publishing your game changes.</p>"},{"location":"features/leaderboards/#display-leaderboards","title":"Display leaderboards","text":"<p>In the mobile client libraries, the libraries take care of all the formatting and displaying of leaderboards. You can specify whether a player can see a specific leaderboard, or see a list of all of your leaderboards that they can choose from.</p> <p>You can also implement your own versions of the leaderboards by accessing the data directly from the client libraries.</p> <p>Warning</p> <p>Player names that you retrieve directly using the client libraries may contain Unicode characters (for example, if the name has non-English characters). If you are implementing your own version of a leaderboard UI that uses decorative fonts, make sure that your UI can display these names correctly.</p>"},{"location":"features/leaderboards/#attributes","title":"Attributes","text":"<p>To create and manage leaderboards, you'll want to be familiar with these leaderboard attributes:</p>"},{"location":"features/leaderboards/#the-basics","title":"The basics","text":"<p>These basic elements are associated with every leaderboard:</p> <ul> <li>ID is a unique string that Google Play Console will generate for you. You'll use this unique ID to refer to the leaderboard in your game clients.</li> <li>Name is a short name of the leaderboard (for example, \"High Scores\" or \"Level 3\"). This can be up to 100 characters.</li> <li>Icon is a square icon that will be associated with your leaderboard. For best practices when creating your leaderboard icons, see Icon Guidelines.</li> <li>List order is the order in which the leaderboard will appear when a player views the leaderboards associated with your game.</li> <li>Limits are optional values that define the lower and upper limits of scores that are allowed in the leaderboard. This can help you discard score submissions that are clearly fraudulent. You can also use <code>Players.hide</code> to hide players that you believe have submitted fraudulent scores from all leaderboards in your app.</li> </ul>"},{"location":"features/leaderboards/#order-leaderboards","title":"Order leaderboards","text":"<p>Leaderboards can have one of two ordering types:</p> <ul> <li>Larger is better leaderboards are the default. This is typically what you would see in most games where players earn points.</li> <li>Smaller is better leaderboards are occasionally used in cases where a smaller score would be better. The most common examples of this type of leaderboard are in racing games, where the score represents the player's time to finish the race.</li> </ul> <p>Note</p> <p>Once a leaderboard is published, its ordering type ('Larger is better' or 'Smaller is better') is fixed and cannot be changed. You can still change a leaderboard's list order after it is published.</p>"},{"location":"features/leaderboards/#score-formatting","title":"Score formatting","text":"<p>While all scores are submitted to leaderboards and stored internally as long integers, Play Games Services can present them to the user in a number of different formats:</p> <ul> <li>Numeric leaderboards present scores as numbers. These can be displayed as integers or as real numbers with a fixed number of decimal places. You submit the score as integers and the decimal point is inserted in the specified location. A score of <code>314159</code>, for example, would be displayed as <code>3.14159</code>, <code>3141.59</code>, or <code>314159</code>, depending on the decimal place you specified.</li> <li>Time leaderboards present scores in hours / minutes / seconds / hundredths of a second format. You must submit scores as milliseconds, so <code>66032</code> would be interpreted as <code>1:06.03</code>.</li> <li>Currency leaderboards present scores in a currency format. You submit scores as 1/1,000,000th of the main currency unit. For example, a score of <code>19,950,000</code> would be interpreted as <code>$19.95</code>, assuming you specified your currency as USD.</li> </ul> <p>Numeric leaderboards also support custom units. For instance, if your game measures high scores in meters, you can specify \"meters\" as the default unit for your leaderboard.</p>"},{"location":"features/leaderboards/#translations-and-score-formatting","title":"Translations and score formatting","text":"<p>When the mobile client libraries request leaderboard data from Play Games Services, they specify a language and locale in which to display these scores. The REST API lets you to specify a locale-based language as well. Play Games Services returns formatted leaderboard scores appropriate for that language and locale. These formatted scores will appear whether or not you have added translations for your leaderboard.</p> <p>For Numeric leaderboards, the number format is displayed differently per language. (For example, <code>12,345.78</code> in the US, and <code>12 345,78</code> in France.) If you are using custom units and have added translations to your game, you must supply translated units for every language you have added. The service then displays these translated units where appropriate.</p> <p>Depending on the language you choose, you might need to supply different versions of the names of your units. In English you'll need a version for one item, and another for everything else (for instance, \"meter\" and \"meters\"). In Polish, on the other hand, you would need to provide a version for one unit, a few units, many units, and everything else. To learn more about plural rules, see Quantity Strings(Plurals).</p> <p>For Time leaderboards, the time format is displayed according to the player's language and locale. This will mainly be noticeable if you are using fractions of a second or have an hours value with more than 3 digits (for example, <code>4,815:16:23.42</code> in the US and <code>4.815:16:23,42</code> in Germany).</p> <p>For Currency leaderboards, the currency format will be displayed according to the player's language and locale. However, you cannot change the unit of currency. For example, if you specify your currency in USD, the game will display <code>$19.95</code> in the US and <code>19,95 $</code> in France. But you cannot specify that your game shows dollars in the US and Euros in France.</p>"},{"location":"features/leaderboards/#icon-guidelines","title":"Icon guidelines","text":"<p>Icons should be created as 512 x 512 PNG or JPEG files. Your icons will be scaled down in most game clients, so you should avoid creating icons with too much fine detail. You can submit icons with an alpha channel, and the transparency will be retained. The leaderboard icon will be shown against a darker gray background on Android devices, so choose an icon that can work well in this situation.</p> <p>The same icon is used in all locales, so we recommend against including any text or localized content in an icon.</p>"},{"location":"features/leaderboards/#create-a-leaderboard","title":"Create a leaderboard","text":"<p>This section tells you how to create leaderboards for new or existing games.</p>"},{"location":"features/leaderboards/#create-a-leaderboard-for-a-new-game","title":"Create a leaderboard for a new game","text":"<p>To create a leaderboard for a new and unpublished game, go to Google Play Console entry for your game, and navigate to Grow users &gt; Play Games Services &gt; Setup and management &gt; Leaderboards, then click the Create leaderboard button.</p> <p></p> <p>The 'Add Leaderboard' button on the main Leaderboards Panel</p> <p>Then, simply fill out the information required for this leaderboard.</p> <p></p> <p>A filled-out form for the 'Best round' leaderboard.</p> <p>Click Save as draft, and your leaderboard will be available in the \"Draft\" state. Once you publish your game, all of your game's leaderboards are published with it.</p>"},{"location":"features/leaderboards/#create-a-leaderboard-for-a-published-game","title":"Create a leaderboard for a published game","text":"<p>To create an additional leaderboard for a game that has already been published, follow the same steps as above. For more information on testing an updated version of a game, see Publishing Your Game Changes.</p> <p>Once you've tested your leaderboard and are happy with it, you can republish your game with the new leaderboards, and they will be pushed out to the world.</p>"},{"location":"features/leaderboards/#edit-a-leaderboard","title":"Edit a leaderboard","text":"<p>To edit a leaderboard that you've already created, click the leaderboard in the Leaderboards tab of Google Play Console. At this point, you will see the same form you used when first creating the leaderboard, and you will be able to edit any of the fields as you need.</p> <p>When you're done editing a leaderboard, click the Save as draft button. The newly edited leaderboard will be in the \"Draft\" state, which lets you to test it out.</p> <p>If it's working correctly, select Publish the changes from the box at the top of the leaderboard form, and you'll be able to republish your game, along with all your updated leaderboards, to the public.</p>"},{"location":"features/leaderboards/#undo-an-edit","title":"Undo an edit","text":"<p>If you decide you don't like your newly-edited leaderboard and want to go back to the previous iteration, simply select Revert from the box at the top of the Leaderboard form. Your leaderboard reverts back to the already published version.</p>"},{"location":"features/leaderboards/#delete-a-leaderboard","title":"Delete a leaderboard","text":"<p>You can delete leaderboards that are in the \"Draft\" state or that have been published. To delete a leaderboard in Google Play Console, go to the form for the leaderboard, and click Delete leaderboard at the top of the form.</p> <p>Alternatively, you can call <code>Players.hide</code> to hide a player's leaderboard in the app.</p>"},{"location":"features/leaderboards/#reset-a-leaderboard","title":"Reset a leaderboard","text":"<p>You can only reset player progress data for your draft leaderboards.</p> <ul> <li>To reset leaderboards in Google Play Console, click Reset progress at the top of the form for that event.</li> <li>To reset leaderboard data programmatically, call the Management API Scores methods.</li> </ul>"},{"location":"features/leaderboards/#add-translations-for-leaderboards","title":"Add translations for leaderboards","text":"<p>You can specify your own translations for leaderboards that are associated with your game. Before you do so, first make sure to complete the steps described in Adding translations for your game. You must also have created one or more leaderboards for your game.</p> <p>To add your own translations for leaderboards, open the Leaderboards tab for your game in Google Play Console, then select an existing leaderboard. On the leaderboard details page, click the tab for a language that you previously added in the Game details tab. In the leaderboard details page for that language, edit the form with your translations for that leaderboard. Click Save to store your translated leaderboard details.</p>"},{"location":"features/leaderboards/#hide-leaderboard-scores","title":"Hide leaderboard scores","text":"<p>Google Play Games Services provides a leaderboard tamper protection feature that checks for suspected tampered scores and hides them automatically. This feature is available for Android games only.</p> <p>Tamper protection is enabled by default for new leaderboards that you create for your Android game, but is disabled for existing leaderboards. To enable tamper protection for your existing leaderboards that are already published, follow these steps:</p> <ol> <li>In Google Play Console, open the Games services tab, then select your game from the list.</li> <li>Open the Leaderboards tab, then select the leaderboard instance for which you want to enable tamper protection.</li> <li>Turn the Enable leaderboard tamper protection option to ON.</li> <li>Click Save and continue.</li> <li>Publish your game.</li> </ol> <p>Once tamper protection is enabled for a leaderboard in Google Play Console, it may take up to 24 hours before this feature takes effect. Scores submitted before you enabled tamper protection are not retroactively hidden.</p> <p>In some situations, you may want to disable tamper protection (for example, if your game also runs on the web in addition to Android, and shares leaderboards across these platforms).</p>"},{"location":"features/leaderboards/#leaderboards-for-unreal-engine-games","title":"Leaderboards for Unreal Engine games","text":"<p>This guide shows you how to use leaderboards APIs in Unreal Engine to create visual leaderboards, record a player's score, and compare the score against the player's score from previous game sessions.</p>"},{"location":"features/leaderboards/#before-you-begin","title":"Before you begin","text":"<p>Before you start to code using the leaderboards API:</p> <ul> <li>Follow the instructions for installing and setting up your app to use Google Play Games Services in the Set up Unreal Engine project guide.</li> <li>Define the leaderboards that you want your game to display or update, by following the instructions in the Google Play Console guide.</li> <li>Familiarize yourself with the recommendations described in Quality Checklist.</li> </ul>"},{"location":"features/leaderboards/#update-the-players-score","title":"Update the player's score","text":"<p>When the player's score changes (for example, when the player finishes the game), your game can update their score on the leaderboard by calling <code>UGMSGamesLeaderboardsClient::SubmitScore()</code>, and passing in the leaderboard ID, the raw score value and an optional score tag.</p> C++Blueprints <pre><code>#include \"GMSGamesLeaderboardsClient.h\"\n// ...\nUGMSGamesLeaderboardsClient::SubmitScore(LeaderboardID, Score, ScoreTag);\n</code></pre> <p></p> <p>When making calls to update and load player scores, make sure to also follow these best practices to avoid exceeding your API quota.</p>"},{"location":"features/leaderboards/#display-a-leaderboard","title":"Display a leaderboard","text":"<p>To display leaderboard, call <code>UGMSGamesLeaderboardsClient::ShowLeaderboardUI()</code> and pass in the leaderboard ID and optional time span and collection parameters to display the default leaderboard user interface.</p> <p>Info</p> <p>A request code is used when the Leaderboard UI is shown or closed and can be changed in Project Settings. This code is primarily intended for debugging purposes. Unless you have a specific need to change it, it\u2019s safe to leave the default value unchanged.</p> C++Blueprints <pre><code>#include \"GMSGamesLeaderboardsClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesLeaderboardsClient::OnShowLeaderboardUISuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesLeaderboardsClient::OnLeaderboardUIClosed.Add(MyObject, &amp;UMyClass::OnUIClosedFunction);\nUGMSGamesLeaderboardsClient::OnShowLeaderboardUIFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesLeaderboardsClient::OnShowLeaderboardUICanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesLeaderboardsClient::ShowLeaderboardUI(LeaderboardID, TimeSpan, Collection);\n</code></pre> <p></p> <p>An example of the default leaderboard UI is shown below.</p> <p></p>"},{"location":"features/player-stats/","title":"Player stats","text":"<p>The player stats API let you tailor game experiences to specific segments of players and different stages of the player lifecycle. You can build tailored experiences for each player segment based on how players are progressing, spending, and engaging. For example, you can use this API to take proactive actions to encourage a less active player to re-engage with your game, such as by displaying and promoting new in-game items when the player signs in.</p>"},{"location":"features/player-stats/#player-stats-basics","title":"Player stats basics","text":"<p>You can use the player stats API to retrieve data about a player's in-game activity. The types of player data you can retrieve include:</p> <ul> <li>Average session length: The average session length of the player in minutes. Session length is determined by the time that a player is signed in to Google Play Games services.</li> <li>Days since last played: The approximate number of days since the player last played.</li> <li>Number of purchases: The approximate number of in-app purchases for the player.</li> <li>Number of sessions: The approximate number of sessions of the player. Sessions are determined by the number of times that a player signs in to Google Play Games services.</li> <li>Session percentile: The approximation of sessions percentile for the player, given as a decimal value between 0 to 1 inclusive. This value indicates how many sessions the current player has played in comparison to the rest of this game's player base. Higher numbers indicate that this player has played more sessions.</li> <li>Spend percentile: The approximate spend percentile of the player, given as a decimal value between 0 to 1 inclusive. This value indicates how much the current player has spent in comparison to the rest of this game's player base. Higher numbers indicate that this player has spent more.</li> </ul>"},{"location":"features/player-stats/#tips-for-using-player-stats-data","title":"Tips for using player stats data","text":"<p>The Play Stats API lets you identify various types of players, based on their engagement and spending behavior, and apply appropriate strategies to enhance their game experience.</p> <p>The following table lists some example player segments and recommended engagement strategies:</p> Player Segment Engagement Strategy Frequent players with a high number of sessions and good spend percentile, but have not played for the last week or more. Send a notification about a discount or special bonusavailable upon their return to play. Show a welcome back message that acknowledges impressive accomplishments, and award a badge designed to encourage return play. Highly engaged players in a low spend percentile. Tailor bonuses to incentivize them to invite their friends to install and join your game. This approach builds on the player's demonstrated enjoyment of the game to recruit new players. High spending players showing signs of having peaked and starting to play less frequently. Tailor bonuses to freshen their interest, such as by offering high-value, short-duration tools, weapons, or discounts.The next time the player signs in, show a video that directs them to community features, like clan attacks, that drive more frequent and longer engagement. Players with very high or very low spend probability. Unlikely to spend: Give the option to watch an advertisement video. Show lower-priced items for purchase.Likely to spend: Direct them to the in-game store early, and provide special promotions to incentivize them to buy."},{"location":"features/player-stats/#player-stats-for-unreal-engine-games","title":"Player stats for Unreal Engine games","text":"<p>This guide shows you how to use the player stats API for Google Play Games Services in Unreal Engine. You can use the player stats API to retrieve data about a player's in-game activity.</p>"},{"location":"features/player-stats/#retrieve-player-stats-data","title":"Retrieve player stats data","text":"<p>To retrieve player stats data for the signed-in player, follow these steps:</p> <ol> <li>Call the <code>UGMSGamesPlayerStatsClient::LoadPlayerStats()</code> function.</li> <li>If the call is successful, Google Play games services asynchronously loads a <code>UGMSGamesPlayerStats</code> object. Use the methods of this object to retrieve data about the signed-in player's activities in your app.</li> </ol> C++Blueprints <pre><code>#include \"GMSGamesPlayerStatsClient.h\"\n#include \"GMSGamesPlayerStats.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesPlayerStatsClient::OnLoadPlayerStatsSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesPlayerStatsClient::OnLoadPlayerStatsFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesPlayerStatsClient::OnLoadPlayerStatsCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesPlayerStatsClient::LoadPlayerStats(true);\n// ...\nvoid UMyClass::OnSuccessFunction(UGMSGamesPlayerStats* PlayerStats)\n{\n    if (PlayerStats-&gt;GetDaysSinceLastPlayed() &gt; 7)\n        UE_LOG(LogTemp, Display, TEXT(\"It's been longer than a week\"));\n    if (PlayerStats-&gt;GetNumberOfSessions() &gt; 1000)\n        UE_LOG(LogTemp, Display, TEXT(\"Veteran player\"));\n}\n</code></pre> <p></p>"},{"location":"features/recall-api/","title":"Recall API","text":""},{"location":"features/recall-api/#overview","title":"Overview","text":"<p>The Recall API lets games manage links between Google Play Games Services (PGS) users and their in-game accounts by storing recall tokens with Google servers. Here's a sample scenario of how the Recall API might be used.</p> <ol> <li> <p>A user is playing a game where the developer has an identity system to track user progress, and uses PGS in parallel with other authentication methods to log users into their game. In this example, a user is logged into their PGS account Laura, and creates an in-game account with the developer's identity system called Racer94. As the user plays the game, the developer's game server syncs their progress.</p> <p></p> </li> <li> <p>Separately, the developer saves a recall token with Google, which corresponds with the user's in-game account. Google automatically stores that recall token against the user's PGS profile.</p> <p></p> </li> <li> <p>The user now decides to play the game on GPG on PC for the first time. The user is automatically signed in with their PGS account, and the game client checks to see if there is any progress available for this PGS user. The game server then queries Google to see if there are any tokens for this PGS account. Since there are, Google sends back the recall token, and the game server uses that token to find the user's associated account Racer94, and restore their progress. Since signing in with PGS is a frictionless experience, the user's progress is restored by the app without the user needing to enter a username or password. Furthermore, the developer can use PGS sign-in with their existing identity system, and rely on Google to store the link between player progress and their PGS account.</p> <p></p> </li> </ol> <p>As seen in the example earlier, there are two main actions which are performed by the Recall API:</p> <ul> <li>Storing the token with Google when a user logs in with one of the in-game accounts.</li> <li>Retrieving the token for a user in order to restore their in-game accounts.</li> </ul> <p>In addition to recall tokens, the Recall API also requires a stable identifier corresponding to the in-game account, known as persona, to enforce cardinality constraints. You might think of a persona as the label which represents the user's in-game account within the developer's identity system, and the recall token as a key which is used to restore the user's in-game account to the game. Persona and token values must not be reused across different PGS projects. Also, while recall tokens may be changed over time, a persona should be stable according to the user's in-game account.</p> <p>Note</p> <p>Strings used for recall tokens and personas must be opaque and not contain any sensitive or personally-identifiable information (including but not limited to name, email address, and demographics). Games must use robust encryption algorithms for generating recall tokens.</p>"},{"location":"features/recall-api/#cardinality-rules","title":"Cardinality rules","text":"<p>The Recall API enforces a 1:1 relationship between PGS profiles and in-game accounts (referred to as cardinality rules), where one persona can only be linked to one PGS profile, and one PGS profile can only be linked to one persona. The persona is used as a stable identifier for an in-game account, since recall tokens may change over time.</p> <p>The persona linked to a PGS profile may also be changed over time (as different in-game accounts are linked to the PGS profile).</p>"},{"location":"features/recall-api/#technical-flows-for-storing-and-retrieving-the-recall-tokens","title":"Technical flows for storing and retrieving the recall tokens","text":"<p>This section covers the technical flow between the game client and servers with Google servers when storing and retrieving recall tokens.</p>"},{"location":"features/recall-api/#step-1-sign-in-the-pgs-user-and-retrieve-the-session-id","title":"Step 1: Sign in the PGS User and retrieve the session ID","text":"<p>The game initializes the PGS SDK and attempts to sign the user in with PGS.</p> <p></p> <p>Assuming the user is signed in, request a session ID from the Games SDK on the game client, and request an OAuth 2.0 token from Google's OAuth backend. The session ID and OAuth 2.0 tokens are used to communicate with the Google Games backend.</p> <p></p>"},{"location":"features/recall-api/#step-2-retrieve-any-available-recall-token","title":"Step 2: Retrieve any available recall token","text":"<p>Request for any associated recall token with the PGS user's account. If a token is present, proceed to Step 3a and restore progress. Otherwise, if this is a new user and they have no token present, proceed to Step 3b and store a new token.</p> <p></p>"},{"location":"features/recall-api/#step-3a-if-token-is-present-restore-progress","title":"Step 3a: If token is present, restore progress","text":"<p>If a token is present, retrieve and decrypt the token, and restore user data.</p> <p></p>"},{"location":"features/recall-api/#step-3b-if-no-token-is-present-store-a-token","title":"Step 3b: If no token is present, store a token","text":"<p>Since no token is present, no progress is restored. The user proceeds to sign in with the developer's identity system, or creates a new account if one does not exist. Note - this isn't signing in with PGS (which has been done already), but with a developer's identity system outside of PGS.</p> <p></p> <p>Create an encrypted recall token which encodes the user's in-game account, and send it to Google along with the session ID and OAuth 2.0 token. At this point, Google creates an association between the recall token which was sent, and the player's PGS account.</p> <p></p>"},{"location":"features/recall-api/#flows-for-users-without-a-pgs-profile","title":"Flows for users without a PGS profile","text":"<p>You can store recall tokens for a user who hasn't created a PGS profile yet by using profileless mode. However, there are two important caveats:</p> <ul> <li>You can't retrieve tokens for a user who doesn't have a PGS profile. Profile creation is automatically prompted when the user tries to log into your game with Play Games Services on a second device.</li> <li>You must follow additional guidelines to ensure you have an appropriate notice describing the following items and obtaining the appropriate end-user consent:<ul> <li>Your sharing of the data with Google to enable the Play Games account linking feature.</li> <li>The availability of settings to manage this sharing, such as Play Games settings.</li> <li>The processing of such data under the Google Privacy Policy.</li> </ul> </li> </ul>"},{"location":"features/recall-api/#store-a-token-and-persona-pair","title":"Store a token and persona pair","text":"<ol> <li>A user without a PGS profile opens a game that has profileless recall enabled.</li> <li>The Games SDK triggers an automatic sign-in, which fails because the user has no PGS profile.</li> <li>The Games SDK shows a snackbar that informs the user that the game has integration with Google. This snackbar is actionable\u2014the user can disable recall until a profile is created.</li> <li>The game requests recall access. Note that PGS rejects recall access requests when there are PGS profiles on the device or when there are no Google Accounts on the device. In that case, the game should proceed without using PGS.</li> <li>After the user logs in with an in-game account, the game creates a token and persona pair for the user that corresponds to their in-game account. The game stores this pair with Google. The game might store more tokens later if the user logs into other in-game accounts.</li> </ol>"},{"location":"features/recall-api/#launch-a-game-on-a-new-device","title":"Launch a game on a new device","text":"<ol> <li>A user without a PGS profile opens a game that has profileless recall enabled on a device.</li> <li>The game records a profileless recall token as described in Store a token and persona pair.</li> <li>The user opens the same game on a different device that has the same account setup.</li> <li>The Games SDK triggers profile creation. The user can review and reject previously stored recall tokens. The user creates a PGS profile at this time.</li> <li>The automatic sign-in into PGS completes, and the game receives the authenticated status.</li> <li>The game retrieves recall tokens for the user as usual.</li> </ol>"},{"location":"features/recall-api/#recall-api-for-unreal-engine-games","title":"Recall API for Unreal Engine games","text":"<p>This section explains how to implement the Recall API within your game. It first covers setting up your game server and client to support the API, and then goes through how to store and retrieve tokens.</p>"},{"location":"features/recall-api/#game-server-setup","title":"Game server setup","text":"<p>Set up your game server to make Recall API calls to Google servers.</p>"},{"location":"features/recall-api/#1-set-up-your-play-games-services-project","title":"1. Set up your Play Games Services project","text":"<p>(If not already completed) Follow the instructions in Set up Google Play Games Services.</p> <p>Note</p> <p>Recall tokens and personas are available on a per-PGS project basis. This means that tokens and personas are stored per-PGS project, and for separate PGS projects, there are separate collections of links between PGS profiles and personas. We recommend reviewing this documentation when determining how to set up your PGS projects.</p>"},{"location":"features/recall-api/#2-set-up-a-service-account-for-the-game","title":"2. Set up a service account for the game","text":"<p>Follow the instructions on creating a service account. At the end you should have a JSON file with service account credentials.</p> <p>Note</p> <p>The Recall API is a server-to-server API. Because of this, the Recall API uses service accounts to authenticate the game server, not regular 3-legged OAuth, which is used by other Games APIs to authenticate both game servers and end users.</p>"},{"location":"features/recall-api/#3-download-server-side-java-library-for-playgamesservices","title":"3. Download server-side Java library for PlayGamesServices","text":"<p>Download the latest google-api-services-games library and upload this to your server.</p>"},{"location":"features/recall-api/#4-prepare-credentials-for-recall-api-calls","title":"4. Prepare credentials for Recall API calls","text":"<p>See Preparing to make an authorized API call for more context.</p> <pre><code>import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\nimport com.google.api.services.games.Games;\nimport com.google.api.services.games.GamesScopes;\n\n// ...\n\nGoogleCredential credential =\n  GoogleCredential.fromStream(new FileInputStream(\"&lt;credentials&gt;.json\"))\n    .createScoped(Collections.singleton(GamesScopes.ANDROIDPUBLISHER));\n\nGames gamesApi =\n    new Games.Builder(httpTransport, JSON_FACTORY, credential).build();\n</code></pre>"},{"location":"features/recall-api/#game-client-setup","title":"Game client setup","text":"<p>Set up your game client to retrieve the recall session IDs used by your server to communicate with Google servers.</p> <p>To communicate with Google's servers with the correct information, you need to request a Recall session ID from the client SDK, which you send to your game's server.</p> C++Blueprints <pre><code>#include \"GMSGamesRecallClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesRecallClient::OnRequestRecallAccessSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesRecallClient::OnRequestRecallAccessFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesRecallClient::OnRequestRecallAccessCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesRecallClient::RequestRecallAccess();\n</code></pre> <p></p>"},{"location":"features/recall-api/#use-the-recall-api-within-your-game-server","title":"Use the Recall API within your game server","text":"<p>After configuring your server and client, you can send the <code>recallSessionID</code> from your game client to your game server and follow the guidance below to start using the Java API to store, retrieve or delete the Recall tokens server-side.</p>"},{"location":"features/recall-api/#store-tokens","title":"Store tokens","text":"<p>Users' persona and game token can be stored by using the <code>LinkPersonaRequest</code> object. You need to use the <code>GoogleCredential</code> to call Google APIs (See Calling Google APIs for context). Note that, per the 1:1 cardinality constraint, you can only link one persona to one PGS profile at a time (and vice-versa).You should set the resolution policy in case this PGS profile already has been linked with another persona.</p> <p>Optionally, you may choose to set a TTL on the token, which declares how long the token is valid using a Durations object. You may choose to set this using <code>SetTtl()</code> (as shown below), which sets the expiry date from the amount of time specified in the method, or <code>setExpireTime()</code>, which lets you set an exact time for when the tokens expire.</p> <p>You must encrypt the persona and game token, and they cannot contain personally identifiable information. Persona and token strings can be at most 256 characters long, and there can be at most 20 tokens or personas stored per player per game.</p> <p>Only one token can be stored per persona per player at a given time. Trying to store another token with the same persona overwrites the original token.</p> <p>Note</p> <p>The encryption key used for encrypting tokens should be unique for each application. If the game is transferred to another developer, the encryption key must be passed to the new owner. The recall tokens can't be decrypted without the original encryption key.</p> <p>Note</p> <p>Tokens created for profileless users have a default TTL of 30 days. Otherwise, for users with PGS profiles, tokens don't have a default TTL.</p> <pre><code>import com.google.api.services.games.Games.Recall.LinkPersona;\nimport com.google.api.services.games.model.LinkPersonaRequest;\nimport com.google.api.services.games.model.LinkPersonaResponse;\nimport com.google.protobuf.util.Durations;\n\n// ...\n\nGames gamesApi =\n    new Games.Builder(httpTransport, JSON_FACTORY, credential).build();\n\nString recallSessionId = ... // recallSessionID from game client\nString persona = ... // encrypted opaque string, stable for in-game account\nString token = ... // encrypted opaque string encoding the progress line\n\nLinkPersonaRequest linkPersonaRequest =\n  LinkPersonaRequest.newBuilder()\n    .setSessionId(recallSessionId)\n    .setPersona(persona)\n    .setToken(token)\n    .setCardinalityConstraint(ONE_PERSONA_TO_ONE_PLAYER)\n    .setConflictingLinksResolutionPolicy(CREATE_NEW_LINK)\n    .setTtl(Durations.fromDays(7)) // Optionally set TTL for token\n    .build();\n\nLinkPersonaResponse linkPersonaResponse =\n  gamesApi.recall().linkPersona(linkPersonaRequest).execute();\n\nif (linkPersonaResponse.getState() == LINK_CREATED) {\n  // success\n}\n</code></pre>"},{"location":"features/recall-api/#retrieve-tokens","title":"Retrieve tokens","text":"<p>There are three options to retrieve a token, based on your games' needs. You can request the following:</p> <ul> <li>The tokens associated with the current game, including game-scoped recall tokens.</li> <li>The last token stored across all games owned by the developer account.</li> <li>Given a list of games owned by the developer account, all the recall tokens associated with each game.</li> </ul> <p>Note</p> <p>When you request recall tokens, the API doesn't return strings that represent the persona.</p>"},{"location":"features/recall-api/#game-scoped-recall-tokens","title":"Game-scoped recall tokens","text":"<p>To retrieve the recall tokens from the current game, get the <code>recallSessionId</code> from the client and pass it into the <code>retrieveTokens</code> API:</p> <pre><code>import com.google.api.services.games.Games;\nimport com.google.api.services.games.model.RetrievePlayerTokensResponse;\nimport com.google.api.services.games.model.RecallToken;\n\n// ...\n\nString recallSessionId = ... // recallSessionID from game client\n\nRetrievePlayerTokensResponse retrievePlayerTokensResponse =\n  gamesApi.recall().retrieveTokens(recallSessionId).execute();\n\nfor (RecallToken recallToken : retrievePlayerTokensResponse.getTokens()) {\n  String token recallToken.getToken();\n  // Same string as was written in LinkPersona call\n  // decrypt and recover in-game account\n}\n</code></pre>"},{"location":"features/recall-api/#latest-recall-token-across-all-games-owned-by-developer-account","title":"Latest recall token across all games owned by developer account","text":"<p>To retrieve the most recent token stored across all games owned by the developer account in the Google Play Console, you need to get the <code>recallSessionId</code> from the client and pass it into the <code>lastTokenFromAllDeveloperGames</code> API, as shown in the following code snippet. As part of the response, you can inspect the Application ID associated with this token.</p> <pre><code>import com.google.api.services.games.Games;\nimport com.google.api.services.games.model.RetrieveDeveloperGamesLastPlayerTokenResponse;\nimport com.google.api.services.games.model.GamePlayerToken;\nimport com.google.api.services.games.model.RecallToken;\n\n// ...\n\nString recallSessionId = ... // recallSessionID from game client\n\nRetrieveDeveloperGamesLastPlayerTokenResponse response =\n        gamesApi.recall().lastTokenFromAllDeveloperGames(recallSessionId)\n        .execute();\n\nif (response.hasGamePlayerToken()) {\n    GamePlayerToken gamePlayerToken = response.getGamePlayerToken();\n\n    // The ID of the application that the token is associated with.\n    String applicationId = gamePlayerToken.getApplicationId();\n\n    // Same string as was written in LinkPersona call.\n    RecallToken recallToken = gamePlayerToken.getRecallToken();\n\n    // Decrypt and recover in-game account.\n}\n</code></pre>"},{"location":"features/recall-api/#all-recall-tokens-across-a-given-list-of-games-owned-by-the-developer-account","title":"All recall tokens across a given list of games owned by the developer account","text":"<p>To retrieve all the tokens associated with a list of games which are owned by your developer account in the Google Play Console, get the <code>recallSessionId</code> from the client and pass it into the <code>gamesPlayerTokens</code> API. Supply a list of Application IDs.</p> <pre><code>import com.google.api.services.games.Games;\nimport com.google.api.services.games.model.RetrieveGamesPlayerTokensResponse;\nimport com.google.api.services.games.model.GamePlayerToken;\nimport com.google.api.services.games.model.RecallToken;\n\n// ...\n\nString recallSessionId = ... // recallSessionID from game client\n\n// Application IDs for which you would like to retrieve the recall tokens.\nList&lt;String&gt; applicationIds = ...\n\nRetrieveGamesPlayerTokensResponse response =\ngamesApiClient\n        .recall()\n        .gamesPlayerTokens(recallSessionId)\n        .setApplicationIds(applicationIds)\n        .execute();\n\nfor (GamePlayerToken gamePlayerToken : response.getGamePlayerTokens()) {\n    // The ID of the application that the token is associated with.\n    String applicationId  = gamePlayerToken.getApplicationId();\n\n\n    // Same string as was written in LinkPersona call.\n    RecallToken recallToken = gamePlayerToken.getRecallToken();\n\n    // Decrypt and recover in-game account.\n}\n</code></pre>"},{"location":"features/recall-api/#delete-recall-token","title":"Delete recall token","text":"<p>If needed, you can also delete the recall token with the following call:</p> <pre><code>import com.google.api.services.games.Games;\nimport com.google.api.services.games.model.UnlinkPersonaRequest;\nimport com.google.api.services.games.model.UnlinkPersonaResponse;\n\n// ...\n\nString recallSessionId = ...\nString persona = ...\nString token = ...\n\nGames gamesApi =\n    new Games.Builder(httpTransport, JSON_FACTORY, credential).build();\n\nUnlinkPersonaRequest unlinkPersonaRequest =\n  UnlinkPersonaRequest.newBuilder()\n    .setSessionId(recallSessionId)\n    .setPersona(persona)\n    // .setToken(token) - alternatively set token, but not both\n    .build();\n\nUnlinkPersonaResponse unlinkPersonaResponse =\n  gamesApi.recall().unlinkPersona(unlinkPersonaRequest).execute();\n\nboolean unlinked = unlinkPersonaResponse.isUnlinked();\n</code></pre>"},{"location":"features/recall-api/#enable-profileless-mode","title":"Enable profileless mode","text":"<p>You can enable limited Recall API functionality for users that don't have PGS profiles by following these steps:</p> <ol> <li> <p>Enable profileless recall for your PGS game project in the Play Developer Console. </p> <p></p> </li> <li> <p>Review the additional terms described later in this section.</p> </li> <li> <p>Go to Project settings &gt; Plugins &gt; Google Play Games Services and set <code>Enable Profileless Recall</code> field to <code>true</code>.</p> <p></p> </li> </ol>"},{"location":"features/recall-api/#additional-terms","title":"Additional terms","text":"<p>In addition to being subject to the Play Games Services Terms of Service, you agree that if you use the Recall API for users without a PGS profile, which enables sharing end user's data with Google without them having a Play Games Services profile, you must, prior to sharing such data with Google, provide the end user with appropriate notice describing the following:</p> <ol> <li>Your sharing of the data with Google to enable Play Games account linking feature.</li> <li>The availability of settings to manage such sharing such as those through Play Games settings.</li> <li>The processing of such data under the Google Privacy Policy, and obtain appropriate end user consent for such sharing that meets all applicable legal requirements.</li> </ol>"},{"location":"features/saved-games/","title":"Saved games","text":"<p>The Saved Games service gives you a convenient way to save your players' game progression to Google's servers. Your game can retrieve the saved game data to allow returning players to continue a game at their last save point from any device.</p> <p>The Saved Games service makes it possible to synchronize a player's game data across multiple devices. For example, if you have a game that runs on Android, you can use the Saved Games service to allow a player to start a game on their Android phone, and then continue playing on a tablet without losing any of their progress. This service can also be used to ensure that a player's game play continues from where it left off even if their device is lost, destroyed, or traded in for a newer model.</p> <p>Note</p> <p>Before using the Saved Games service, you must first enable it in Google Play Console.</p> <p>To learn how to implement saved games in your Unreal Engine project, see Saved games for Unreal Engine games.</p>"},{"location":"features/saved-games/#saved-games-basics","title":"Saved Games basics","text":"<p>A saved game consists of two parts:</p> <ul> <li>An unstructured binary blob - this data can represent whatever you choose, and your game is responsible for parsing and writing to it.</li> <li>Structured metadata - additional properties associated with the binary data that allow Google Play Games Services to visually present Saved Games in the default Saved Games list user interface (UI), and to present useful information in the Google Play Games app (for example, last updated timestamp).</li> </ul> <p>A game can write an arbitrary number of Saved Games for a single player, subject to user quota, so there is no hard requirement to restrict players to a single save file.</p>"},{"location":"features/saved-games/#cover-images","title":"Cover images","text":"<p>The Saved Games service provides a visual user experience in addition to persistence features. You are strongly encouraged to associate representative images with corresponding save files. If you are using the default Saved Games list user interface (UI) provided by the Play Games SDK in your game, the UI will display these cover images. The cover images may also appear in the Google Play Games app.</p>"},{"location":"features/saved-games/#descriptions","title":"Descriptions","text":"<p>You can provide a short text description of the content of a particular saved game. This description is directly displayed to players and should summarize the state that the saved game represents; for example, \u201cFighting the Goblins in the Dark Woods\u201d.</p>"},{"location":"features/saved-games/#quota","title":"Quota","text":"<p>Developers are not charged for any saved game data that\u2019s stored in the cloud. Instead, this data is counted against the player\u2019s Google Drive quota - you never have to worry about it. The only quota that game developers need to care about is their Google Drive API quota.</p>"},{"location":"features/saved-games/#readwrite-isolation","title":"Read/Write isolation","text":"<p>All Saved Games are stored in your players' Google Drive Application Data Folder. This folder can only be read and written by your game - it cannot be viewed or modified by other developers\u2019 games, so there is additional protection against data corruption. In addition, Saved Games are insulated from direct tampering by players so they cannot modify individual Saved Games.</p>"},{"location":"features/saved-games/#offline-support","title":"Offline support","text":"<p>Your game can still read and write to a saved game when the player's device is offline, but will not be able to sync with Google Play Games Services until network connectivity is established. Once reconnected, Google Play Games Services asynchronously updates the saved game data on Google's servers.</p>"},{"location":"features/saved-games/#conflict-resolution","title":"Conflict resolution","text":"<p>When using the Saved Games service, your game may encounter conflicts when attempting to save data. These conflicts can occur when a user is running more than one instance of your application on different devices or computers. Your application must be able to resolve these conflicts in a way that provides the best user experience.</p> <p>Typically, data conflicts occur when an instance of your application is unable to reach the Saved Games service while attempting to load data or save it. In general, the best way to avoid data conflicts is to always load the latest data from the service when your application starts up or resumes, and save data to the service with reasonable frequency. However, it is not always possible to avoid data conflicts. Your application should make every effort to handle conflicts such that your users' data is preserved and that they have a good experience.</p>"},{"location":"features/saved-games/#limits","title":"Limits","text":"<p>Google Play Games Services currently enforce size limits on binary data and cover image sizes of 3 MB and 800 KB respectively.</p>"},{"location":"features/saved-games/#saved-game-metadata","title":"Saved game metadata","text":"<p>The structured metadata for a saved game contains these properties:</p> Property Description ID A unique string generated by Google Play Games Services for this saved game. Use this ID to refer to the saved game in your game clients. Name A developer-supplied short name for the saved game, for example \"Save slot 1\" or \"PlayerName_Save1\". This is not shown to players. Description A developer-supplied description of the saved game. Last modified Timestamp in milliseconds generated by Google Play Games Services for when the saved game was last updated. Played time A developer-supplied time (in milliseconds) to display on the saved game. This value should represent how long the player has played the corresponding save game. For example, a played time value of 3600000 will be displayed by Google Play Games Services as \"1 hr\". Cover image This is an optional, developer-supplied property that contains information about the cover image."},{"location":"features/saved-games/#saved-games-for-unreal-engine-games","title":"Saved games for Unreal Engine games","text":"<p>This guide shows you how to implement saved games in Unreal Engine using the snapshots API.</p>"},{"location":"features/saved-games/#before-you-begin","title":"Before you begin","text":"<ul> <li>Enable saved games support for your game in Google Play Console.</li> <li>Familiarize yourself with the recommendations described in Quality Checklist.</li> </ul>"},{"location":"features/saved-games/#display-saved-games","title":"Display saved games","text":"<p>You can integrate the snapshots API wherever your game provides players with the option to save or restore their progress. Your game might display such an option at designated save or restore points or allow players to save or restore progress at any time.</p> <p>Once players select the save or restore option in your game, your game can optionally bring up a screen that prompts players to enter information for a new saved game or to select an existing saved game to restore.</p> <p>To simplify your development, the snapshots API provides a default saved games selection user interface (UI) that you can use out-of-the-box. The saved games selection UI allows players to create a new saved game, view details about existing saved games, and load previous saved games.</p> <p>To launch the default Saved Games UI, call <code>UGMSGamesSnapshotsClient::ShowSnapshotsUI()</code>. If the call is successful, the game displays the saved game selection UI, along with the options you specified.</p> <p>If the player selects to create a new saved game or load an existing saved game, the UI sends a request to Play Games Services. If the request is successful, Play Games Services returns information to create or restore the saved game.</p> <p>Info</p> <p>A request code is used when the Snapshots UI is shown or closed and can be changed in Project Settings. This code is primarily intended for debugging purposes. Unless you have a specific need to change it, it\u2019s safe to leave the default value unchanged.</p> C++Blueprints <pre><code>#include \"GMSGamesSnapshotsClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesSnapshotsClient::OnShowSnapshotsUISuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesSnapshotsClient::OnSnapshotsUISelect.Add(MyObject, &amp;UMyClass::OnSnapshotSelectedFunction);\nUGMSGamesSnapshotsClient::OnSnapshotsUIAdd.Add(MyObject, &amp;UMyClass::OnSnapshotAddedFunction);\nUGMSGamesSnapshotsClient::OnSnapshotsUIClosed.Add(MyObject, &amp;UMyClass::OnUIClosedFunction);\nUGMSGamesSnapshotsClient::OnShowSnapshotsUIFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesSnapshotsClient::OnShowSnapshotsUICanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesSnapshotsClient::ShowSnapshotsUI(\"See My Saves\", true, true, MaxNumberOfSavedGamesToShow);\n</code></pre> <p></p>"},{"location":"features/saved-games/#write-saved-games","title":"Write saved games","text":"<p>To store content to a saved game:</p> <ol> <li>Asynchronously open a snapshot using <code>UGMSGamesSnapshotsClient::Open()</code>.</li> <li>Retrieve <code>SnapshotContents</code> from the returned <code>Snapshot</code> instance.</li> <li>Call <code>UGMSGamesSnapshotsClient::WriteContents()</code> function and pass in the <code>SnapshotContents</code> object and a <code>SaveGameObject</code> instance.</li> <li>Once all your changes are written, call <code>UGMSGamesSnapshotsClient::CommitAndClose()</code> to send your changes to Google's servers. In the method call, your game can optionally provide additional information to tell Play Games Services how to present this saved game to players. This information is represented in a <code>SnapshotMetadataChange</code> struct.</li> </ol> C++Blueprints <pre><code>#include \"GMSGamesSnapshotsClient.h\"\n#include \"GMSGamesSnapshot.h\"\n#include \"GMSGamesSnapshotMetadataChange.h\"\n#include \"GMSGamesSnapshotConflict.h\"\n// ...\nUGMSGamesSnapshotsClient::OnOpenSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesSnapshotsClient::Open(\"SavedGame1\", false, EGMSGamesSnapshotResolutionPolicy::RESOLUTION_POLICY_HIGHEST_PROGRESS);\n// ...\nvoid UMyClass::OnSuccessFunction(UGMSGamesSnapshot* Snapshot)\n{\n    UGMSGamesSnapshotContents* SnapshotContents = Snapshot-&gt;GetSnapshotContents();\n    USaveGame* SaveGameObject = // ...\n\n    if (UGMSGamesSnapshotsClient::WriteContents(SnapshotContents, SaveGameObject))\n    {\n        FGMSGamesSnapshotMetadataChange MetadataChange;   \n        UGMSGamesSnapshotsClient::CommitAndClose(Snapshot, MetadataChange);\n    }\n}\n</code></pre> <p></p> <p>If the player's device is not connected to a network when your app calls <code>UGMSGamesSnapshotsClient::CommitAndClose()</code>, Play Games Services stores the saved game data locally on the device. Upon device re-connection, Play Games Services syncs the locally cached saved game changes to Google's servers.</p>"},{"location":"features/saved-games/#load-saved-games","title":"Load saved games","text":"<p>To retrieve saved games for the currently signed-in player:</p> <ol> <li>Asynchronously open a snapshot with <code>UGMSGamesSnapshotsClient::Open()</code>.</li> <li>Retrieve <code>SnapshotContents</code> from the returned <code>Snapshot</code> instance.</li> <li>Call <code>UGMSGamesSnapshotsClient::ReadContents()</code> function and pass in the <code>SnapshotContents</code>.</li> </ol> C++Blueprints <pre><code>#include \"GMSGamesSnapshotsClient.h\"\n#include \"GMSGamesSnapshot.h\"\n#include \"GMSGamesSnapshotConflict.h\"\n// ...\nUGMSGamesSnapshotsClient::OnOpenSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesSnapshotsClient::Open(\"SavedGame1\", false, EGMSGamesSnapshotResolutionPolicy::RESOLUTION_POLICY_HIGHEST_PROGRESS);\n// ...\nvoid UMyClass::OnSuccessFunction(UGMSGamesSnapshot* Snapshot)\n{\n    UGMSGamesSnapshotContents* SnapshotContents = Snapshot-&gt;GetSnapshotContents();\n    USaveGame* SaveGameObject = UGMSGamesSnapshotsClient::ReadContents(SnapshotContents);\n}\n</code></pre> <p></p>"},{"location":"features/saved-games/#handle-saved-game-conflicts","title":"Handle saved game conflicts","text":"<p>When using the snapshots API in your game, it is possible for multiple devices to perform reads and writes on the same saved game. In the event that a device temporarily loses its network connection and later reconnects, this might cause data conflicts whereby the saved game stored on a player's local device is out-of-sync with the remote version stored in Google's servers.</p> <p>The snapshots API provides a conflict resolution mechanism that presents both sets of conflicting saved games at read-time and lets you implement a resolution strategy that is appropriate for your game.</p> <p>When Play Games Services detects a data conflict, the <code>UGMSGamesSnapshotConflict</code> object is returned. It provides two versions of the saved game:</p> <ul> <li>Server version: The most-up-to-date version known by Play Games Services to be accurate for the player's device.</li> <li>Local version: A modified version detected on one of the player's devices that contains conflicting content or metadata. This may not be the same as the version that you tried to save.</li> </ul> <p>Your game must decide how to resolve the conflict by picking one of the provided versions or merging the data of the two saved game versions.</p> <p>To detect and resolve saved game conflicts:</p> <ol> <li>Bind your functions to <code>UGMSGamesSnapshotsClient::OnOpenSuccess</code> and <code>UGMSGamesSnapshotsClient::OnOpenConflict</code>, and then call <code>UGMSGamesSnapshotsClient::Open()</code>.</li> <li>If the <code>OnOpenConflict</code> delegate is broadcasted, it returns a <code>UGMSGamesSnapshotConflict</code> instance that you have to resolve.</li> <li>Call <code>UGMSGamesSnapshotConflict::GetConflictID()</code> to retrieve the conflict ID that uniquely identifies the detected conflict. Your game needs this value to send a conflict resolution request later.</li> <li>Call <code>UGMSGamesSnapshotConflict::GetConflictingSnapshot()</code> to get the local version.</li> <li>Call <code>UGMSGamesSnapshotConflict::GetSnapshot()</code> to get the server version.</li> <li>To resolve the saved game conflict, select a version that you want to save to the server as the final version, and pass it to the <code>UGMSGamesSnapshotsClient::ResolveConflict()</code> function.</li> </ol> C++Blueprints <pre><code>#include \"GMSGamesSnapshotsClient.h\"\n#include \"GMSGamesSnapshot.h\"\n#include \"GMSGamesSnapshotMetadata.h\"\n#include \"GMSGamesSnapshotConflict.h\"\n// ...\nUGMSGamesSnapshotsClient::OnOpenConflict.Add(MyObject, &amp;UMyClass::OnConflictFunction);\n// Resolving the conflict may cause another conflict\nUGMSGamesSnapshotsClient::OnResolveConflictConflict.Add(MyObject, &amp;UMyClass::OnConflictFunction);\nUGMSGamesSnapshotsClient::Open(\"SavedGame1\", false);\n// ...\nvoid UMyClass::OnConflictFunction(UGMSGamesSnapshotConflict* SnapshotConflict)\n{\n    UGMSGamesSnapshot* LocalSnapshot = SnapshotConflict-&gt;GetConflictingSnapshot();\n    UGMSGamesSnapshot* ServerSnapshot = SnapshotConflict-&gt;GetSnapshot();\n\n    if (LocalSnapshot-&gt;GetMetadata()-&gt;GetLastModifiedTimestamp() &gt; ServerSnapshot-&gt;GetMetadata()-&gt;GetLastModifiedTimestamp())\n    {\n        UGMSGamesSnapshotsClient::ResolveConflict(SnapshotConflict-&gt;GetConflictID(), LocalSnapshot);\n    }\n    else\n    {\n        UGMSGamesSnapshotsClient::ResolveConflict(SnapshotConflict-&gt;GetConflictID(), ServerSnapshot);\n    }\n}\n</code></pre> <p></p>"},{"location":"features/saved-games/#modify-saved-games","title":"Modify saved games","text":"<p>If you want to merge data from multiple saved games or modify an existing Snapshot to save to the server as the resolved final version, follow these steps:</p> <ol> <li>Call <code>UGMSGamesSnapshotsClient::Open()</code>.</li> <li>Call <code>UGMSGamesSnapshotConflict::GetResolutionSnapshotsContent()</code> to get a new <code>UGMSGamesSnapshotContents</code> object.</li> <li>Merge the data from <code>UGMSGamesSnapshotConflict::GetConflictingSnapshot()</code> and <code>UGMSGamesSnapshotConflict::GetSnapshot()</code> into the <code>UGMSGamesSnapshotContents</code> object from the previous step.</li> <li>Optionally, create a <code>FGMSGamesSnapshotMetadataChange</code> instance if there are any changes to the metadata fields.</li> <li>Call <code>UGMSGamesSnapshotsClient::ResolveConflict()</code>. In your function call, pass <code>UGMSGamesSnapshotConflict::GetConflictId()</code> as the first argument, and the <code>FGMSGamesSnapshotMetadataChange</code> struct and <code>UGMSGamesSnapshotContents</code> object that you modified earlier as the second and third arguments respectively.</li> <li>If the <code>UGMSGamesSnapshotsClient::ResolveConflict()</code> call is successful, the API stores the <code>UGMSGamesSnapshot</code> object to the server and attempts to open the Snapshot object on your local device.<ul> <li>If there is a conflict, your game should return to step 2 and repeat the steps to modify the snapshot until conflicts are resolved.</li> <li>If there's no conflict, the <code>UGMSGamesSnapshot</code> object is open for your game to modify.</li> </ul> </li> </ol>"},{"location":"features/sign-in/","title":"Sign-in","text":""},{"location":"features/sign-in/#overview","title":"Overview","text":"<p>Google Play Games Services sign-in mechanism serves the purpose of authenticating players and providing them with distinct Android gaming identities (player ID).</p> <p>This platform-level player ID facilitates the seamless continuation of gameplay across multiple devices, thereby establishing a cohesive connection between the game and the player. In comparison to alternative centralized systems, players are more willing to use this identity for the purpose of sign-in.</p> <p>Furthermore, the sign-in process offers a reliable identifier for cloud save systems. Players are able to do the following:</p> <ul> <li>Resume their progress in the game following a change or reset of their device.</li> <li>Engage in the game across multiple devices, enabling seamless transitions between smartphones and Chromebooks.</li> <li>Uninstall and reinstall the game.</li> </ul> <p>Developers have the option of either using the player ID as a key for their own cloud save solution, or using the built-in Saved Games service.</p> <p>Play Games Services (PGS) supports automatic sign-in, a zero-friction way to sign in players.</p> <p>Sign-in with Play Games Services is an effective way to provide players with a strong identity without the need to implement additional features like leaderboards or saved games. This low-friction approach makes it easier for players to engage with your game and create a personalized experience.</p>"},{"location":"features/sign-in/#login-request-quota","title":"Login request quota","text":"<p>There is a daily quota for login requests with Play Games Services. For more information, see Managing your daily quota.</p>"},{"location":"features/sign-in/#recommended-sign-in-flow","title":"Recommended sign-in flow","text":"<p>In order to successfully sign players into your game, use the following sign-in flow:</p> <ol> <li>During the startup sequence of your game, Automatic sign-in will trigger, attempting to login the user or create a new account.</li> <li>If automatic sign-in does not work or the user declines, then show a manual sign-in button in case the user would like to login later on.</li> </ol>"},{"location":"features/sign-in/#automatic-sign-in","title":"Automatic sign-in","text":"<p>When a player launches a game with automatic sign-in enabled, they are signed into the game without interacting with the sign-in prompt. Players can enable automatic sign-in in the Google Play Games app, or in the initial sign-in prompt displayed in your game.</p> <p></p>"},{"location":"features/sign-in/#multiple-sign-in-services","title":"Multiple sign-in services","text":"<p>Play Games Services provides a gaming identity for Android players, but it doesn't need to be the only identity connected to your users. You can sign in players using Play Games Services, a social network ID, and your own in-game ID system all at the same time.</p>"},{"location":"features/sign-in/#player-id","title":"Player ID","text":"<p>A player ID is an identifier for a Play Games Services player account. Your game can retrieve a player ID for any player that signs into your game using Play Games Services sign-in. Your game client, backend game servers, and cloud-save service can use the ID to securely access player data from Play Games Services.</p> <p>A player ID is consistent for a user when they play your game on multiple devices. However, it is not always consistent between games. For more information, see next generation Player IDs.</p>"},{"location":"features/sign-in/#oauth-scopes","title":"OAuth Scopes","text":"<p>Play Games Services relies on the OAuth system to allow players to give your game access to their account. Play Games Services has a unique scope for games (<code>games-lite</code>) and relies on another scope (<code>drive.appdata</code>) if your game uses the saved games feature. The saved games feature gives access to the user's Google Drive account, which is where the game data is stored.</p> <p>When using the Play Games Services SDK, you cannot request extra OAuth scopes. If you need extra OAuth scopes, we recommend using the Google Sign-In SDK with Play Games Services.</p>"},{"location":"features/sign-in/#recall-api","title":"Recall API","text":"<p>The Recall API lets games manage links between PGS users and their in-game accounts by storing recall tokens with Google servers. To learn more about enabling this feature, see Integrate the PGS Recall API within your game.</p>"},{"location":"features/sign-in/#game-server-integration","title":"Game server integration","text":"<p>After a player signs into your game using the Sign-in services, your backend game server can communicate directly with Play Games Services servers to access a player's ID, profile, friends list, and other Play Games Services data. This requires a server authorization code that is provided by the Play Games Services SDK. Your server can use the authorization code along with the Play Games Services REST API to securely communicate with Play Games Services servers.</p> <p>For more information, see Server-side access to Play Games Services.</p>"},{"location":"features/sign-in/#sign-in-for-unreal-engine-games","title":"Sign-in for Unreal Engine games","text":"<p>In order to access Google Play Games Services functionality, your game needs to provide the signed-in player\u2019s account. This part describes how to implement a seamless sign-in experience in your game.</p>"},{"location":"features/sign-in/#get-the-sign-in-result","title":"Get the sign-in result","text":"<p>When your game launches, it will always attempt to sign in the user. To authenticate the user, you must verify that the user successfully signed in, and then get their Player ID.</p> <p>To verify the sign in attempt, call <code>UGMSGamesSignInClient::IsAuthenticated()</code>.</p> C++Blueprints <pre><code>#include \"GMSGamesSignInClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesSignInClient::OnIsAuthenticatedSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesSignInClient::OnIsAuthenticatedFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesSignInClient::OnIsAuthenticatedCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesSignInClient::IsAuthenticated();\n</code></pre> <p></p> <p>If the user chooses not to sign in when the game launches, you may optionally choose to continue showing a button with the Play Games icon, and attempt to sign in the user again by calling <code>UGMSGamesSignInClient::SignIn()</code> if the user presses the button.</p> C++Blueprints <pre><code>#include \"GMSGamesSignInClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesSignInClient::OnSignInSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesSignInClient::OnSignInFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesSignInClient::OnSignInCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesSignInClient::SignIn();\n</code></pre> <p></p> <p>After verifying that the user is signed in, you can retrieve the Player ID to identify the user.</p> C++Blueprints <pre><code>#include \"GMSGamesPlayersClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesPlayersClient::OnGetCurrentPlayerIDSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesPlayersClient::OnGetCurrentPlayerIDFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesPlayersClient::OnGetCurrentPlayerIDCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesPlayersClient::GetCurrentPlayerID();\n</code></pre> <p></p> <p>Note</p> <p>You should not store the player ID returned from the Android SDK in the game's backend, as it's possible for an untrusted device to tamper with it. Instead, you should enable server-side API access and retrieve the player ID or other data with a server-side call directly from the game's backend.</p>"},{"location":"features/sign-in/#server-side-access-to-google-play-games-services","title":"Server-side access to Google Play Games Services","text":"<p>We recommend that you authenticate players and securely pass the player's identity to the backend server. This enables your game to securely retrieve the player's identity and other data without being exposed to potential tampering while passing through the device.</p> <p>In this scenario, once the player signs in successfully, you can request a special single-use code (called the server auth code) from the Play Games Services v2 SDK, which the client passes to the server. Then, on the server, exchange the server auth code for an OAuth 2.0 token that the server can use to make calls to the Google Play Games Services API.</p> <p>For additional guidance on adding sign-in in your games, see Sign-in for Unreal Engine Games.</p> <p>The following steps are required for offline access:</p> <ol> <li>In the Google Play Console: Create a credential for your game server. The OAuth client type of the credential will be \"web\".</li> <li>In the Android app: As part of sign-in, request a server auth code for your server's credential, and pass that to your server.</li> <li>On your game server: Exchange the server auth code for an OAuth access token using Google auth services, and then use this to call the Play Games Services REST APIs.</li> </ol>"},{"location":"features/sign-in/#create-a-server-side-web-app","title":"Create a server-side web app","text":"<p>Google Play Game services does not provide backend support for Web games. However, it does provide backend server support for your Android game's server.</p> <p>If you want to use the REST APIs for Google Play Games services in your server-side app, follow these steps:</p> <ol> <li>In the Google Play Console, select a game.</li> <li>Go to Play Games Services &gt; Setup and management &gt; Configuration.</li> <li>Select Add credential to be brought to the Add credential page. Select Game server as the credential type and continue onto the Authorization section.<ol> <li>If your game server already has an OAuth client ID select it from the drop down menu. After saving your changes, move onto the next section.</li> <li>If you don't have an existing OAuth client ID for your game server, you can create one.<ol> <li>Click Create OAuth client and follow the Create OAuth Client ID link.</li> <li>This will bring you to the Google Cloud Platform's Create OAuth Client ID page for your project associated with your game.</li> <li>Fill out the page's form and click create. Be sure to set the Application type to Web application.</li> <li>Return to the Add credential page's Authorization section, select the newly created OAuth client and save your changes.</li> </ol> </li> </ol> </li> </ol>"},{"location":"features/sign-in/#get-the-server-auth-code","title":"Get the server auth code","text":"<p>To retrieve a server auth code that your game can use for access tokens on your backend server:</p> <ol> <li> <p>Call <code>UGMSGamesSignInClient::RequestServerSideAccess()</code> from the client.</p> <ol> <li>Be sure that you use the OAuth Client ID registered for your game server and not the OAuth Client ID of your Android application.</li> <li>(Optional) If your game server requires offline access (long lived access using a refresh token) to Play Games Services, you can set the <code>bForceRefreshToken</code> parameter to true.</li> </ol> C++Blueprints <pre><code>#include \"GMSGamesSignInClient.h\"\n// ...\n// Binding functions to multicast delegates\nUGMSGamesSignInClient::OnRequestServerSideAccessSuccess.Add(MyObject, &amp;UMyClass::OnSuccessFunction);\nUGMSGamesSignInClient::OnRequestServerSideAccessFailure.Add(MyObject, &amp;UMyClass::OnFailureFunction);\nUGMSGamesSignInClient::OnRequestServerSideAccessCanceled.Add(MyObject, &amp;UMyClass::OnCanceledFunction);\n// Calling the function\nUGMSGamesSignInClient::RequestServerSideAccess(OAUTH_2_WEB_CLIENT_ID, false);\n</code></pre> <p></p> </li> <li> <p>Send the OAuth auth code token to your backend server so it may be exchanged, the Player ID verified against the Play Games Services REST APIs, and then authenticated with your game.</p> </li> </ol>"},{"location":"features/sign-in/#send-the-server-auth-code","title":"Send the server auth code","text":"<p>Send the server auth code to your backend server to exchange for access and refresh tokens. Use the access token to call the Play Games Services API on behalf of the player and, optionally, store the refresh token to acquire a new access token when the access token expires.</p> <p>The following code snippet shows how you might implement the server-side code in the Java programming language to exchange the server auth code for access tokens. It uses the clientserverskeleton sample app.</p> <p>Note</p> <p>For more information about how Player IDs work, visit the topic here on next generation Player IDs.</p> <pre><code>/**\n * Exchanges the authcode for an access token credential.  The credential\n * is the associated with the given player.\n *\n * @param authCode - the non-null authcode passed from the client.\n * @param player   - the player object which the given authcode is\n *                 associated with.\n * @return the HTTP response code indicating the outcome of the exchange.\n */\nprivate int exchangeAuthCode(String authCode, Player player) {\ntry {\n\n    // The client_secret.json file is downloaded from the Google API\n    // console.  This is used to identify your web application.  The\n    // contents of this file shouldn't be shared.\n    //\n    File secretFile = new File(\"client_secret.json\");\n\n    // If we don't have the file, we can't access any APIs, so return\n    // an error.\n    if (!secretFile.exists()) {\n        log(\"Secret file : \" + secretFile\n                .getAbsolutePath() + \"  does not exist!\");\n        return HttpServletResponse.SC_FORBIDDEN;\n    }\n\n    GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(\n            JacksonFactory.getDefaultInstance(), new\n            FileReader(secretFile));\n\n    // Extract the application id of the game from the client id.\n    String applicationId = extractApplicationId(clientSecrets\n            .getDetails().getClientId());\n\n    GoogleTokenResponse tokenResponse =\n            new GoogleAuthorizationCodeTokenRequest(\n            HTTPTransport,\n            JacksonFactory.getDefaultInstance(),\n            \"https://oauth2.googleapis.com/token\",\n            clientSecrets.getDetails().getClientId(),\n            clientSecrets.getDetails().getClientSecret(),\n            authCode,\n            \"\")\n            .execute();\n\n    log(\"hasRefresh == \" + (tokenResponse.getRefreshToken() != null));\n    log(\"Exchanging authCode: \" + authCode + \" for token\");\n    Credential credential = new Credential\n            .Builder(BearerToken.authorizationHeaderAccessMethod())\n            .setJsonFactory(JacksonFactory.getDefaultInstance())\n            .setTransport(HTTPTransport)\n            .setTokenServerEncodedUrl(\"https://www.googleapis.com/oauth2/v4/token\")\n            .setClientAuthentication(new HttpExecuteInterceptor() {\n                @Override\n                public void intercept(HttpRequest request)\n                        throws IOException {\n                        }\n            })\n            .build()\n            .setFromTokenResponse(tokenResponse);\n\n    player.setCredential(credential);\n\n    // Now that we have a credential, we can access the Games API.\n    PlayGamesAPI api = new PlayGamesAPI(player, applicationId,\n            HTTPTransport, JacksonFactory.getDefaultInstance());\n\n    // Call the verify method, which checks that the access token has\n    // access to the Games API, and that the Player ID used by the\n    // client matches the playerId associated with the accessToken.\n    boolean ok = api.verifyPlayer();\n\n    // Call a Games API on the server.\n    if (ok) {\n        ok = api.updatePlayerInfo();\n        if (ok) {\n            // persist the player.\n            savePlayer(api.getPlayer());\n        }\n    }\n\n    return ok ? HttpServletResponse.SC_OK :\n            HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n\n  } catch (IOException e) {\n    e.printStackTrace();\n  }\n  return HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n}\n</code></pre>"},{"location":"features/sign-in/#call-rest-apis-from-the-server","title":"Call REST APIs from the server","text":"<p>See REST APIs for Google Play Games services for a full description of API calls available.</p> <p>Examples of REST API calls that you may find useful include the following:</p>"},{"location":"features/sign-in/#player","title":"Player","text":"<p>Want to get the signed-in player's ID and profile data? Call <code>Players.get</code> with <code>'me'</code> as the ID.</p>"},{"location":"features/sign-in/#friends","title":"Friends","text":"<p>See the Friends guide for details.</p> <ul> <li>To retrieve the player's list of friends, call <code>Players.list</code> with <code>friends_all</code> as the <code>collection</code>.</li> <li>To verify whether you have access to a friends list, call <code>Players.get</code> with <code>me</code> as the <code>playerID</code>, and view the <code>profileSettings.friendsListVisibility</code> field in the response.</li> </ul>"},{"location":"features/sign-in/#achievements","title":"Achievements","text":"<p>See the Achievements guide for details.</p> <ul> <li>To get a list of current achievements, call <code>AchievementDefinitions.list</code>.</li> <li>Combine that with a call to <code>Achievements.list</code> to find out which ones the player unlocked.</li> <li>Call <code>Achievements.unlock</code> to unlock a player achievement.</li> <li>Call <code>Achievements.increment</code> to report progress on an achievement, and find out if the player unlocked it.</li> <li>If you are debugging a game that hasn't reached production, you can call <code>Achievements.reset</code> or <code>Achievements.resetAll</code> from the Management APIs to reset achievements to their original state.</li> </ul>"},{"location":"features/sign-in/#leaderboards","title":"Leaderboards","text":"<p>See the Leaderboards guide for details.</p> <ul> <li>Want to get a list of all scoreboards in the game? Make a call to <code>Leaderboards.list</code>.</li> <li>If a player is done with a game, you can submit their score to <code>Scores.submit</code> and find out if it is a new high score.</li> <li>To display a leaderboard, get the data from <code>Scores.list</code> and show it to the user.</li> <li>Use <code>Scores.listWindow</code> to find an assortment of scores close to the user's high score.</li> <li>To get more information about the player's score in a particular leaderboard (for example, if the player is in the top 12% of all players), call <code>Scores.get</code>.</li> <li>If you debugging a game, you can call <code>Scores.reset</code> from the Management APIs to reset all scores for that player from a particular leaderboard.</li> </ul>"}]}